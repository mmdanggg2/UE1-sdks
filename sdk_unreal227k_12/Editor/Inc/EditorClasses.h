/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if ((_MSC_VER) || (HAVE_PRAGMA_PACK))
#pragma pack (push,OBJECT_ALIGNMENT)
#endif

#ifndef EDITOR_API
#define EDITOR_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern EDITOR_API FName EDITOR_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(Build)
AUTOGENERATE_NAME(OnCallback)
AUTOGENERATE_NAME(OnClosed)
AUTOGENERATE_NAME(OnInit)
AUTOGENERATE_NAME(OnPaint)
AUTOGENERATE_NAME(OnRemoved)
AUTOGENERATE_NAME(OnTick)

#ifndef NAMES_ONLY

enum ESignalType : BYTE
{
	SG_LeftClick,
	SG_RightClick,
	SG_DblClick,
	SG_ValueChange,
	SG_HitEnter,
	SG_MAX,
};

struct FEditModeType
{
	FStringNoInit ToolTip GCC_PACK(INT_ALIGNMENT);
	class UTexture* Image;
	INT Mode;
};
struct FEdKeyBinding
{
	BYTE Key GCC_PACK(INT_ALIGNMENT);
	BITFIELD bAlt:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bShift:1;
	BITFIELD bCtrl:1;
	FStringNoInit Cmd GCC_PACK(INT_ALIGNMENT);
};
struct FTerrainModeSettings
{
	INT Mode GCC_PACK(INT_ALIGNMENT);
	INT Index;
	FLOAT Radius;
	FLOAT InnerRadius;
	FLOAT Strength;
	class ATerrainInfo* Terrain;
};

class EDITOR_API UEditorEngine : public UEngine, public FNotifyHook
{
public:
	INT AutosaveCounter GCC_PACK(INT_ALIGNMENT);
	INT AutoSaveIndex;
	INT AutoSaveCount;
	INT Mode;
	INT ClickFlags;
	INT NumberOfCPUs;
	FLOAT MovementSpeed;
	FLOAT SnapDistance;
	FLOAT FovAngleDegrees;
	class ULevel* Level;
	class UModel* TempModel;
	class UModel* bspProcessModel;
	class UTexture* CurrentTexture;
	class UFont* CurrentFont;
	class UTexture* MenuUp;
	class UTexture* MenuDn;
	class UTexture* CollOn;
	class UTexture* CollOff;
	class UTexture* PlyrOn;
	class UTexture* PlyrOff;
	class UTexture* LiteOn;
	class UTexture* LiteOff;
	class UTexture* BackPrev;
	class UTexture* TerrainMarker;
	class UTexture* Bad;
	class UTexture* Bkgnd;
	class UTexture* BkgndHi;
	class UObject* ParentContext;
	class UClass* CurrentClass;
	class UClass* BrowseClass;
	TArrayNoInit<class UObject*> Tools;
	TArrayNoInit<FString> EditPackages;
	TArrayNoInit<FCompileError> CompilerError;
	TArrayNoInit<FEdKeyBinding> KeyBindings;
	TArrayNoInit<FEditModeType> EditModeList;
	FVector ClickLocation;
	FPlane ClickPlane;
	FVector GridSize;
	FRotator RotGridSize;
	FColor C_WorldBox;
	FColor C_GroundPlane;
	FColor C_GroundHighlight;
	FColor C_BrushWire;
	FColor C_Pivot;
	FColor C_Select;
	FColor C_Current;
	FColor C_AddWire;
	FColor C_SubtractWire;
	FColor C_GreyWire;
	FColor C_BrushVertex;
	FColor C_BrushSnap;
	FColor C_Invalid;
	FColor C_ActorWire;
	FColor C_ActorHiWire;
	FColor C_Black;
	FColor C_White;
	FColor C_Mask;
	FColor C_SemiSolidWire;
	FColor C_NonSolidWire;
	FColor C_WireBackground;
	FColor C_WireGridAxis;
	FColor C_ActorArrow;
	FColor C_ScaleBox;
	FColor C_ScaleBoxHi;
	FColor C_ZoneWire;
	FColor C_Mover;
	FColor C_OrthoBackground;
	FTerrainModeSettings TerrainSettings;
	FStringNoInit GameCommandLine;
	FStringNoInit CodePath;
	class UTransactor* Trans;
	class UTextBuffer* Results;
	class WObjectProperties* ActorProperties;
	class WObjectProperties* LevelProperties;
	class WConfigProperties* Preferences;
	class WProperties* UseDest;
	const TCHAR* BuildStageTitle;
	BYTE AutosaveTimeMinutes;
	BITFIELD FastRebuild:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD Bootstrapping:1;
	BITFIELD GridEnabled:1;
	BITFIELD SnapVertices:1;
	BITFIELD AffectRegion:1;
	BITFIELD TextureLock:1;
	BITFIELD SelectionLock:1;
	BITFIELD RotGridEnabled:1;
	BITFIELD GodMode:1;
	BITFIELD UnlitMeshViewer:1;
	BITFIELD FreeMeshView:1;
	BITFIELD SaveLevelSummary:1;
	BITFIELD AutoSave:1;
	BITFIELD AskSave:1;
	BITFIELD AlwaysPermanentBrush:1;
	BITFIELD bMultiThreadBSPBuild:1;
	BITFIELD bAbortBSPBuild:1;
	DECLARE_CLASS(UEditorEngine,UEngine,(CLASS_Transient | CLASS_Config),Editor)
	#include "UEditorEngine.h"
};

class EDITOR_API UBrushBuilder : public UObject
{
public:
	class UTexture* BitmapImage GCC_PACK(INT_ALIGNMENT);
	FName Group;
	TArrayNoInit<FVector> Vertices;
	TArrayNoInit<FBuilderPoly> Polys;
	FStringNoInit BitmapFilename;
	FStringNoInit ToolTip;
	BITFIELD MergeCoplanars:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_FUNCTION(execPolyEnd);
	DECLARE_FUNCTION(execPolyi);
	DECLARE_FUNCTION(execPolyBegin);
	DECLARE_FUNCTION(execPoly4i);
	DECLARE_FUNCTION(execPoly3i);
	DECLARE_FUNCTION(execVertex3f);
	DECLARE_FUNCTION(execVertexv);
	DECLARE_FUNCTION(execBadParameters);
	DECLARE_FUNCTION(execGetPolyCount);
	DECLARE_FUNCTION(execGetVertex);
	DECLARE_FUNCTION(execGetVertexCount);
	DECLARE_FUNCTION(execEndBrush);
	DECLARE_FUNCTION(execBeginBrush);
	BITFIELD eventBuild()
	{
		struct { BITFIELD ReturnValue; } Parms = { 0 };
		ProcessEvent(FindFunctionChecked(EDITOR_Build),&Parms);
		return Parms.ReturnValue;
	}
	DECLARE_CLASS(UBrushBuilder,UObject,CLASS_Abstract,Editor)
	#include "UBrushBuilder.h"
};

class EDITOR_API UEdCommandHook : public UObject
{
public:
	DECLARE_CLASS(UEdCommandHook,UObject,CLASS_Abstract,Editor)
	#include "UEdCommandHook.h"
};

class EDITOR_API UEdGUI_Base : public UObject
{
public:
	class UEdGUI_WindowFrame* Parent GCC_PACK(INT_ALIGNMENT);
	class UEdGUI_Base* NextComponent;
	void* WndPtr;
	BITFIELD bNeedsTick:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_FUNCTION(execSetCaption);
	DECLARE_FUNCTION(execGetMouse);
	DECLARE_FUNCTION(execClose);
	DECLARE_FUNCTION(execAddComponent);
	void eventOnTick()
	{
		ProcessEvent(FindFunctionChecked(EDITOR_OnTick),NULL);
	}
	void eventOnRemoved()
	{
		ProcessEvent(FindFunctionChecked(EDITOR_OnRemoved),NULL);
	}
	void eventOnClosed()
	{
		ProcessEvent(FindFunctionChecked(EDITOR_OnClosed),NULL);
	}
	void eventOnInit()
	{
		ProcessEvent(FindFunctionChecked(EDITOR_OnInit),NULL);
	}
	DECLARE_CLASS(UEdGUI_Base,UObject,CLASS_Abstract,Editor)

	UEdGUI_Base() {}
	virtual void Init();
	virtual void Close(UBOOL bRemoved=0);
	virtual void DoClose() {}
	virtual void SetCaption(const TCHAR* NewCaption);
};

class EDITOR_API UEdGUI_Component : public UEdGUI_Base
{
public:
	INT X GCC_PACK(INT_ALIGNMENT);
	INT Y;
	INT XSize;
	INT YSize;
	BITFIELD bDisabled:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_FUNCTION(execSetDisabled);
	DECLARE_CLASS(UEdGUI_Component,UEdGUI_Base,CLASS_Abstract,Editor)

	UEdGUI_Component() {}
	void DoClose();
	virtual void SetDisabled( UBOOL bDisable );
};

class EDITOR_API UEdGUI_Button : public UEdGUI_Component
{
public:
	FStringNoInit Caption GCC_PACK(INT_ALIGNMENT);
	DECLARE_CLASS(UEdGUI_Button,UEdGUI_Component,0,Editor)

	UEdGUI_Button() {}
	void Init();
	void Close(UBOOL bRemoved = 0);
	void SetCaption(const TCHAR* NewCaption);
};

class EDITOR_API UEdGUI_CheckBox : public UEdGUI_Component
{
public:
	FStringNoInit Caption GCC_PACK(INT_ALIGNMENT);
	BITFIELD bChecked:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bLeftStyle:1;
	DECLARE_FUNCTION(execSetChecked);
	DECLARE_CLASS(UEdGUI_CheckBox,UEdGUI_Component,0,Editor)

	UEdGUI_CheckBox() {}
	void Init();
	void Close(UBOOL bRemoved = 0);
	void SetCaption(const TCHAR* NewCaption);
};

class EDITOR_API UEdGUI_ComboBox : public UEdGUI_Component
{
public:
	INT SelectedLine GCC_PACK(INT_ALIGNMENT);
	TArrayNoInit<FString> Lines;
	FStringNoInit SelectedText;
	BITFIELD bSortList:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_FUNCTION(execEmptyCombo);
	DECLARE_FUNCTION(execSelectLine);
	DECLARE_FUNCTION(execRemoveLine);
	DECLARE_FUNCTION(execAddLine);
	DECLARE_CLASS(UEdGUI_ComboBox,UEdGUI_Component,0,Editor)

	UEdGUI_ComboBox() {}
	void Init();
	void Close(UBOOL bRemoved = 0);
	void SetCaption(const TCHAR* NewCaption);
};

class EDITOR_API UEdGUI_EditBox : public UEdGUI_Component
{
public:
	FStringNoInit Text GCC_PACK(INT_ALIGNMENT);
	BITFIELD bMultiLine:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_CLASS(UEdGUI_EditBox,UEdGUI_Component,0,Editor)

	UEdGUI_EditBox() {}
	void Init();
	void Close(UBOOL bRemoved = 0);
	void SetCaption(const TCHAR* NewCaption);
	void SetDisabled(UBOOL bDisable);
};

class EDITOR_API UEdGUI_Label : public UEdGUI_Component
{
public:
	FColor TextColor GCC_PACK(INT_ALIGNMENT);
	FStringNoInit Caption;
	BYTE AlignX;
	BYTE AlignY;
	BITFIELD bMultiLine:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_CLASS(UEdGUI_Label,UEdGUI_Component,0,Editor)

	UEdGUI_Label() {}
	void Init();
	void Close(UBOOL bRemoved = 0);
};

class EDITOR_API UEdGUI_WindowFrame : public UEdGUI_Base
{
public:
	INT MinX GCC_PACK(INT_ALIGNMENT);
	INT MinY;
	INT X;
	INT Y;
	INT XSize;
	INT YSize;
	FLOAT TimerCounter;
	FLOAT TimerRate;
	class UEdGUI_WindowFrame* DialogMaster;
	class UEdGUI_Base* ComponentList;
	FStringNoInit Caption;
	void* Canvas;
	BITFIELD bCanResize:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bIsDialogue:1;
	BITFIELD bNeedsPaint:1;
	BITFIELD bShouldRepaint:1;
	BITFIELD bTimerLoop:1;
	DECLARE_FUNCTION(execDrawText);
	DECLARE_FUNCTION(execDrawRect);
	DECLARE_FUNCTION(execFindWindow);
	DECLARE_FUNCTION(execCreateWindow);
	void eventTimer()
	{
		ProcessEvent(FindFunctionChecked(NAME_Timer),NULL);
	}
	void eventOnPaint()
	{
		ProcessEvent(FindFunctionChecked(EDITOR_OnPaint),NULL);
	}
	void eventOnCallback(class UEdGUI_Base* Component, BYTE Type)
	{
		struct { class UEdGUI_Base* Component; BYTE Type; } Parms = { Component, Type };
		ProcessEvent(FindFunctionChecked(EDITOR_OnCallback),&Parms);
	}
	DECLARE_CLASS(UEdGUI_WindowFrame,UEdGUI_Base,(CLASS_Config | CLASS_Abstract),Editor)

	static TArray<UEdGUI_WindowFrame*> ActiveWindows;
	UEdGUI_WindowFrame() {}
	void Destroy();
	void Init();
	void Close(UBOOL bRemoved = 0);
	virtual void OnCallback(class UEdGUI_Base* Component, ESignalType Type);
	void DoClose();
	void SetCaption(const TCHAR* NewCaption);
};

#endif

AUTOGENERATE_FUNCTION(UBrushBuilder,-1,execPolyEnd);
AUTOGENERATE_FUNCTION(UBrushBuilder,-1,execPolyi);
AUTOGENERATE_FUNCTION(UBrushBuilder,-1,execPolyBegin);
AUTOGENERATE_FUNCTION(UBrushBuilder,-1,execPoly4i);
AUTOGENERATE_FUNCTION(UBrushBuilder,-1,execPoly3i);
AUTOGENERATE_FUNCTION(UBrushBuilder,-1,execVertex3f);
AUTOGENERATE_FUNCTION(UBrushBuilder,-1,execVertexv);
AUTOGENERATE_FUNCTION(UBrushBuilder,-1,execBadParameters);
AUTOGENERATE_FUNCTION(UBrushBuilder,-1,execGetPolyCount);
AUTOGENERATE_FUNCTION(UBrushBuilder,-1,execGetVertex);
AUTOGENERATE_FUNCTION(UBrushBuilder,-1,execGetVertexCount);
AUTOGENERATE_FUNCTION(UBrushBuilder,-1,execEndBrush);
AUTOGENERATE_FUNCTION(UBrushBuilder,-1,execBeginBrush);
AUTOGENERATE_FUNCTION(UEdGUI_Base,-1,execSetCaption);
AUTOGENERATE_FUNCTION(UEdGUI_Base,-1,execGetMouse);
AUTOGENERATE_FUNCTION(UEdGUI_Base,-1,execClose);
AUTOGENERATE_FUNCTION(UEdGUI_Base,-1,execAddComponent);
AUTOGENERATE_FUNCTION(UEdGUI_CheckBox,-1,execSetChecked);
AUTOGENERATE_FUNCTION(UEdGUI_ComboBox,-1,execEmptyCombo);
AUTOGENERATE_FUNCTION(UEdGUI_ComboBox,-1,execSelectLine);
AUTOGENERATE_FUNCTION(UEdGUI_ComboBox,-1,execRemoveLine);
AUTOGENERATE_FUNCTION(UEdGUI_ComboBox,-1,execAddLine);
AUTOGENERATE_FUNCTION(UEdGUI_Component,-1,execSetDisabled);
AUTOGENERATE_FUNCTION(UEdGUI_WindowFrame,-1,execDrawText);
AUTOGENERATE_FUNCTION(UEdGUI_WindowFrame,-1,execDrawRect);
AUTOGENERATE_FUNCTION(UEdGUI_WindowFrame,-1,execFindWindow);
AUTOGENERATE_FUNCTION(UEdGUI_WindowFrame,-1,execCreateWindow);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif // NAMES_ONLY

#if ((_MSC_VER) || (HAVE_PRAGMA_PACK))
#pragma pack (pop)
#endif

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,BrushBuilder,BitmapImage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,BrushBuilder,Group)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,BrushBuilder,Vertices)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,BrushBuilder,Polys)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,BrushBuilder,BitmapFilename)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,BrushBuilder,ToolTip)
VERIFY_CLASS_SIZE_NODIE(UBrushBuilder)
VERIFY_CLASS_SIZE_NODIE(UEdCommandHook)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_Base,Parent)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_Base,NextComponent)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_Base,WndPtr)
VERIFY_CLASS_SIZE_NODIE(UEdGUI_Base)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_Button,Caption)
VERIFY_CLASS_SIZE_NODIE(UEdGUI_Button)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_CheckBox,Caption)
VERIFY_CLASS_SIZE_NODIE(UEdGUI_CheckBox)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_ComboBox,SelectedLine)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_ComboBox,Lines)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_ComboBox,SelectedText)
VERIFY_CLASS_SIZE_NODIE(UEdGUI_ComboBox)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_Component,X)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_Component,Y)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_Component,XSize)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_Component,YSize)
VERIFY_CLASS_SIZE_NODIE(UEdGUI_Component)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_EditBox,Text)
VERIFY_CLASS_SIZE_NODIE(UEdGUI_EditBox)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_Label,TextColor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_Label,Caption)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_Label,AlignX)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_Label,AlignY)
VERIFY_CLASS_SIZE_NODIE(UEdGUI_Label)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_WindowFrame,MinX)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_WindowFrame,MinY)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_WindowFrame,X)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_WindowFrame,Y)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_WindowFrame,XSize)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_WindowFrame,YSize)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_WindowFrame,TimerCounter)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_WindowFrame,TimerRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_WindowFrame,DialogMaster)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_WindowFrame,ComponentList)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_WindowFrame,Caption)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EdGUI_WindowFrame,Canvas)
VERIFY_CLASS_SIZE_NODIE(UEdGUI_WindowFrame)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,AutosaveCounter)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,AutoSaveIndex)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,AutoSaveCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,Mode)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,ClickFlags)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,NumberOfCPUs)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,MovementSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,SnapDistance)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,FovAngleDegrees)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,Level)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,TempModel)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,bspProcessModel)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,CurrentTexture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,CurrentFont)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,MenuUp)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,MenuDn)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,CollOn)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,CollOff)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,PlyrOn)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,PlyrOff)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,LiteOn)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,LiteOff)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,BackPrev)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,TerrainMarker)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,Bad)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,Bkgnd)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,BkgndHi)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,ParentContext)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,CurrentClass)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,BrowseClass)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,Tools)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,EditPackages)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,CompilerError)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,KeyBindings)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,EditModeList)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,ClickLocation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,ClickPlane)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,GridSize)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,RotGridSize)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_WorldBox)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_GroundPlane)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_GroundHighlight)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_BrushWire)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_Pivot)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_Select)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_Current)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_AddWire)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_SubtractWire)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_GreyWire)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_BrushVertex)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_BrushSnap)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_Invalid)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_ActorWire)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_ActorHiWire)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_Black)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_White)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_Mask)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_SemiSolidWire)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_NonSolidWire)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_WireBackground)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_WireGridAxis)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_ActorArrow)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_ScaleBox)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_ScaleBoxHi)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_ZoneWire)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_Mover)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,C_OrthoBackground)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,TerrainSettings)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,GameCommandLine)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,CodePath)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,Trans)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,Results)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,ActorProperties)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,LevelProperties)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,Preferences)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,UseDest)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,BuildStageTitle)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,EditorEngine,AutosaveTimeMinutes)
VERIFY_CLASS_SIZE_NODIE(UEditorEngine)
#endif // VERIFY_CLASS_SIZES
