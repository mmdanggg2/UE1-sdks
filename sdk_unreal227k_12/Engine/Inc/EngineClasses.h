/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if ((_MSC_VER) || (HAVE_PRAGMA_PACK))
#pragma pack (push,OBJECT_ALIGNMENT)
#endif

#ifndef ENGINE_API
#define ENGINE_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern ENGINE_API FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(Accept)
AUTOGENERATE_NAME(AcceptInventory)
AUTOGENERATE_NAME(ActorBecameStuck)
AUTOGENERATE_NAME(AllowDraw)
AUTOGENERATE_NAME(AllowPortal)
AUTOGENERATE_NAME(AnimBoneNotify)
AUTOGENERATE_NAME(AnimEndOnBone)
AUTOGENERATE_NAME(BecomeViewTarget)
AUTOGENERATE_NAME(BeginEvent)
AUTOGENERATE_NAME(BeginPlay)
AUTOGENERATE_NAME(BroadcastMessage)
AUTOGENERATE_NAME(ClientConnect)
AUTOGENERATE_NAME(ClientDisconnect)
AUTOGENERATE_NAME(ClientHearSound)
AUTOGENERATE_NAME(ClientMessage)
AUTOGENERATE_NAME(ClientSimMove)
AUTOGENERATE_NAME(ClientTravel)
AUTOGENERATE_NAME(ConnectionFailed)
AUTOGENERATE_NAME(ConsoleMessage)
AUTOGENERATE_NAME(DemoPlaySound)
AUTOGENERATE_NAME(DetailChange)
AUTOGENERATE_NAME(DownloadFailed)
AUTOGENERATE_NAME(DownloadProgress)
AUTOGENERATE_NAME(DrawEditorSelection)
AUTOGENERATE_NAME(EdBrushDeployed)
AUTOGENERATE_NAME(EdNoteAddedActor)
AUTOGENERATE_NAME(EdPathBuildExec)
AUTOGENERATE_NAME(EndEvent)
AUTOGENERATE_NAME(FellOutOfWorld)
AUTOGENERATE_NAME(FilterZone)
AUTOGENERATE_NAME(ForceGenerate)
AUTOGENERATE_NAME(GameEnding)
AUTOGENERATE_NAME(Generate)
AUTOGENERATE_NAME(GetActors)
AUTOGENERATE_NAME(GetBeaconText)
AUTOGENERATE_NAME(GetBSPTexture)
AUTOGENERATE_NAME(GetClientScene)
AUTOGENERATE_NAME(GetMeshTexture)
AUTOGENERATE_NAME(GetSaveDetails)
AUTOGENERATE_NAME(Init)
AUTOGENERATE_NAME(InitGame)
AUTOGENERATE_NAME(Initialized)
AUTOGENERATE_NAME(KilledBy)
AUTOGENERATE_NAME(LinkInterpolation)
AUTOGENERATE_NAME(LinkToSkybox)
AUTOGENERATE_NAME(Login)
AUTOGENERATE_NAME(LongFall)
AUTOGENERATE_NAME(LoopMuzzleFlash)
AUTOGENERATE_NAME(ModifyActorTravelList)
AUTOGENERATE_NAME(ModifyDrawBSPSurf)
AUTOGENERATE_NAME(ModifyTravelList)
AUTOGENERATE_NAME(Notify)
AUTOGENERATE_NAME(NotifyIKSolver)
AUTOGENERATE_NAME(NotifyPathDefine)
AUTOGENERATE_NAME(NotifyURLFailed)
AUTOGENERATE_NAME(OnDrawActor)
AUTOGENERATE_NAME(OnGetTravelInventory)
AUTOGENERATE_NAME(OnInit)
AUTOGENERATE_NAME(OnMirrorMode)
AUTOGENERATE_NAME(OnPlayVoiceSound)
AUTOGENERATE_NAME(OnPostTravel)
AUTOGENERATE_NAME(OnPrepareTravel)
AUTOGENERATE_NAME(OnRepNotify)
AUTOGENERATE_NAME(OnSubLevelChange)
AUTOGENERATE_NAME(PhysicsJointBreak)
AUTOGENERATE_NAME(PlayerCalcView)
AUTOGENERATE_NAME(PlayerInput)
AUTOGENERATE_NAME(PlayerTimeout)
AUTOGENERATE_NAME(PlayMuzzleFlash)
AUTOGENERATE_NAME(Possess)
AUTOGENERATE_NAME(PostBeginPlay)
AUTOGENERATE_NAME(PostDrawActor)
AUTOGENERATE_NAME(PostLoadGame)
AUTOGENERATE_NAME(PostLogin)
AUTOGENERATE_NAME(PostNetBeginPlay)
AUTOGENERATE_NAME(PostNetReceive)
AUTOGENERATE_NAME(PostPhysicsStep)
AUTOGENERATE_NAME(PostRender)
AUTOGENERATE_NAME(PostRender2D)
AUTOGENERATE_NAME(PostTeleport)
AUTOGENERATE_NAME(PostTouch)
AUTOGENERATE_NAME(PreBeginPlay)
AUTOGENERATE_NAME(PreClientTravel)
AUTOGENERATE_NAME(PreDrawActor)
AUTOGENERATE_NAME(PreLogin)
AUTOGENERATE_NAME(PreloginError)
AUTOGENERATE_NAME(PrePhysicsStep)
AUTOGENERATE_NAME(PreRender)
AUTOGENERATE_NAME(PreTeleport)
AUTOGENERATE_NAME(RenderCorona)
AUTOGENERATE_NAME(RenderOverlays)
AUTOGENERATE_NAME(RenderTexture)
AUTOGENERATE_NAME(ReplicationEnded)
AUTOGENERATE_NAME(ServerMessage)
AUTOGENERATE_NAME(ServerTravel)
AUTOGENERATE_NAME(SetInitialState)
AUTOGENERATE_NAME(SetWeaponOwner)
AUTOGENERATE_NAME(ShadowModeChange)
AUTOGENERATE_NAME(ShouldBlock)
AUTOGENERATE_NAME(ShowUpgradeMenu)
AUTOGENERATE_NAME(SkeletalRootMotion)
AUTOGENERATE_NAME(SpawnClientCamera)
AUTOGENERATE_NAME(SpawnNotification)
AUTOGENERATE_NAME(SpawnTravelActor)
AUTOGENERATE_NAME(SpecialCost)
AUTOGENERATE_NAME(StartDownload)
AUTOGENERATE_NAME(TakeDamage)
AUTOGENERATE_NAME(TeamMessage)
AUTOGENERATE_NAME(TravelPostAccept)
AUTOGENERATE_NAME(TravelPreAccept)
AUTOGENERATE_NAME(UAllowDownload)
AUTOGENERATE_NAME(ULogPlayer)
AUTOGENERATE_NAME(UnPossess)
AUTOGENERATE_NAME(Update)
AUTOGENERATE_NAME(UpdateDistanceFog)
AUTOGENERATE_NAME(UPlayerListResponse)
AUTOGENERATE_NAME(WalkTextureChange)

#ifndef NAMES_ONLY

enum EDodgeDir : BYTE
{
	DODGE_None,
	DODGE_Left,
	DODGE_Right,
	DODGE_Forward,
	DODGE_Back,
	DODGE_Active,
	DODGE_Done,
	DODGE_MAX,
};
enum EDrawType : BYTE
{
	DT_None,
	DT_Sprite,
	DT_Mesh,
	DT_Brush,
	DT_RopeSprite,
	DT_VerticalSprite,
	DT_Terraform,
	DT_SpriteAnimOnce,
	DT_MAX,
};
enum EHitBoxType : BYTE
{
	HITBOX_Default,
	HITBOX_Head,
	HITBOX_Chest,
	HITBOX_Stomach,
	HITBOX_LeftArm,
	HITBOX_RightArm,
	HITBOX_LeftLeg,
	HITBOX_RightLeg,
	HITBOX_MAX,
};
enum EInputAction : BYTE
{
	IST_None,
	IST_Press,
	IST_Hold,
	IST_Release,
	IST_Axis,
	IST_MAX,
};
enum EInputKey : BYTE
{
	IK_None,
	IK_LeftMouse,
	IK_RightMouse,
	IK_Cancel,
	IK_MiddleMouse,
	IK_Unknown05,
	IK_Unknown06,
	IK_Unknown07,
	IK_Backspace,
	IK_Tab,
	IK_Unknown0A,
	IK_Unknown0B,
	IK_Unknown0C,
	IK_Enter,
	IK_Unknown0E,
	IK_Unknown0F,
	IK_Shift,
	IK_Ctrl,
	IK_Alt,
	IK_Pause,
	IK_CapsLock,
	IK_MouseButton4,
	IK_MouseButton5,
	IK_MouseButton6,
	IK_MouseButton7,
	IK_MouseButton8,
	IK_Unknown1A,
	IK_Escape,
	IK_Unknown1C,
	IK_Unknown1D,
	IK_Unknown1E,
	IK_Unknown1F,
	IK_Space,
	IK_PageUp,
	IK_PageDown,
	IK_End,
	IK_Home,
	IK_Left,
	IK_Up,
	IK_Right,
	IK_Down,
	IK_Select,
	IK_Print,
	IK_Execute,
	IK_PrintScrn,
	IK_Insert,
	IK_Delete,
	IK_Help,
	IK_0,
	IK_1,
	IK_2,
	IK_3,
	IK_4,
	IK_5,
	IK_6,
	IK_7,
	IK_8,
	IK_9,
	IK_Unknown3A,
	IK_Unknown3B,
	IK_Unknown3C,
	IK_Unknown3D,
	IK_Unknown3E,
	IK_Unknown3F,
	IK_Unknown40,
	IK_A,
	IK_B,
	IK_C,
	IK_D,
	IK_E,
	IK_F,
	IK_G,
	IK_H,
	IK_I,
	IK_J,
	IK_K,
	IK_L,
	IK_M,
	IK_N,
	IK_O,
	IK_P,
	IK_Q,
	IK_R,
	IK_S,
	IK_T,
	IK_U,
	IK_V,
	IK_W,
	IK_X,
	IK_Y,
	IK_Z,
	IK_Unknown5B,
	IK_Unknown5C,
	IK_Unknown5D,
	IK_Unknown5E,
	IK_Unknown5F,
	IK_NumPad0,
	IK_NumPad1,
	IK_NumPad2,
	IK_NumPad3,
	IK_NumPad4,
	IK_NumPad5,
	IK_NumPad6,
	IK_NumPad7,
	IK_NumPad8,
	IK_NumPad9,
	IK_GreyStar,
	IK_GreyPlus,
	IK_Separator,
	IK_GreyMinus,
	IK_NumPadPeriod,
	IK_GreySlash,
	IK_F1,
	IK_F2,
	IK_F3,
	IK_F4,
	IK_F5,
	IK_F6,
	IK_F7,
	IK_F8,
	IK_F9,
	IK_F10,
	IK_F11,
	IK_F12,
	IK_F13,
	IK_F14,
	IK_F15,
	IK_F16,
	IK_F17,
	IK_F18,
	IK_F19,
	IK_F20,
	IK_F21,
	IK_F22,
	IK_F23,
	IK_F24,
	IK_Unknown88,
	IK_Unknown89,
	IK_Unknown8A,
	IK_Unknown8B,
	IK_Unknown8C,
	IK_Unknown8D,
	IK_Unknown8E,
	IK_Unknown8F,
	IK_NumLock,
	IK_ScrollLock,
	IK_Unknown92,
	IK_Unknown93,
	IK_Unknown94,
	IK_Unknown95,
	IK_Unknown96,
	IK_Unknown97,
	IK_Unknown98,
	IK_Unknown99,
	IK_Unknown9A,
	IK_Unknown9B,
	IK_Unknown9C,
	IK_Unknown9D,
	IK_Unknown9E,
	IK_Unknown9F,
	IK_LShift,
	IK_RShift,
	IK_LControl,
	IK_RControl,
	IK_UnknownA4,
	IK_UnknownA5,
	IK_UnknownA6,
	IK_UnknownA7,
	IK_UnknownA8,
	IK_UnknownA9,
	IK_UnknownAA,
	IK_UnknownAB,
	IK_UnknownAC,
	IK_UnknownAD,
	IK_UnknownAE,
	IK_UnknownAF,
	IK_UnknownB0,
	IK_UnknownB1,
	IK_UnknownB2,
	IK_UnknownB3,
	IK_UnknownB4,
	IK_UnknownB5,
	IK_UnknownB6,
	IK_UnknownB7,
	IK_UnknownB8,
	IK_UnknownB9,
	IK_Semicolon,
	IK_Equals,
	IK_Comma,
	IK_Minus,
	IK_Period,
	IK_Slash,
	IK_Tilde,
	IK_UnknownC1,
	IK_UnknownC2,
	IK_UnknownC3,
	IK_UnknownC4,
	IK_UnknownC5,
	IK_UnknownC6,
	IK_UnknownC7,
	IK_Joy1,
	IK_Joy2,
	IK_Joy3,
	IK_Joy4,
	IK_Joy5,
	IK_Joy6,
	IK_Joy7,
	IK_Joy8,
	IK_Joy9,
	IK_Joy10,
	IK_Joy11,
	IK_Joy12,
	IK_Joy13,
	IK_Joy14,
	IK_Joy15,
	IK_Joy16,
	IK_UnknownD8,
	IK_UnknownD9,
	IK_UnknownDA,
	IK_LeftBracket,
	IK_Backslash,
	IK_RightBracket,
	IK_SingleQuote,
	IK_UnknownDF,
	IK_JoyX,
	IK_JoyY,
	IK_JoyZ,
	IK_JoyR,
	IK_MouseX,
	IK_MouseY,
	IK_MouseZ,
	IK_MouseW,
	IK_JoyU,
	IK_JoyV,
	IK_UnknownEA,
	IK_UnknownEB,
	IK_MouseWheelUp,
	IK_MouseWheelDown,
	IK_Unknown10E,
	UK_Unknown10F,
	IK_JoyPovUp,
	IK_JoyPovDown,
	IK_JoyPovLeft,
	IK_JoyPovRight,
	IK_UnknownF4,
	IK_UnknownF5,
	IK_Attn,
	IK_CrSel,
	IK_ExSel,
	IK_ErEof,
	IK_Play,
	IK_Zoom,
	IK_NoName,
	IK_PA1,
	IK_OEMClear,
	IK_MAX,
};
enum ELightEffect : BYTE
{
	LE_None,
	LE_TorchWaver,
	LE_FireWaver,
	LE_WateryShimmer,
	LE_Searchlight,
	LE_SlowWave,
	LE_FastWave,
	LE_CloudCast,
	LE_StaticSpot,
	LE_Shock,
	LE_Disco,
	LE_Warp,
	LE_Spotlight,
	LE_NonIncidence,
	LE_Shell,
	LE_OmniBumpMap,
	LE_Interference,
	LE_Cylinder,
	LE_Rotor,
	LE_Sunlight,
	LE_MAX,
};
enum ELightType : BYTE
{
	LT_None,
	LT_Steady,
	LT_Pulse,
	LT_Blink,
	LT_Flicker,
	LT_Strobe,
	LT_BackdropLight,
	LT_SubtlePulse,
	LT_TexturePaletteOnce,
	LT_TexturePaletteLoop,
	LT_RandomPulse,
	LT_RandomSubtlePulse,
	LT_MAX,
};
enum EMusicTransition : BYTE
{
	MTRAN_None,
	MTRAN_Instant,
	MTRAN_Segue,
	MTRAN_Fade,
	MTRAN_FastFade,
	MTRAN_SlowFade,
	MTRAN_MAX,
};
enum ENetRole : BYTE
{
	ROLE_None,
	ROLE_DumbProxy,
	ROLE_SimulatedProxy,
	ROLE_AutonomousProxy,
	ROLE_Authority,
	ROLE_MAX,
};
enum EPhysics : BYTE
{
	PHYS_None,
	PHYS_Walking,
	PHYS_Falling,
	PHYS_Swimming,
	PHYS_Flying,
	PHYS_Rotating,
	PHYS_Projectile,
	PHYS_Rolling,
	PHYS_Interpolating,
	PHYS_MovingBrush,
	PHYS_Spider,
	PHYS_Trailer,
	PHYS_RigidBody,
	PHYS_MAX,
};
enum ERenderPass : BYTE
{
	RP_Auto,
	RP_Solid,
	RP_SemiSolid,
	RP_Translucent,
	RP_MAX,
};
enum ERenderStyle : BYTE
{
	STY_None,
	STY_Normal,
	STY_Masked,
	STY_Translucent,
	STY_Modulated,
	STY_AlphaBlend,
	STY_MAX,
};
enum ESoundSlot : BYTE
{
	SLOT_None,
	SLOT_Misc,
	SLOT_Pain,
	SLOT_Interact,
	SLOT_Ambient,
	SLOT_Talk,
	SLOT_Interface,
	SLOT_MAX,
};
enum ETravelType : BYTE
{
	TRAVEL_Absolute,
	TRAVEL_Partial,
	TRAVEL_Relative,
	TRAVEL_MAX,
};
enum ETextureFormat : BYTE
{
	TEXF_P8,
	TEXF_BGRA8_LM,
	TEXF_R5G6B5,
	TEXF_BC1,
	TEXF_RGB8,
	TEXF_BGRA8,
	TEXF_BC2,
	TEXF_BC3,
	TEXF_BC4,
	TEXF_BC4_S,
	TEXF_BC5,
	TEXF_BC5_S,
	TEXF_BC7,
	TEXF_BC6H_S,
	TEXF_BC6H,
	TEXF_RGBA16,
	TEXF_RGBA16_S,
	TEXF_RGBA32,
	TEXF_RGBA32_S,
	TEXF_MONO,
	TEXF_UNCOMPRESSED,
	TEXF_UNCOMPRESSED_LOW,
	TEXF_UNCOMPRESSED_HIGH,
	TEXF_COMPRESSED,
	TEXF_COMPRESSED_LOW,
	TEXF_COMPRESSED_HIGH,
	TEXF_BC1_PA,
	TEXF_R8,
	TEXF_R8_S,
	TEXF_R16,
	TEXF_R16_S,
	TEXF_R32,
	TEXF_R32_S,
	TEXF_RG8,
	TEXF_RG8_S,
	TEXF_RG16,
	TEXF_RG16_S,
	TEXF_RG32,
	TEXF_RG32_S,
	TEXF_RGB8_S,
	TEXF_RGB16_,
	TEXF_RGB16_S,
	TEXF_RGB32,
	TEXF_RGB32_S,
	TEXF_RGBA8_,
	TEXF_RGBA8_S,
	TEXF_R16_F,
	TEXF_R32_F,
	TEXF_RG16_F,
	TEXF_RG32_F,
	TEXF_RGB16_F,
	TEXF_RGB32_F,
	TEXF_RGBA16_F,
	TEXF_RGBA32_F,
	TEXF_ETC1,
	TEXF_ETC2,
	TEXF_ETC2_PA,
	TEXF_ETC2_RGB_EAC_A,
	TEXF_EAC_R,
	TEXF_EAC_R_S,
	TEXF_EAC_RG,
	TEXF_EAC_RG_S,
	TEXF_ASTC_4x4,
	TEXF_ASTC_5x4,
	TEXF_ASTC_5x5,
	TEXF_ASTC_6x5,
	TEXF_ASTC_6x6,
	TEXF_ASTC_8x5,
	TEXF_ASTC_8x6,
	TEXF_ASTC_8x8,
	TEXF_ASTC_10x5,
	TEXF_ASTC_10x6,
	TEXF_ASTC_10x8,
	TEXF_ASTC_10x10,
	TEXF_ASTC_12x10,
	TEXF_ASTC_12x12,
	TEXF_ASTC_3x3x3,
	TEXF_ASTC_4x3x3,
	TEXF_ASTC_4x4x3,
	TEXF_ASTC_4x4x4,
	TEXF_ASTC_5x4x4,
	TEXF_ASTC_5x5x4,
	TEXF_ASTC_5x5x5,
	TEXF_ASTC_6x5x5,
	TEXF_ASTC_6x6x5,
	TEXF_ASTC_6x6x6,
	TEXF_PVRTC1_2BPP,
	TEXF_PVRTC1_4BPP,
	TEXF_PVRTC2_2BPP,
	TEXF_PVRTC2_4BPP,
	TEXF_R8_UI,
	TEXF_R8_I,
	TEXF_R16_UI,
	TEXF_R16_I,
	TEXF_R32_UI,
	TEXF_R32_I,
	TEXF_RG8_UI,
	TEXF_RG8_I,
	TEXF_RG16_UI,
	TEXF_RG16_I,
	TEXF_RG32_UI,
	TEXF_RG32_I,
	TEXF_RGB8_UI,
	TEXF_RGB8_I,
	TEXF_RGB16_UI,
	TEXF_RGB16_I,
	TEXF_RGB32_UI,
	TEXF_RGB32_I,
	TEXF_RGBA8_UI,
	TEXF_RGBA8_I,
	TEXF_RGBA16_UI,
	TEXF_RGBA16_I,
	TEXF_RGBA32_UI,
	TEXF_RGBA32_I,
	TEXF_ARGB8,
	TEXF_ABGR8,
	TEXF_RGB10A2,
	TEXF_RGB10A2_UI,
	TEXF_RGB10A2_LM,
	TEXF_RGB9E5,
	TEXF_P8_RGB9E5,
	TEXF_R1,
	TEXF_NODATA,
	TEXF_MAX,
};
enum ECsgOper : BYTE
{
	CSG_Active,
	CSG_Add,
	CSG_Subtract,
	CSG_Intersect,
	CSG_Deintersect,
	CSG_MAX,
};
enum ERenderZTest : BYTE
{
	ZTEST_Less,
	ZTEST_Equal,
	ZTEST_LessEqual,
	ZTEST_Greater,
	ZTEST_GreaterEqual,
	ZTEST_NotEqual,
	ZTEST_Always,
	ZTEST_MAX,
};
enum ECoronaAttenuateType : BYTE
{
	CATT_WorldOnly,
	CATT_WorldNMovers,
	CATT_Actors,
	CATT_MAX,
};
enum EDynZoneInfoType : BYTE
{
	DZONE_Cube,
	DZONE_Sphere,
	DZONE_Cylinder,
	DZONE_Shape,
	DZONE_MAX,
};
enum EJawRotateAxis : BYTE
{
	JAWAXIS_Pitch,
	JAWAXIS_Yaw,
	JAWAXIS_Roll,
	JAWAXIS_MAX,
};
enum ERotationAxis : BYTE
{
	ROT_PitchYawRoll,
	ROT_YawPitchRoll,
	ROT_PitchRollYaw,
	ROT_RollPitchYaw,
	ROT_RollYawPitch,
	ROT_MAX,
};
enum ELevelAction : BYTE
{
	LEVACT_None,
	LEVACT_Loading,
	LEVACT_Saving,
	LEVACT_Connecting,
	LEVACT_Precaching,
	LEVACT_SaveScreenshot,
	LEVACT_MAX,
};
enum ENetMode : BYTE
{
	NM_Standalone,
	NM_DedicatedServer,
	NM_ListenServer,
	NM_Client,
	NM_MAX,
};
enum EBumpType : BYTE
{
	BT_PlayerBump,
	BT_PawnBump,
	BT_AnyBump,
	BT_MAX,
};
enum EMoverEncroachType : BYTE
{
	ME_StopWhenEncroach,
	ME_ReturnWhenEncroach,
	ME_CrushWhenEncroach,
	ME_IgnoreWhenEncroach,
	ME_MAX,
};
enum EMoverGlideType : BYTE
{
	MV_MoveByTime,
	MV_GlideByTime,
	MV_AccelOverTime,
	MV_DeAccelOverTime,
	MV_MAX,
};
enum PathBuildingType : BYTE
{
	PATHING_Normal,
	PATHING_Proscribe,
	PATHING_Force,
	PATHING_Special,
	PATHING_MAX,
};
enum EAttitude : BYTE
{
	ATTITUDE_Fear,
	ATTITUDE_Hate,
	ATTITUDE_Frenzy,
	ATTITUDE_Threaten,
	ATTITUDE_Ignore,
	ATTITUDE_Friendly,
	ATTITUDE_Follow,
	ATTITUDE_MAX,
};
enum EIntelligence : BYTE
{
	BRAINS_NONE,
	BRAINS_REPTILE,
	BRAINS_MAMMAL,
	BRAINS_HUMAN,
	BRAINS_MAX,
};
enum EPawnSightCheck : BYTE
{
	SEE_PlayersOnly,
	SEE_All,
	SEE_None,
	SEE_MAX,
};
enum EMoveAnim : BYTE
{
	MOVEANIM_Walk,
	MOVEANIM_Run,
	MOVEANIM_Crouch,
	MOVEANIM_Swim,
	MOVEANIM_Jump,
	MOVEANIM_InAir,
	MOVEANIM_Flying,
	MOVEANIM_Dead,
	MOVEANIM_MAX,
};
enum EMoveDir : BYTE
{
	MOVE_Still,
	MOVE_North,
	MOVE_South,
	MOVE_West,
	MOVE_East,
	MOVE_NorthWest,
	MOVE_SouthWest,
	MOVE_NorthEast,
	MOVE_SouthEast,
	MOVE_MAX,
};
enum EMovementDirCount : BYTE
{
	MDIR_1Way,
	MDIR_2Way,
	MDIR_4Way,
	MDIR_8Way,
	MDIR_MAX,
};
enum EBreakMode : BYTE
{
	BREAKS_All,
	BREAKS_Handbreak,
	BREAKS_None,
	BREAKS_MAX,
};
enum EJointMotionLimit : BYTE
{
	MOTION_Locked,
	MOTION_Limited,
	MOTION_Free,
	MOTION_MAX,
};
enum ETexCompressType : BYTE
{
	COMP_None,
	COMP_P8,
	COMP_Mono,
	COMP_MAX,
};
enum EFileEncoding : BYTE
{
	FILE_ENCODING_ANSI,
	FILE_ENCODING_UTF16LE,
	FILE_ENCODING_UTF16LE_BOM,
	FILE_ENCODING_UTF8,
	FILE_ENCODING_UTF8_BOM,
	FILE_MAX,
};
enum ETexMapAxis : BYTE
{
	TEXMAPAXIS_XY,
	TEXMAPAXIS_XZ,
	TEXMAPAXIS_YZ,
	TEXMAPAXIS_MAX,
};
enum ELODSet : BYTE
{
	LODSET_None,
	LODSET_World,
	LODSET_Skin,
	LODSET_MAX,
};
enum ESurfaceTypes : BYTE
{
	EST_Default,
	EST_Rock,
	EST_Dirt,
	EST_Metal,
	EST_Wood,
	EST_Plant,
	EST_Flesh,
	EST_Ice,
	EST_Snow,
	EST_Water,
	EST_Glass,
	EST_Carpet,
	EST_Custom00,
	EST_Custom01,
	EST_Custom02,
	EST_Custom03,
	EST_Custom04,
	EST_Custom05,
	EST_Custom06,
	EST_Custom07,
	EST_Custom08,
	EST_Custom09,
	EST_Custom10,
	EST_MAX,
};
enum EUClampMode : BYTE
{
	UWrap,
	UClamp,
};
enum EVClampMode : BYTE
{
	VWrap,
	VClamp,
};
enum ETriggerType : BYTE
{
	TT_PlayerProximity,
	TT_PawnProximity,
	TT_ClassProximity,
	TT_AnyProximity,
	TT_Shoot,
	TT_MAX,
};
enum EAmbients : BYTE
{
	REVERB_PRESET_GENERIC,
	REVERB_PRESET_PADDEDCELL,
	REVERB_PRESET_ROOM,
	REVERB_PRESET_BATHROOM,
	REVERB_PRESET_LIVINGROOM,
	REVERB_PRESET_STONEROOM,
	REVERB_PRESET_AUDITORIUM,
	REVERB_PRESET_CONCERTHALL,
	REVERB_PRESET_CAVE,
	REVERB_PRESET_ARENA,
	REVERB_PRESET_HANGAR,
	REVERB_PRESET_CARPETTEDHALLWAY,
	REVERB_PRESET_HALLWAY,
	REVERB_PRESET_STONECORRIDOR,
	REVERB_PRESET_ALLEY,
	REVERB_PRESET_FOREST,
	REVERB_PRESET_CITY,
	REVERB_PRESET_MOUNTAINS,
	REVERB_PRESET_QUARRY,
	REVERB_PRESET_PLAIN,
	REVERB_PRESET_PARKINGLOT,
	REVERB_PRESET_SEWERPIPE,
	REVERB_PRESET_UNDERWATER,
	REVERB_PRESET_DRUGGED,
	REVERB_PRESET_DIZZY,
	REVERB_PRESET_PSYCHOTIC,
	REVERB_PRESET_CASTLE_SMALLROOM,
	REVERB_PRESET_CASTLE_SHORTPASSAGE,
	REVERB_PRESET_CASTLE_MEDIUMROOM,
	REVERB_PRESET_CASTLE_LONGPASSAGE,
	REVERB_PRESET_CASTLE_LARGEROOM,
	REVERB_PRESET_CASTLE_HALL,
	REVERB_PRESET_CASTLE_CUPBOARD,
	REVERB_PRESET_CASTLE_COURTYARD,
	REVERB_PRESET_CASTLE_ALCOVE,
	REVERB_PRESET_FACTORY_ALCOVE,
	REVERB_PRESET_FACTORY_SHORTPASSAGE,
	REVERB_PRESET_FACTORY_MEDIUMROOM,
	REVERB_PRESET_FACTORY_LONGPASSAGE,
	REVERB_PRESET_FACTORY_LARGEROOM,
	REVERB_PRESET_FACTORY_HALL,
	REVERB_PRESET_FACTORY_CUPBOARD,
	REVERB_PRESET_FACTORY_COURTYARD,
	REVERB_PRESET_FACTORY_SMALLROOM,
	REVERB_PRESET_ICEPALACE_ALCOVE,
	REVERB_PRESET_ICEPALACE_SHORTPASSAGE,
	REVERB_PRESET_ICEPALACE_MEDIUMROOM,
	REVERB_PRESET_ICEPALACE_LONGPASSAGE,
	REVERB_PRESET_ICEPALACE_LARGEROOM,
	REVERB_PRESET_ICEPALACE_HALL,
	REVERB_PRESET_ICEPALACE_CUPBOARD,
	REVERB_PRESET_ICEPALACE_COURTYARD,
	REVERB_PRESET_ICEPALACE_SMALLROOM,
	REVERB_PRESET_SPACESTATION_ALCOVE,
	REVERB_PRESET_SPACESTATION_MEDIUMROOM,
	REVERB_PRESET_SPACESTATION_SHORTPASSAGE,
	REVERB_PRESET_SPACESTATION_LONGPASSAGE,
	REVERB_PRESET_SPACESTATION_LARGEROOM,
	REVERB_PRESET_SPACESTATION_HALL,
	REVERB_PRESET_SPACESTATION_CUPBOARD,
	REVERB_PRESET_SPACESTATION_SMALLROOM,
	REVERB_PRESET_WOODEN_ALCOVE,
	REVERB_PRESET_WOODEN_SHORTPASSAGE,
	REVERB_PRESET_WOODEN_MEDIUMROOM,
	REVERB_PRESET_WOODEN_LONGPASSAGE,
	REVERB_PRESET_WOODEN_LARGEROOM,
	REVERB_PRESET_WOODEN_HALL,
	REVERB_PRESET_WOODEN_CUPBOARD,
	REVERB_PRESET_WOODEN_SMALLROOM,
	REVERB_PRESET_WOODEN_COURTYARD,
	REVERB_PRESET_SPORT_EMPTYSTADIUM,
	REVERB_PRESET_SPORT_SQUASHCOURT,
	REVERB_PRESET_SPORT_SMALLSWIMMINGPOOL,
	REVERB_PRESET_SPORT_LARGESWIMMINGPOOL,
	REVERB_PRESET_SPORT_GYMNASIUM,
	REVERB_PRESET_SPORT_FULLSTADIUM,
	REVERB_PRESET_SPORT_STADIUMTANNOY,
	REVERB_PRESET_PREFAB_WORKSHOP,
	REVERB_PRESET_PREFAB_SCHOOLROOM,
	REVERB_PRESET_PREFAB_PRACTISEROOM,
	REVERB_PRESET_PREFAB_OUTHOUSE,
	REVERB_PRESET_PREFAB_CARAVAN,
	REVERB_PRESET_DOME_TOMB,
	REVERB_PRESET_PIPE_SMALL,
	REVERB_PRESET_DOME_SAINTPAULS,
	REVERB_PRESET_PIPE_LONGTHIN,
	REVERB_PRESET_PIPE_LARGE,
	REVERB_PRESET_PIPE_RESONANT,
	REVERB_PRESET_OUTDOORS_BACKYARD,
	REVERB_PRESET_OUTDOORS_ROLLINGPLAINS,
	REVERB_PRESET_OUTDOORS_DEEPCANYON,
	REVERB_PRESET_OUTDOORS_CREEK,
	REVERB_PRESET_OUTDOORS_VALLEY,
	REVERB_PRESET_MOOD_HEAVEN,
	REVERB_PRESET_MOOD_HELL,
	REVERB_PRESET_MOOD_MEMORY,
	REVERB_PRESET_DRIVING_COMMENTATOR,
	REVERB_PRESET_DRIVING_PITGARAGE,
	REVERB_PRESET_DRIVING_INCAR_RACER,
	REVERB_PRESET_DRIVING_INCAR_SPORTS,
	REVERB_PRESET_DRIVING_INCAR_LUXURY,
	REVERB_PRESET_DRIVING_FULLGRANDSTAND,
	REVERB_PRESET_DRIVING_EMPTYGRANDSTAND,
	REVERB_PRESET_DRIVING_TUNNEL,
	REVERB_PRESET_CITY_STREETS,
	REVERB_PRESET_CITY_SUBWAY,
	REVERB_PRESET_CITY_MUSEUM,
	REVERB_PRESET_CITY_LIBRARY,
	REVERB_PRESET_CITY_UNDERPASS,
	REVERB_PRESET_CITY_ABANDONED,
	REVERB_PRESET_DUSTYROOM,
	REVERB_PRESET_CHAPEL,
	REVERB_PRESET_SMALLWATERROOM,
	REVERB_PRESET_UNDERSLIME,
	REVERB_PRESET_NONE,
	REVERB_MAX,
};

struct FMeshSocketInfo
{
	INT iVerts[3] GCC_PACK(INT_ALIGNMENT);
	FName BoneName;
	FName SocketName;
	FVector Offset;
	FRotator RotOffset;
};
struct FMultiTimerType
{
	FName Func GCC_PACK(INT_ALIGNMENT);
	FLOAT Rate;
	FLOAT Counter;
	class UObject* Object;
	FAnyProperty* Data;

	FMultiTimerType( FName F, FLOAT R, FLOAT C, UObject* Obj, FAnyProperty* A )
		: Func(F), Rate(R), Counter(C), Object(Obj), Data(A)
	{
		if( A ) A->AddRef();
	}
	~FMultiTimerType()
	{
		if( Data ) Data->Release();
	}
};
struct FsAnimNotify
{
	FName AnimName GCC_PACK(INT_ALIGNMENT);
	FName FunctionName;
	INT KeyFrame;
	BYTE NotifyEval;
	BITFIELD bCallOncePerLoop:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bAlreadyCalled:1;
};
struct FCanvasPoly
{
	FVector Points[3] GCC_PACK(INT_ALIGNMENT);
	FVector2D UV[3];
	FPlane Colors[3];
	FPlane Fog[3];
};
struct FLensFlare
{
	class UTexture* Texture GCC_PACK(INT_ALIGNMENT);
	FLOAT Opacity;
	FLOAT Scale;
	FLOAT Offset;
	FLOAT RollRate;
};
struct FCreditsInfo
{
	FStringNoInit Credits GCC_PACK(INT_ALIGNMENT);
	FStringNoInit Website;
	class UTexture* Logo;
};
struct FEdViewportInfo
{
	FVector CameraLocation GCC_PACK(INT_ALIGNMENT);
	FRotator CameraRotation;
	FLOAT OrthoZoom;
};
struct FSkeletalBodyPart
{
	class UPXJ_BaseJoint* Joint GCC_PACK(INT_ALIGNMENT);
	class UPXC_CollisionShape* Shape;
	FName BoneName;
	FLOAT MassDistribution;
	BITFIELD bPartialSimulation:1 GCC_PACK(INT_ALIGNMENT);
};
struct FSkeletalBonePair
{
	FName A GCC_PACK(INT_ALIGNMENT);
	FName B;
};
struct FVehicleWheel
{
	FName BoneName GCC_PACK(INT_ALIGNMENT);
	FVector Offset;
	FVector HitLocation;
	FVector HitNormal;
	FVector LocalOffset;
	BITFIELD bPowered:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bSteering:1;
	BITFIELD bReverseSteering:1;
	BITFIELD bBreaks:1;
	BITFIELD bContact:1;
};
struct FCC_DistanceType
{
	FLOAT MaxDistance GCC_PACK(INT_ALIGNMENT);
	BITFIELD bLimitDistance:1 GCC_PACK(INT_ALIGNMENT);
};
struct FCC_LimitType
{
	BYTE Limit GCC_PACK(INT_ALIGNMENT);
	FLOAT Limit1 GCC_PACK(INT_ALIGNMENT);
	FLOAT Limit2;
};
struct FPortalRenderInfo
{
	FLOAT FOV GCC_PACK(INT_ALIGNMENT);
	BYTE RendMap;
	FPlane ColorScale GCC_PACK(INT_ALIGNMENT);
	INT PixelOffset;
	FPlane NearClip;
	BITFIELD bUseNearClip:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bWrapPixels:1;
};
struct FBanEntry
{
	FStringNoInit ClientIP GCC_PACK(INT_ALIGNMENT);
	FStringNoInit ClientName;
	FStringNoInit ClientID;
	FStringNoInit ClientIdentNr;
	DWORD IPStart;
	DWORD IPEnd;

	inline UBOOL IPIsInRange( DWORD CompIP ) const
	{
		return (CompIP>=IPStart && CompIP<=IPEnd);
	}
	void ParseIPAddress(const TCHAR* InStr);
	inline void SetIPAddress( DWORD InAddr )
	{
		IPStart = IPEnd = InAddr;
	}
	const TCHAR* IPToStr() const;

	inline UBOOL IsRangeBan() const
	{
		return (IPStart!=IPEnd);
	}
	inline UBOOL ClientMatch( DWORD IP, const TCHAR* IDA, const TCHAR* IDB ) const
	{
		return (IPIsInRange(IP) || (ClientID.Len() && (ClientID==IDA || ClientIdentNr==IDB)));
	}
	const TCHAR* GetReadableName() const;
};
struct FClientLogEntry
{
	FStringNoInit PlayerNames GCC_PACK(INT_ALIGNMENT);
	FStringNoInit PlayerIP;
	FStringNoInit ClientID;
	FStringNoInit ClientIdentNr;
	DWORD IPAddress;

	inline UBOOL ClientMatch( DWORD IP, const TCHAR* IDA, const TCHAR* IDB ) const
	{
		return ( (!ClientID.Len() && IPAddress == IP) || (ClientID.Len() && (ClientID == IDA || ClientIdentNr == IDB)));
	}
	void UpgradeEntry();
};
struct FTempBanEntry
{
	FStringNoInit ClientName GCC_PACK(INT_ALIGNMENT);
	FStringNoInit ClientID;
	FStringNoInit ClientIdentNr;
	DWORD IPAddress;

	inline UBOOL ClientMatch( DWORD IP, const TCHAR* IDA, const TCHAR* IDB ) const
	{
		return (IPAddress==IP || (ClientID.Len() && (ClientID==IDA || ClientIdentNr==IDB)));
	}
	inline UBOOL ClientMatchAll( DWORD IP, const TCHAR* IDA, const TCHAR* IDB ) const
	{
		return (IPAddress==IP && ClientID==IDA && ClientIdentNr==IDB);
	}
	const TCHAR* GetIPStr() const;
};
struct FLensFlareCastType
{
	FLOAT ZDistance GCC_PACK(INT_ALIGNMENT);
	FLOAT Scale;
	class UTexture* LensTexture;
	FColor LensColor;
};
struct FDecorationLayer
{
	TArrayNoInit<BYTE> PaintMap GCC_PACK(INT_ALIGNMENT);
	TArrayNoInit<class UMesh*> Mesh;
	FLOAT ScaleMultiplier[2];
	FLOAT VisibilityRadius;
	FLOAT Density;
	FLOAT HeightOffset;
	INT Seed;
	BITFIELD bAlignToTerrain:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bRandomYaw:1;
};
struct FTerrainDataInfo
{
	TArrayNoInit<BYTE> HeightMap GCC_PACK(INT_ALIGNMENT);
	TArrayNoInit<INT> EdgeTurn;
	TArrayNoInit<INT> Visibility;
};
struct FTerrainMaterial
{
	TArrayNoInit<BYTE> PaintMap GCC_PACK(INT_ALIGNMENT);
	class UTexture* Texture;
	FRotator LayerRotation;
	FLOAT UScale;
	FLOAT VScale;
	FLOAT UPan;
	FLOAT VPan;
	BYTE TextureMapAxis;
};

#define UCONST_BONESPACE_Actor 1
#define UCONST_BONESPACE_Local 0
#define UCONST_BONESPACE_World 2
#define UCONST_COLLISIONFLAG_Actor 0x00000002
#define UCONST_COLLISIONFLAG_All 0x00000001
#define UCONST_COLLISIONFLAG_Bots 0x00000100
#define UCONST_COLLISIONFLAG_Decoration 0x00000080
#define UCONST_COLLISIONFLAG_Effects 0x00000200
#define UCONST_COLLISIONFLAG_Keypoints 0x00000040
#define UCONST_COLLISIONFLAG_Movers 0x00000400
#define UCONST_COLLISIONFLAG_Pawn 0x00000004
#define UCONST_COLLISIONFLAG_PlayerPawn 0x00000008
#define UCONST_COLLISIONFLAG_Projectile 0x00000020
#define UCONST_COLLISIONFLAG_ScriptedPawn 0x00000010
#define UCONST_COLLISIONFLAG_Triggers 0x00001000
#define UCONST_COLLISIONGROUP_Everything 0x7FFFFFFF
#define UCONST_LIBFLAG_AllLibs 0
#define UCONST_LIBFLAG_ServerLibs 2
#define UCONST_LIBFLAG_UsedLibs 1
#define UCONST_MaxBorder 6
#define UCONST_MaxLines 64
#define UCONST_VALID_HOSTNAME 1
#define UCONST_VALID_IPV4 1
#define UCONST_VALID_IPV6 3
#define UCONST_ColorCodeNumber 27

class ENGINE_API UEngine : public USubsystem
{
public:
	INT TickCycles GCC_PACK(INT_ALIGNMENT);
	INT GameCycles;
	INT ClientCycles;
	INT CacheSizeMegs;
	FLOAT CurrentTickRate;
	class UPrimitive* Cylinder;
	class UClient* Client;
	class URenderBase* Render;
	class UAudioSubsystem* Audio;
	class UPhysicsEngine* Physics;
	class UClass* GameRenderDevice;
	class UClass* AudioDevice;
	class UClass* Console;
	class UClass* NetworkDevice;
	class UClass* Language;
	class UClass* PhysicsEngine;
	TArrayNoInit<FCreditsInfo> DriverCredits;
	BITFIELD bBootCrashRecovery:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD UseSound:1;
	DECLARE_FUNCTION(execStorePassword);
	DECLARE_FUNCTION(execConsoleCommand);
	DECLARE_FUNCTION(execGetEngine);
	DECLARE_CLASS(UEngine,USubsystem,(CLASS_Transient | CLASS_Config | CLASS_Abstract),Engine)
	#include "UEngine.h"
};

class ENGINE_API UGameEngine : public UEngine
{
public:
	class ULevel* GLevel GCC_PACK(INT_ALIGNMENT);
	class ULevel* GEntry;
	class UPendingLevel* GPendingLevel;
	TArrayNoInit<FString> ServerActors;
	TArrayNoInit<FString> ServerPackages;
	FURL LastURL;
	BITFIELD bServerSaveInventory:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bDeleteTravelInvOnLoad:1;
	BITFIELD bIsFirstBoot:1;
	DECLARE_CLASS(UGameEngine,UEngine,(CLASS_Transient | CLASS_Config),Engine)
	#include "UGameEngine.h"
};

class ENGINE_API UPhysicsEngine : public USubsystem
{
public:
	PX_SceneBase* TickScenes GCC_PACK(INT_ALIGNMENT);
	PX_MeshShape* DefCylinder;
	DECLARE_CLASS(UPhysicsEngine,USubsystem,(CLASS_Transient | CLASS_Abstract),Engine)

	static UPhysicsEngine* GPhysicsEngine;

	UPhysicsEngine();
	
	virtual void InitEngine() {}
	virtual void ExitEngine() {}
	
	void Destroy();
	
	static PX_ShapeObject* CreateDefaultCylinder(PX_PhysicsObject* Object, FLOAT Radius, FLOAT Height, class AZoneInfo* Zone);
	
	virtual UBOOL Exec(const TCHAR* Cmd, FOutputDevice& Out = *GLog);
	
	// Tick order is: PhysicsEngine.PreTick -> All tickable scenes.PreTickStep -> PhysicsEngine.Tick -> all other actors tick.
	virtual void PreTick();
	
	// Initialize level
	virtual PX_SceneBase* CreateScene( ULevel* Level );
	
	// Physics mesh creation.
	virtual PX_MeshShape* CreateConvexMesh(FVector* Ptr, INT NumPts, UBOOL bMayMirror) { return NULL; }
	virtual PX_MeshShape* CreateMultiConvexMesh(struct FConvexModel* ConvexMesh, UBOOL bMayMirror) { return NULL; }
	virtual PX_MeshShape* CreateTrisMesh(FVector* Ptr, INT NumPts, DWORD* Tris, INT NumTris, UBOOL bMayMirror) { return NULL; }
	
	// Shape creation.
	virtual PX_ShapeObject* CreateBoxShape(const FShapeProperties& Props, const FVector& Extent) { return NULL; }
	virtual PX_ShapeObject* CreateSphereShape(const FShapeProperties& Props, FLOAT Radii) { return NULL; }
	virtual PX_ShapeObject* CreateCapsuleShape(const FShapeProperties& Props, FLOAT Height, FLOAT Radii) { return NULL; }
	virtual PX_ShapeObject* CreateMeshShape(const FShapeProperties& Props, PX_MeshShape* Mesh, const FVector& Scale=FVector(1,1,1)) { return NULL; }
	
	// Joints.
	virtual UBOOL CreateJointFixed( const FJointBaseProps& Props ) { return FALSE; }
	virtual UBOOL CreateJointHinge( const FJointHingeProps& Props ) { return FALSE; }
	virtual UBOOL CreateJointSocket( const FJointSocketProps& Props ) { return FALSE; }
	virtual UBOOL CreateConstriant( const FJointConstProps& Props ) { return FALSE; }
	virtual PX_ContactConstraint* CreateContactJoint( PX_PhysicsObject* inObject, const FCoords& JointCoords ) { return NULL; }
};

class ENGINE_API AActor : public UObject
{
public:
	INT CollisionGroups GCC_PACK(INT_ALIGNMENT);
	INT CollisionFlag;
	INT LatentInt;
	INT CollisionTag;
	INT LightingTag;
	INT NetTag;
	INT OtherTag;
	INT ExtraTag;
	INT SpecialTag;
	FLOAT RandomDelayTime;
	FLOAT RandomValue;
	FLOAT LastRandomTime;
	FLOAT LastRenderedTime;
	FLOAT TimerRate;
	FLOAT TimerCounter;
	FLOAT LifeSpan;
	FLOAT AnimFrame;
	FLOAT AnimRate;
	FLOAT TweenRate;
	FLOAT LODBias;
	FLOAT LatentFloat;
	FLOAT OddsOfAppearing;
	FLOAT DrawScale;
	FLOAT ScaleGlow;
	FLOAT VisibilityRadius;
	FLOAT VisibilityHeight;
	FLOAT SpriteProjForward;
	FLOAT AmbientGlowPulseSpeed;
	FLOAT TransientSoundVolume;
	FLOAT TransientSoundRadius;
	FLOAT CollisionRadius;
	FLOAT CollisionHeight;
	FLOAT CoronaAlpha;
	FLOAT NormalLightRadius;
	FLOAT Mass;
	FLOAT Buoyancy;
	FLOAT PhysAlpha;
	FLOAT PhysRate;
	FLOAT AnimLast;
	FLOAT AnimMinRate;
	FLOAT OldAnimRate;
	FLOAT NetPriority;
	FLOAT NetUpdateFrequency;
	FLOAT NetUpdateTime;
	class UPrimitive* CollisionOverride;
	class UPX_PhysicsDataBase* PhysicsData;
	class AActor* Owner;
	class UAnimation* SkelAnim;
	class UAnimationNotify* AnimationNotify;
	class ALevelInfo* Level;
	class ULevel* XLevel;
	class AActor* Target;
	class APawn* Instigator;
	class AInventory* Inventory;
	class AActor* Base;
	class AActor* LatentActor;
	class AActor* Touching[4];
	class AActor* Deleted;
	class AActor* HitActor;
	class UTexture* Sprite;
	class UTexture* Texture;
	class UTexture* Skin;
	class UMesh* Mesh;
	class UMesh* ShadowMesh;
	class UModel* Brush;
	class UTexture* MultiSkins[8];
	class USound* AmbientSound;
	class AActor* PendingTouch;
	class URenderIterator* RenderInterface;
	FName BlendAnimationSequence;
	FName InitialState;
	FName Group;
	FName AnimSequence;
	FName Tag;
	FName Event;
	FName AttachedBone;
	FName AttachTag;
	class UClass* RenderIteratorClass;
	TArrayNoInit<class AProjector*> ProjectorList;
	TArrayNoInit<class AActor*> RealTouching;
	TArrayNoInit<FMultiTimerType> MultiTimers;
	TArrayNoInit<class UAnimation*> AnimSets;
	FColor ActorRenderColor;
	FColor ActorGUnlitColor;
	FColor AmbientGlowColor;
	FVector RelativeLocation;
	FRotator RelativeRotation;
	FVector DrawScale3D;
	FPointRegion Region;
	FVector Location;
	FRotator Rotation;
	FVector OldLocation;
	FVector ColLocation;
	FVector Velocity;
	FVector Acceleration;
	FVector PrePivot;
	FRotator RotationRate;
	FRotator DesiredRotation;
	FPlane SimAnim;
	TScriptMapNoInit<FName,FAnyProperty*> UserData;
	FMeshInstanceBase* MeshInstance;
	FLightVisibilityCache* LightDataPtr;
	FDynamicSprite* RenderState;
	FInterpolateData* RenderInterpolate;
	FActorRBPhysicsBase* RbPhysicsData;
	BYTE* NetInitialProperties;
	struct FTreeActor* OctreeNode;
	TArray<AActor*>* RealBasedActors;
	TArray<AActor*>* RealChildActors;
	TArray<struct PX_JointObject*>* JoinedActorsPtr;
	struct FNetworkData* NetworkChannels;
	struct FActorPriority* NetworkPtr;
	BYTE RenderPass;
	BYTE LastHitBox;
	BYTE Physics;
	BYTE Role;
	BYTE RemoteRole;
	BYTE StandingCount;
	BYTE MiscNumber;
	BYTE LatentByte;
	BYTE DrawType;
	BYTE Style;
	BYTE AmbientGlow;
	BYTE Fatness;
	BYTE SoundRadius;
	BYTE SoundVolume;
	BYTE SoundPitch;
	BYTE LightType;
	BYTE LightEffect;
	BYTE LightBrightness;
	BYTE LightHue;
	BYTE LightSaturation;
	BYTE LightRadius;
	BYTE LightPeriod;
	BYTE LightPhase;
	BYTE LightCone;
	BYTE VolumeBrightness;
	BYTE VolumeRadius;
	BYTE VolumeFog;
	BYTE DodgeDir;
	BITFIELD bStatic:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bHidden:1;
	BITFIELD bNoDelete:1;
	BITFIELD bAnimFinished:1;
	BITFIELD bAnimLoop:1;
	BITFIELD bAnimNotify:1;
	BITFIELD bAnimByOwner:1;
	BITFIELD bDeleteMe:1;
	BITFIELD bAssimilated:1;
	BITFIELD bTicked:1;
	BITFIELD bLightChanged:1;
	BITFIELD bDynamicLight:1;
	BITFIELD bTimerLoop:1;
	BITFIELD bNetNotify:1;
	BITFIELD bHandleOwnCorona:1;
	BITFIELD bRenderMultiEnviroMaps:1;
	BITFIELD bWorldGeometry:1;
	BITFIELD bUseMeshCollision:1;
	BITFIELD bEditorSelectRender:1;
	BITFIELD bNoDynamicShadowCast:1;
	BITFIELD bProjectorDecal:1;
	BITFIELD bUseLitSprite:1;
	BITFIELD bTickRealTime:1;
	BITFIELD bHiddenEd:1;
	BITFIELD bDirectional:1;
	BITFIELD bSelected:1;
	BITFIELD bMemorized:1;
	BITFIELD bHighlighted:1;
	BITFIELD bEdLocked:1;
	BITFIELD bEdShouldSnap:1;
	BITFIELD bEdSnap:1;
	BITFIELD bTempEditor:1;
	BITFIELD bDifficulty0:1;
	BITFIELD bDifficulty1:1;
	BITFIELD bDifficulty2:1;
	BITFIELD bDifficulty3:1;
	BITFIELD bSinglePlayer:1;
	BITFIELD bNet:1;
	BITFIELD bNetSpecial:1;
	BITFIELD bScriptInitialized:1;
	BITFIELD bCanTeleport:1;
	BITFIELD bIsSecretGoal:1;
	BITFIELD bIsKillGoal:1;
	BITFIELD bIsItemGoal:1;
	BITFIELD bCollideWhenPlacing:1;
	BITFIELD bTravel:1;
	BITFIELD bMovable:1;
	BITFIELD bHighDetail:1;
	BITFIELD bStasis:1;
	BITFIELD bForceStasis:1;
	BITFIELD bIsPawn:1;
	BITFIELD bIsPlayerPawn:1;
	BITFIELD bIsProjectile:1;
	BITFIELD bIsStaticMesh:1;
	BITFIELD bNetTemporary:1;
	BITFIELD bNetOptional:1;
	BITFIELD bReplicateInstigator:1;
	BITFIELD bTrailerSameRotation:1;
	BITFIELD bUnlit:1;
	BITFIELD bNoSmooth:1;
	BITFIELD bParticles:1;
	BITFIELD bRandomFrame:1;
	BITFIELD bMeshEnviroMap:1;
	BITFIELD bFilterByVolume:1;
	BITFIELD bMeshCurvy:1;
	BITFIELD bShadowCast:1;
	BITFIELD bCustomDrawActor:1;
	BITFIELD bOnlyRenderCurrentZone:1;
	BITFIELD bOwnerNoSee:1;
	BITFIELD bOnlyOwnerSee:1;
	BITFIELD bIsMover:1;
	BITFIELD bAlwaysRelevant:1;
	BITFIELD bAlwaysTick:1;
	BITFIELD bHurtEntry:1;
	BITFIELD bGameRelevant:1;
	BITFIELD bCarriedItem:1;
	BITFIELD bForcePhysicsUpdate:1;
	BITFIELD bSkipActorReplication:1;
	BITFIELD bRepAnimations:1;
	BITFIELD bRepAmbientSound:1;
	BITFIELD bSimulatedPawnRep:1;
	BITFIELD bRepMesh:1;
	BITFIELD bNetInitialRotation:1;
	BITFIELD bNetInitialVelocity:1;
	BITFIELD bNetInitExactLocation:1;
	BITFIELD bOptionalNetOwner:1;
	BITFIELD bCollideActors:1;
	BITFIELD bCollideWorld:1;
	BITFIELD bBlockActors:1;
	BITFIELD bBlockPlayers:1;
	BITFIELD bProjTarget:1;
	BITFIELD bPathCollision:1;
	BITFIELD bBlockZeroExtentTraces:1;
	BITFIELD bBlockNonZeroExtentTraces:1;
	BITFIELD bBlockAISight:1;
	BITFIELD bBlockTextureTrace:1;
	BITFIELD bBlockRigidBodyPhys:1;
	BITFIELD bSpecialLit:1;
	BITFIELD bActorShadows:1;
	BITFIELD bCorona:1;
	BITFIELD bFOVFadingCorona:1;
	BITFIELD bForcedCorona:1;
	BITFIELD bLensFlare:1;
	BITFIELD bDarkLight:1;
	BITFIELD bZoneNormalLight:1;
	BITFIELD bNetInitial:1;
	BITFIELD bNetOwner:1;
	BITFIELD bNetRelevant:1;
	BITFIELD bNetSee:1;
	BITFIELD bNetHear:1;
	BITFIELD bNetFeel:1;
	BITFIELD bSimulatedPawn:1;
	BITFIELD bDemoRecording:1;
	BITFIELD bClientDemoNetFunc:1;
	BITFIELD bBounce:1;
	BITFIELD bFixedRotationDir:1;
	BITFIELD bRotateToDesired:1;
	BITFIELD bInterpolating:1;
	BITFIELD bJustTeleported:1;
	BITFIELD bNetBeginPlay:1;
	BITFIELD bForceNetUpdate:1;
	BITFIELD bPendingNetUpdate:1;
	BITFIELD bNetDirty:1;
	BITFIELD bCrossLevelNetwork:1;
	BITFIELD bOnlyOwnerRelevant:1;
	BITFIELD bOnlyDirtyReplication:1;
	BITFIELD bForceDirtyReplication:1;
	BITFIELD bAlwaysNetDirty:1;
	BITFIELD bRunningPhysics:1;
	BITFIELD bRegionZoneDirty:1;
	BITFIELD bEdSelectionLock:1;
	BITFIELD bTraceHitBoxes:1;
	BITFIELD bTextureAnimOnce:1;
	BITFIELD bOnlyDrawWithBase:1;
	BITFIELD bAllowRootMotionXY:1;
	BITFIELD bAllowRootMotionZ:1;
	BITFIELD bSerializeMeshInst:1;
	BITFIELD bSpecialBrushActor:1;
	BITFIELD bNetInterpolatePos:1;
	BITFIELD bHardAttach:1;
	BITFIELD bIsFrobable:1;
	DECLARE_FUNCTION(execUnTriggerEvent);
	DECLARE_FUNCTION(execTriggerEvent);
	DECLARE_FUNCTION(execHurtRadius);
	DECLARE_FUNCTION(execMultiply_ColorFloat);
	DECLARE_FUNCTION(execAdd_ColorColor);
	DECLARE_FUNCTION(execMultiply_FloatColor);
	DECLARE_FUNCTION(execSubtract_ColorColor);
	DECLARE_FUNCTION(execMeshTrace);
	DECLARE_FUNCTION(execGetBestTraceLineVertex);
	DECLARE_FUNCTION(execGetClosestVertex);
	DECLARE_FUNCTION(execAllFrameVerts);
	DECLARE_FUNCTION(execGetVertexCount);
	DECLARE_FUNCTION(execGetVertexPos);
	DECLARE_FUNCTION(execSendToLevel);
	DECLARE_FUNCTION(execSetPendingTouch);
	DECLARE_FUNCTION(execIsInPackageMap);
	DECLARE_FUNCTION(execAddToPackagesMap);
	DECLARE_FUNCTION(execCanReachPoint);
	DECLARE_FUNCTION(execVisibleCollidingActors);
	DECLARE_FUNCTION(execVisibleActors);
	DECLARE_FUNCTION(execRadiusActors);
	DECLARE_FUNCTION(execTraceActors);
	DECLARE_FUNCTION(execTouchingActors);
	DECLARE_FUNCTION(execBasedActors);
	DECLARE_FUNCTION(execChildActors);
	DECLARE_FUNCTION(execAllActors);
	DECLARE_FUNCTION(execAllLibaries);
	DECLARE_FUNCTION(execIntDescIterator);
	DECLARE_FUNCTION(execGetNextIntDesc);
	DECLARE_FUNCTION(execGetNextInt);
	DECLARE_FUNCTION(execGetURLMap);
	DECLARE_FUNCTION(execGetNextSkin);
	DECLARE_FUNCTION(execGetMapName);
	DECLARE_FUNCTION(execPlayerCanSeeMe);
	DECLARE_FUNCTION(execMakeNoise);
	DECLARE_FUNCTION(execGetSoundDuration);
	DECLARE_FUNCTION(execDemoPlaySound);
	DECLARE_FUNCTION(execPlayOwnedSound);
	DECLARE_FUNCTION(execSetInstantMusicVolume);
	DECLARE_FUNCTION(execSetInstantSpeechVolume);
	DECLARE_FUNCTION(execSetInstantSoundVolume);
	DECLARE_FUNCTION(execStopSound);
	DECLARE_FUNCTION(execPlaySound);
	DECLARE_FUNCTION(execSetTimer);
	DECLARE_FUNCTION(execDestroy);
	DECLARE_FUNCTION(execSpawn);
	DECLARE_FUNCTION(execGetBoundingBox);
	DECLARE_FUNCTION(execTraceTextures);
	DECLARE_FUNCTION(execTraceThisActor);
	DECLARE_FUNCTION(execTraceSurfHitInfo);
	DECLARE_FUNCTION(execFastTrace);
	DECLARE_FUNCTION(execTrace);
	DECLARE_FUNCTION(execSuggestFallVelocity);
	DECLARE_FUNCTION(execSetPhysics);
	DECLARE_FUNCTION(execFinishInterpolation);
	DECLARE_FUNCTION(execGetRenderPosition);
	DECLARE_FUNCTION(execClearDebugLines);
	DECLARE_FUNCTION(execDrawDebugSphere);
	DECLARE_FUNCTION(execDrawDebugBox);
	DECLARE_FUNCTION(execDrawDebugLine);
	DECLARE_FUNCTION(execHasMeshHitBoxes);
	DECLARE_FUNCTION(execAddIKSolver);
	DECLARE_FUNCTION(execRemoveIKSolver);
	DECLARE_FUNCTION(execGetIKSolver);
	DECLARE_FUNCTION(execSetSocketInfo);
	DECLARE_FUNCTION(execGetSocketInfo);
	DECLARE_FUNCTION(execDeatachFromBone);
	DECLARE_FUNCTION(execAttachActorToBone);
	DECLARE_FUNCTION(execResetSkeletalMesh);
	DECLARE_FUNCTION(execStopSkelAnim);
	DECLARE_FUNCTION(execSkelPlayAnim);
	DECLARE_FUNCTION(execSetBonePosition);
	DECLARE_FUNCTION(execSetBoneRoot);
	DECLARE_FUNCTION(execSetBoneScale);
	DECLARE_FUNCTION(execSetBoneRotation);
	DECLARE_FUNCTION(execGetBoneLocation);
	DECLARE_FUNCTION(execGetBoneRotation);
	DECLARE_FUNCTION(execGetBoneCoords);
	DECLARE_FUNCTION(execGetBoneName);
	DECLARE_FUNCTION(execGetBoneIndex);
	DECLARE_FUNCTION(execLinkSkelAnim);
	DECLARE_FUNCTION(execHasAnim);
	DECLARE_FUNCTION(execFinishAnim);
	DECLARE_FUNCTION(execGetAnimGroup);
	DECLARE_FUNCTION(execIsAnimating);
	DECLARE_FUNCTION(execTweenAnim);
	DECLARE_FUNCTION(execLoopAnim);
	DECLARE_FUNCTION(execPlayAnim);
	DECLARE_FUNCTION(execIsBlockedBy);
	DECLARE_FUNCTION(execFindSpot);
	DECLARE_FUNCTION(execPointCheck);
	DECLARE_FUNCTION(execSetOwner);
	DECLARE_FUNCTION(execSetBase);
	DECLARE_FUNCTION(execAutonomousPhysics);
	DECLARE_FUNCTION(execMoveSmooth);
	DECLARE_FUNCTION(execSetRotation);
	DECLARE_FUNCTION(execSetLocation);
	DECLARE_FUNCTION(execMove);
	DECLARE_FUNCTION(execCheckEncroachments);
	DECLARE_FUNCTION(execSetCollisionSize);
	DECLARE_FUNCTION(execSetCollision);
	DECLARE_FUNCTION(execSleep);
	DECLARE_FUNCTION(execError);
	DECLARE_FUNCTION(execConsoleCommand);
	void eventSkeletalRootMotion(FVector Delta, FLOAT DeltaTime)
	{
		struct { FVector Delta; FLOAT DeltaTime; } Parms = { Delta, DeltaTime };
		ProcessEvent(FindFunctionChecked(ENGINE_SkeletalRootMotion),&Parms);
	}
	void eventOnMirrorMode()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_OnMirrorMode),NULL);
	}
	void eventShadowModeChange()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_ShadowModeChange),NULL);
	}
	void eventOnSubLevelChange(class ALevelInfo* PrevLevel)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_OnSubLevelChange),&PrevLevel);
	}
	void eventOnDrawActor(class UCanvas* Canvas)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_OnDrawActor),&Canvas);
	}
	void eventBecomeViewTarget()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_BecomeViewTarget),NULL);
	}
	void eventRenderTexture(class UScriptedTexture* Tex)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_RenderTexture),&Tex);
	}
	void eventTravelPostAccept()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_TravelPostAccept),NULL);
	}
	void eventTravelPreAccept()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_TravelPreAccept),NULL);
	}
	void eventPostLoadGame()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PostLoadGame),NULL);
	}
	void eventSetInitialState()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_SetInitialState),NULL);
	}
	void eventOnRepNotify(FName Property)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_OnRepNotify),&Property);
	}
	void eventPostNetReceive()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PostNetReceive),NULL);
	}
	void eventReplicationEnded()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_ReplicationEnded),NULL);
	}
	void eventPostNetBeginPlay()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PostNetBeginPlay),NULL);
	}
	void eventPostBeginPlay()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PostBeginPlay),NULL);
	}
	void eventBroadcastMessage(const FString& Msg, BITFIELD bBeep, FName Type)
	{
		struct { FString Msg; BITFIELD bBeep; FName Type; } Parms = { Msg, (bBeep != 0), Type };
		ProcessEvent(FindFunctionChecked(ENGINE_BroadcastMessage),&Parms);
	}
	void eventPreBeginPlay()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PreBeginPlay),NULL);
	}
	void eventRenderOverlays(class UCanvas* Canvas)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_RenderOverlays),&Canvas);
	}
	void eventBeginPlay()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_BeginPlay),NULL);
	}
	void eventNotifyLevelChange()
	{
		ProcessEvent(FindFunctionChecked(NAME_NotifyLevelChange),NULL);
	}
	void eventPostTeleport(class ATeleporter* OutTeleporter)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PostTeleport),&OutTeleporter);
	}
	BITFIELD eventPreTeleport(class ATeleporter* InTeleporter)
	{
		struct { class ATeleporter* InTeleporter; BITFIELD ReturnValue; } Parms = { InTeleporter, 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_PreTeleport),&Parms);
		return Parms.ReturnValue;
	}
	void eventDemoPlaySound(class USound* Sound, BYTE Slot, FLOAT Volume, BITFIELD bNoOverride, FLOAT Radius, FLOAT Pitch)
	{
		struct { class USound* Sound; BYTE Slot; FLOAT Volume; BITFIELD bNoOverride; FLOAT Radius; FLOAT Pitch; } Parms = { Sound, Slot, Volume, (bNoOverride != 0), Radius, Pitch };
		ProcessEvent(FindFunctionChecked(ENGINE_DemoPlaySound),&Parms);
	}
	void eventTakeDamage(INT Damage, class APawn* EventInstigator, FVector HitLocation, FVector Momentum, FName DamageType)
	{
		struct { INT Damage; class APawn* EventInstigator; FVector HitLocation; FVector Momentum; FName DamageType; } Parms = { Damage, EventInstigator, HitLocation, Momentum, DamageType };
		ProcessEvent(FindFunctionChecked(ENGINE_TakeDamage),&Parms);
	}
	void eventKilledBy(class APawn* EventInstigator)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_KilledBy),&EventInstigator);
	}
	void eventFellOutOfWorld()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_FellOutOfWorld),NULL);
	}
	void eventPhysicsJointBreak(class UPXJ_BaseJoint* Joint)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PhysicsJointBreak),&Joint);
	}
	void eventPhysicsImpact(FLOAT Threshold, FVector HitLocation, FVector HitNormal, class AActor* Other)
	{
		struct { FLOAT Threshold; FVector HitLocation; FVector HitNormal; class AActor* Other; } Parms = { Threshold, HitLocation, HitNormal, Other };
		ProcessEvent(FindFunctionChecked(NAME_PhysicsImpact),&Parms);
	}
	void eventEndedRotation()
	{
		ProcessEvent(FindFunctionChecked(NAME_EndedRotation),NULL);
	}
	void eventInterpolateEnd(class AActor* Other)
	{
		ProcessEvent(FindFunctionChecked(NAME_InterpolateEnd),&Other);
	}
	BITFIELD eventRanInto(class AActor* Other)
	{
		struct { class AActor* Other; BITFIELD ReturnValue; } Parms = { Other, 0 };
		ProcessEvent(FindFunctionChecked(NAME_RanInto),&Parms);
		return Parms.ReturnValue;
	}
	void eventEncroachedBy(class AActor* Other)
	{
		ProcessEvent(FindFunctionChecked(NAME_EncroachedBy),&Other);
	}
	BITFIELD eventEncroachingOn(class AActor* Other)
	{
		struct { class AActor* Other; BITFIELD ReturnValue; } Parms = { Other, 0 };
		ProcessEvent(FindFunctionChecked(NAME_EncroachingOn),&Parms);
		return Parms.ReturnValue;
	}
	class AActor* eventSpecialHandling(class APawn* Other)
	{
		struct { class APawn* Other; class AActor* ReturnValue; } Parms = { Other, 0 };
		ProcessEvent(FindFunctionChecked(NAME_SpecialHandling),&Parms);
		return Parms.ReturnValue;
	}
	void eventKillCredit(class AActor* Other)
	{
		ProcessEvent(FindFunctionChecked(NAME_KillCredit),&Other);
	}
	void eventDetach(class AActor* Other)
	{
		ProcessEvent(FindFunctionChecked(NAME_Detach),&Other);
	}
	void eventAttach(class AActor* Other)
	{
		ProcessEvent(FindFunctionChecked(NAME_Attach),&Other);
	}
	void eventBaseChange()
	{
		ProcessEvent(FindFunctionChecked(NAME_BaseChange),NULL);
	}
	void eventBump(class AActor* Other)
	{
		ProcessEvent(FindFunctionChecked(NAME_Bump),&Other);
	}
	void eventUnTouch(class AActor* Other)
	{
		ProcessEvent(FindFunctionChecked(NAME_UnTouch),&Other);
	}
	void eventPostTouch(class AActor* Other)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PostTouch),&Other);
	}
	void eventTouch(class AActor* Other)
	{
		ProcessEvent(FindFunctionChecked(NAME_Touch),&Other);
	}
	void eventZoneChange(class AZoneInfo* NewZone)
	{
		ProcessEvent(FindFunctionChecked(NAME_ZoneChange),&NewZone);
	}
	void eventLanded(FVector HitNormal)
	{
		ProcessEvent(FindFunctionChecked(NAME_Landed),&HitNormal);
	}
	void eventFalling()
	{
		ProcessEvent(FindFunctionChecked(NAME_Falling),NULL);
	}
	void eventHitWall(FVector HitNormal, class AActor* HitWall)
	{
		struct { FVector HitNormal; class AActor* HitWall; } Parms = { HitNormal, HitWall };
		ProcessEvent(FindFunctionChecked(NAME_HitWall),&Parms);
	}
	void eventTimer()
	{
		ProcessEvent(FindFunctionChecked(NAME_Timer),NULL);
	}
	void eventEndEvent()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_EndEvent),NULL);
	}
	void eventBeginEvent()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_BeginEvent),NULL);
	}
	void eventUnTrigger(class AActor* Other, class APawn* EventInstigator)
	{
		struct { class AActor* Other; class APawn* EventInstigator; } Parms = { Other, EventInstigator };
		ProcessEvent(FindFunctionChecked(NAME_UnTrigger),&Parms);
	}
	void eventTrigger(class AActor* Other, class APawn* EventInstigator)
	{
		struct { class AActor* Other; class APawn* EventInstigator; } Parms = { Other, EventInstigator };
		ProcessEvent(FindFunctionChecked(NAME_Trigger),&Parms);
	}
	void eventOwnerChanged()
	{
		ProcessEvent(FindFunctionChecked(NAME_OwnerChanged),NULL);
	}
	void eventTick(FLOAT DeltaTime)
	{
		ProcessEvent(FindFunctionChecked(NAME_Tick),&DeltaTime);
	}
	void eventLostChild(class AActor* Other)
	{
		ProcessEvent(FindFunctionChecked(NAME_LostChild),&Other);
	}
	void eventGainedChild(class AActor* Other)
	{
		ProcessEvent(FindFunctionChecked(NAME_GainedChild),&Other);
	}
	void eventExpired()
	{
		ProcessEvent(FindFunctionChecked(NAME_Expired),NULL);
	}
	void eventDestroyed()
	{
		ProcessEvent(FindFunctionChecked(NAME_Destroyed),NULL);
	}
	void eventSpawned()
	{
		ProcessEvent(FindFunctionChecked(NAME_Spawned),NULL);
	}
	void eventEdBrushDeployed()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_EdBrushDeployed),NULL);
	}
	void eventEdNoteAddedActor(FVector HitLocation, FVector HitNormal)
	{
		struct { FVector HitLocation; FVector HitNormal; } Parms = { HitLocation, HitNormal };
		ProcessEvent(FindFunctionChecked(ENGINE_EdNoteAddedActor),&Parms);
	}
	void eventNotifyPathDefine(BITFIELD bPreNotify)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_NotifyPathDefine),&bPreNotify);
	}
	void eventDrawEditorSelection(class UCanvas* C)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_DrawEditorSelection),&C);
	}
	void eventNotifyIKSolver(class UIK_SolverBase* Solver, BITFIELD bDelete)
	{
		struct { class UIK_SolverBase* Solver; BITFIELD bDelete; } Parms = { Solver, (bDelete != 0) };
		ProcessEvent(FindFunctionChecked(ENGINE_NotifyIKSolver),&Parms);
	}
	void eventAnimBoneNotify(INT BoneIndex, FName NotifyName)
	{
		struct { INT BoneIndex; FName NotifyName; } Parms = { BoneIndex, NotifyName };
		ProcessEvent(FindFunctionChecked(ENGINE_AnimBoneNotify),&Parms);
	}
	void eventAnimEndOnBone(INT BoneIndex)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_AnimEndOnBone),&BoneIndex);
	}
	void eventAnimEnd()
	{
		ProcessEvent(FindFunctionChecked(NAME_AnimEnd),NULL);
	}
	DECLARE_CLASS(AActor,UObject,(CLASS_NativeReplication | CLASS_Abstract),Engine)
	#include "AActor.h"
};

class ENGINE_API ABlockingActor : public AActor
{
public:
	TArrayNoInit<class UClass*> BlockingClasses GCC_PACK(INT_ALIGNMENT);
	TArrayNoInit<class UClass*> IgnoreSubClasses;
	TArrayNoInit<class UClass*> ScriptBlocking;
	BITFIELD bBlockSubClasses:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD eventShouldBlock(class AActor* Other)
	{
		struct { class AActor* Other; BITFIELD ReturnValue; } Parms = { Other, 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_ShouldBlock),&Parms);
		return Parms.ReturnValue;
	}
	DECLARE_CLASS(ABlockingActor,AActor,0,Engine)
	#include "ABlockingActor.h"
};

class ENGINE_API ABrush : public AActor
{
public:
	INT PolyFlags GCC_PACK(INT_ALIGNMENT);
	INT RenderLeaf;
	class UObject* UnusedLightMesh;
	class ABrush* DynBspNext;
	class ABrush* FlushNext;
	FVector PostPivot;
	FScale MainScale;
	FScale PostScale;
	FScale TempScale;
	FColor BrushColor;
	BYTE CsgOper;
	BITFIELD bColored:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bStrictMerging:1;
	BITFIELD bHintBrush:1;
	BITFIELD bDynBSPDirty:1;
	DECLARE_CLASS(ABrush,AActor,(CLASS_EditorOnly | CLASS_NoUserCreate),Engine)
	#include "ABrush.h"
};

class ENGINE_API AMover : public ABrush
{
public:
	INT EncroachDamage GCC_PACK(INT_ALIGNMENT);
	INT numTriggerEvents;
	INT SimOldRotPitch;
	INT SimOldRotYaw;
	INT SimOldRotRoll;
	INT ServerUpdate;
	INT ClientUpdate;
	INT LNextKeyNum;
	FLOAT MoveTime;
	FLOAT StayOpenTime;
	FLOAT OtherTime;
	FLOAT DamageThreshold;
	FLOAT DelayTime;
	class AActor* SavedTrigger;
	class AMover* Leader;
	class AMover* Follower;
	class USound* OpeningSound;
	class USound* OpenedSound;
	class USound* ClosingSound;
	class USound* ClosedSound;
	class USound* MoveAmbientSound;
	class UStaticLightData* StaticLightD;
	class AActor* StuckActor;
	class ANavigationPoint* myMarker;
	class AActor* TriggerActor;
	class AActor* TriggerActor2;
	class APawn* WaitingPawn;
	class ATrigger* RecommendedTrigger;
	FName PlayerBumpEvent;
	FName BumpEvent;
	FName ReturnGroup;
	TArrayNoInit<INT> NotifyLightMaps;
	FVector KeyPos[16];
	FRotator KeyRot[16];
	FVector BasePos;
	FVector OldPos;
	FVector OldPrePivot;
	FVector SavedPos;
	FRotator BaseRot;
	FRotator OldRot;
	FRotator SavedRot;
	FVector SimOldPos;
	FVector SimInterpolate;
	FVector RealPosition;
	FRotator RealRotation;
	BYTE MoverEncroachType;
	BYTE MoverGlideType;
	BYTE BumpType;
	BYTE KeyNum;
	BYTE PrevKeyNum;
	BYTE NumKeys;
	BYTE WorldRaytraceKey;
	BYTE BrushRaytraceKey;
	BITFIELD bUseShortestRotation:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bTriggerOnceOnly:1;
	BITFIELD bSlave:1;
	BITFIELD bUseTriggered:1;
	BITFIELD bDamageTriggered:1;
	BITFIELD bDynamicLightMover:1;
	BITFIELD bDirectionalPushOff:1;
	BITFIELD bAdvancedCamUpdate:1;
	BITFIELD bUseGoodCollision:1;
	BITFIELD bIgnoreInventory:1;
	BITFIELD bReplicateSimMove:1;
	BITFIELD bOpening:1;
	BITFIELD bDelaying:1;
	BITFIELD bPlayerOnly:1;
	void eventActorBecameStuck(class AActor* Other)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_ActorBecameStuck),&Other);
	}
	void eventClientSimMove()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_ClientSimMove),NULL);
	}
	DECLARE_CLASS(AMover,ABrush,CLASS_NativeReplication,Engine)
	#include "AMover.h"
};

class ENGINE_API AVolume : public ABrush
{
public:
	DECLARE_FUNCTION(execEncompasses);
	DECLARE_CLASS(AVolume,ABrush,CLASS_NoUserCreate,Engine)

	void PostEditMove();
	void TransformPermanently( BYTE KeepRotation );
	virtual UBOOL Encompasses( const FVector& Position );
	bool ShouldTrace( DWORD TraceFlags, AActor* SourceActor );
};

class ENGINE_API AAntiPortalActor : public AVolume
{
public:
	BITFIELD bAntiPortalHidden:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD BACKUP_Hidden:1;
	DECLARE_FUNCTION(execSetAntiPortalHidden);
	DECLARE_CLASS(AAntiPortalActor,AVolume,CLASS_NativeReplication,Engine)
	#include "AAntiPortalActor.h"
};

class ENGINE_API ABlockingVolume : public AVolume
{
public:
	INT BlockingFlags GCC_PACK(INT_ALIGNMENT);
	INT ScriptFilterFlags;
	TArrayNoInit<class UClass*> BlockedClasses;
	BITFIELD bClassBlocker:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD BlockFlags_PlayerPawn:1;
	BITFIELD BlockFlags_ScriptedPawn:1;
	BITFIELD BlockFlags_Bots:1;
	BITFIELD BlockFlags_Projectile:1;
	BITFIELD BlockFlags_Decoration:1;
	BITFIELD BlockFlags_Misc:1;
	BITFIELD eventShouldBlock(class AActor* Other, INT TraceFlags)
	{
		struct { class AActor* Other; INT TraceFlags; BITFIELD ReturnValue; } Parms = { Other, TraceFlags, 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_ShouldBlock),&Parms);
		return Parms.ReturnValue;
	}
	DECLARE_CLASS(ABlockingVolume,AVolume,CLASS_NoUserCreate,Engine)

	bool ShouldTrace( DWORD TraceFlags, AActor* SourceActor );
};

class ENGINE_API ADecal : public AActor
{
public:
	INT MultiDecalLevel GCC_PACK(INT_ALIGNMENT);
	class UModel* SurfModel;
	TArrayNoInit<INT> SurfList;
	BITFIELD bAttachPanningSurfs:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bAttachUnlitSurfs:1;
	BITFIELD bNoDecalProjector:1;
	DECLARE_FUNCTION(execDetachDecal);
	DECLARE_FUNCTION(execAttachDecal);
	void eventUpdate(class AActor* L)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_Update),&L);
	}
	DECLARE_CLASS(ADecal,AActor,0,Engine)
	#include "ADecal.h"
};

class ENGINE_API ADecoration : public AActor
{
public:
	INT numLandings GCC_PACK(INT_ALIGNMENT);
	class USound* PushSound;
	class USound* EndPushSound;
	class AActor* Shadow;
	class UClass* EffectWhenDestroyed;
	class UClass* contents;
	class UClass* content2;
	class UClass* content3;
	BITFIELD bPushable:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bOnlyTriggerable:1;
	BITFIELD bOrientToGround:1;
	BITFIELD bSplash:1;
	BITFIELD bBobbing:1;
	BITFIELD bWasCarried:1;
	BITFIELD bPushSoundPlaying:1;
	DECLARE_CLASS(ADecoration,AActor,CLASS_Abstract,Engine)
	#include "ADecoration.h"
};

class ENGINE_API ACarcass : public ADecoration
{
public:
	INT CumulativeDamage GCC_PACK(INT_ALIGNMENT);
	FLOAT FullCollisionHeight;
	class APlayerReplicationInfo* PlayerOwner;
	class APawn* Bugs;
	BYTE flies;
	BYTE rats;
	BITFIELD bPlayerCarcass:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bReducedHeight:1;
	BITFIELD bDecorative:1;
	BITFIELD bSlidingCarcass:1;
	DECLARE_CLASS(ACarcass,ADecoration,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(ACarcass)
};

class ENGINE_API AHUD : public AActor
{
public:
	INT HudMode GCC_PACK(INT_ALIGNMENT);
	INT Crosshair;
	FLOAT HudScaler;
	FLOAT CrosshairScale;
	class AMenu* MainMenu;
	class UClass* MainMenuType;
	TArrayNoInit<class AHUDOverlay*> Overlays;
	FStringNoInit HUDConfigWindowType;
	void eventPostRender(class UCanvas* Canvas)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Canvas);
	}
	void eventPreRender(class UCanvas* Canvas)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PreRender),&Canvas);
	}
	DECLARE_CLASS(AHUD,AActor,(CLASS_Config | CLASS_Abstract),Engine)
	NO_DEFAULT_CONSTRUCTOR(AHUD)
};

class ENGINE_API AHUDOverlay : public AActor
{
public:
	class AHUD* myHUD GCC_PACK(INT_ALIGNMENT);
	BITFIELD bPostRender:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bPreRender:1;
	void eventPostRender(class UCanvas* Canvas)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Canvas);
	}
	void eventPreRender(class UCanvas* Canvas)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PreRender),&Canvas);
	}
	DECLARE_CLASS(AHUDOverlay,AActor,CLASS_Abstract,Engine)
	NO_DEFAULT_CONSTRUCTOR(AHUDOverlay)
};

class ENGINE_API AInfo : public AActor
{
public:
	DECLARE_CLASS(AInfo,AActor,CLASS_Abstract,Engine)
	#include "AInfo.h"
};

class ENGINE_API AFluidInfo : public AInfo
{
public:
	DECLARE_CLASS(AFluidInfo,AInfo,CLASS_Abstract,Engine)
	NO_DEFAULT_CONSTRUCTOR(AFluidInfo)
};

class ENGINE_API AGameInfo : public AInfo
{
public:
	INT ItemGoals GCC_PACK(INT_ALIGNMENT);
	INT KillGoals;
	INT SecretGoals;
	INT MaxSpectators;
	INT NumSpectators;
	INT MaxPlayers;
	INT NumPlayers;
	INT CurrentID;
	INT SentText;
	INT GameMaxChannels;
	INT BleedingDamageMin;
	INT BleedingDamageMax;
	INT DesiredMaxChannels;
	FLOAT AutoAim;
	FLOAT GameSpeed;
	FLOAT StartTime;
	class AMutator* BaseMutator;
	class AGameReplicationInfo* GameReplicationInfo;
	class AStatLog* LocalLog;
	class AStatLog* WorldLog;
	class AGameRules* GameRules;
	class AAdminAccessManager* AccessManager;
	class UServerPreloginScene* ServerScene;
	class ALevelInfo* SpawnLevel;
	FName DefaultPlayerState;
	class UClass* DefaultPlayerClass;
	class UClass* DefaultWeapon;
	class UClass* ScoreBoardType;
	class UClass* GameMenuType;
	class UClass* HUDType;
	class UClass* MapListType;
	class UClass* MutatorClass;
	class UClass* WaterZoneType;
	class UClass* GameReplicationInfoClass;
	FStringNoInit AdminPassword;
	FStringNoInit GamePassword;
	FStringNoInit BotMenuType;
	FStringNoInit RulesMenuType;
	FStringNoInit SettingsMenuType;
	FStringNoInit GameUMenuType;
	FStringNoInit MultiplayerUMenuType;
	FStringNoInit GameOptionsMenuType;
	FStringNoInit MapPrefix;
	FStringNoInit BeaconName;
	FStringNoInit SpecialDamageString;
	FStringNoInit FemSpecialDamageString;
	FStringNoInit ServerLogName;
	FStringNoInit LocalLogFileName;
	FStringNoInit WorldLogFileName;
	FStringNoInit LocalBatcherURL;
	FStringNoInit LocalBatcherParams;
	FStringNoInit LocalStatsURL;
	FStringNoInit WorldBatcherURL;
	FStringNoInit WorldBatcherParams;
	FStringNoInit WorldStatsURL;
	FStringNoInit SwitchLevelMessage;
	FStringNoInit DefaultPlayerName;
	FStringNoInit LeftMessage;
	FStringNoInit FemLeftMessage;
	FStringNoInit FailedSpawnMessage;
	FStringNoInit FailedPlaceMessage;
	FStringNoInit FailedTeamMessage;
	FStringNoInit NameChangedMessage;
	FStringNoInit EnteredMessage;
	FStringNoInit FemEnteredMessage;
	FStringNoInit GameName;
	FStringNoInit MaxedOutMessage;
	FStringNoInit MaxedOutSpectatorsMsg;
	FStringNoInit WrongPassword;
	FStringNoInit NeedPassword;
	FStringNoInit LastPreloginIP;
	FStringNoInit LastLoginPlayerNames;
	FStringNoInit LastPreloginIdentity;
	FStringNoInit LastPreloginIdent;
	FStringNoInit LastDisconnectReason;
	FStringNoInit PreloginErrorCode;
	FStringNoInit MaleGender;
	FStringNoInit FemaleGender;
	FStringNoInit AccessManagerClass;
	FStringNoInit InventoryDataIni;
	FStringNoInit ServerSceneClass;
	BYTE Difficulty;
	BITFIELD bNoMonsters:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bMuteSpectators:1;
	BITFIELD bHumansOnly:1;
	BITFIELD bRestartLevel:1;
	BITFIELD bPauseable:1;
	BITFIELD bCoopWeaponMode:1;
	BITFIELD bClassicDeathmessages:1;
	BITFIELD bLowGore:1;
	BITFIELD bCanChangeSkin:1;
	BITFIELD bTeamGame:1;
	BITFIELD bVeryLowGore:1;
	BITFIELD bNoCheating:1;
	BITFIELD bDeathMatch:1;
	BITFIELD bGameEnded:1;
	BITFIELD bOverTime:1;
	BITFIELD bLocalLog:1;
	BITFIELD bLocalLogQuery:1;
	BITFIELD bWorldLog:1;
	BITFIELD bLoggingGame:1;
	BITFIELD bBleedingEnabled:1;
	BITFIELD bBleedingDamageEnabled:1;
	BITFIELD bAllHealthStopsBleeding:1;
	BITFIELD bBandagesStopBleeding:1;
	BITFIELD bMessageAdminsAliases:1;
	BITFIELD bLogNewPlayerAliases:1;
	BITFIELD bLogDownloadsToClient:1;
	BITFIELD bHandleDownloadMessaging:1;
	BITFIELD bUseClientReplicationInfo:1;
	BITFIELD bShowRecoilAnimations:1;
	BITFIELD bCastShadow:1;
	BITFIELD bDecoShadows:1;
	BITFIELD bCastProjectorShadows:1;
	BITFIELD bUseRealtimeShadow:1;
	BITFIELD bMultiThreadedShadows:1;
	BITFIELD bNoWalkInAir:1;
	BITFIELD bProjectorDecals:1;
	BITFIELD bIsSavedGame:1;
	BITFIELD bAlwaysEnhancedSightCheck:1;
	BITFIELD bRestrictMoversRetriggering:1;
	BITFIELD bUseClassicBalance:1;
	BITFIELD bLoadPlayerClass:1;
	DECLARE_FUNCTION(execParseKillMessage);
	DECLARE_FUNCTION(execGetNetworkNumber);
	DECLARE_FUNCTION(execSaveTravelInventory);
	DECLARE_FUNCTION(execDeleteTravelInventory);
	DECLARE_FUNCTION(execLoadTravelInventory);
	DECLARE_FUNCTION(execSetHooksEnabled);
	DECLARE_FUNCTION(execAllSavedGames);
	DECLARE_FUNCTION(execSanitizeString);
	DECLARE_FUNCTION(execMakeColorCode);
	DECLARE_FUNCTION(execStripColorCodes);
	void eventConsoleMessage(const FString& Msg)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_ConsoleMessage),const_cast<FString*>(&Msg));
	}
	void eventAcceptInventory(class APawn* PlayerPawn)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_AcceptInventory),&PlayerPawn);
	}
	void eventOnPostTravel()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_OnPostTravel),NULL);
	}
	void eventOnPrepareTravel()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_OnPrepareTravel),NULL);
	}
	class AActor* eventSpawnTravelActor(class UClass* ActorClass, class AActor* DesiredOwner)
	{
		struct { class UClass* ActorClass; class AActor* DesiredOwner; class AActor* ReturnValue; } Parms = { ActorClass, DesiredOwner, 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_SpawnTravelActor),&Parms);
		return Parms.ReturnValue;
	}
	void eventModifyActorTravelList(class AActor* Other, TArray<class AActor*>& TravelList)
	{
		#if _USE_REF_PARMS
		struct { class AActor* Other; TArray<class AActor*>* TravelList; } Parms = { Other, &TravelList };
		#else
		struct { class AActor* Other; TArray<class AActor*> TravelList; } Parms = { Other, TravelList };
		#endif
		ProcessEvent(FindFunctionChecked(ENGINE_ModifyActorTravelList),&Parms);
		#if !_USE_REF_PARMS
		TravelList=Parms.TravelList;
		#endif
	}
	void eventModifyTravelList(class APawn* Other, TArray<class AActor*>& TravelList)
	{
		#if _USE_REF_PARMS
		struct { class APawn* Other; TArray<class AActor*>* TravelList; } Parms = { Other, &TravelList };
		#else
		struct { class APawn* Other; TArray<class AActor*> TravelList; } Parms = { Other, TravelList };
		#endif
		ProcessEvent(FindFunctionChecked(ENGINE_ModifyTravelList),&Parms);
		#if !_USE_REF_PARMS
		TravelList=Parms.TravelList;
		#endif
	}
	void eventOnGetTravelInventory(class APlayerPawn* Other, BITFIELD bDelete)
	{
		struct { class APlayerPawn* Other; BITFIELD bDelete; } Parms = { Other, (bDelete != 0) };
		ProcessEvent(FindFunctionChecked(ENGINE_OnGetTravelInventory),&Parms);
	}
	void eventPostLogin(class APlayerPawn* NewPlayer)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PostLogin),&NewPlayer);
	}
	class APlayerPawn* eventLogin(const FString& Portal, const FString& Options, FString& Error, class UClass* SpawnClass)
	{
		#if _USE_REF_PARMS
		struct { FString Portal; FString Options; FString* Error; class UClass* SpawnClass; class APlayerPawn* ReturnValue; } Parms = { Portal, Options, &Error, SpawnClass, 0 };
		#else
		struct { FString Portal; FString Options; FString Error; class UClass* SpawnClass; class APlayerPawn* ReturnValue; } Parms = { Portal, Options, Error, SpawnClass, 0 };
		#endif
		ProcessEvent(FindFunctionChecked(ENGINE_Login),&Parms);
		#if !_USE_REF_PARMS
		Error=Parms.Error;
		#endif
		return Parms.ReturnValue;
	}
	void eventNotifyURLFailed(const FString& URL, const FString& Error)
	{
		struct { FString URL; FString Error; } Parms = { URL, Error };
		ProcessEvent(FindFunctionChecked(ENGINE_NotifyURLFailed),&Parms);
	}
	BITFIELD eventUAllowDownload(class UNetConnection* Connection, const FString& FileName, INT FileSize)
	{
		struct { class UNetConnection* Connection; FString FileName; INT FileSize; BITFIELD ReturnValue; } Parms = { Connection, FileName, FileSize, 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_UAllowDownload),&Parms);
		return Parms.ReturnValue;
	}
	void eventULogPlayer(const FString& Options, FString& Error)
	{
		#if _USE_REF_PARMS
		struct { FString Options; FString* Error; } Parms = { Options, &Error };
		#else
		struct { FString Options; FString Error; } Parms = { Options, Error };
		#endif
		ProcessEvent(FindFunctionChecked(ENGINE_ULogPlayer),&Parms);
		#if !_USE_REF_PARMS
		Error=Parms.Error;
		#endif
	}
	void eventPreLogin(const FString& Options, FString& Error)
	{
		#if _USE_REF_PARMS
		struct { FString Options; FString* Error; } Parms = { Options, &Error };
		#else
		struct { FString Options; FString Error; } Parms = { Options, Error };
		#endif
		ProcessEvent(FindFunctionChecked(ENGINE_PreLogin),&Parms);
		#if !_USE_REF_PARMS
		Error=Parms.Error;
		#endif
	}
	FString eventGetBeaconText()
	{
		struct { FString ReturnValue; } Parms = {  };
		ProcessEvent(FindFunctionChecked(ENGINE_GetBeaconText),&Parms);
		return Parms.ReturnValue;
	}
	void eventInitGame(const FString& Options, FString& Error)
	{
		#if _USE_REF_PARMS
		struct { FString Options; FString* Error; } Parms = { Options, &Error };
		#else
		struct { FString Options; FString Error; } Parms = { Options, Error };
		#endif
		ProcessEvent(FindFunctionChecked(ENGINE_InitGame),&Parms);
		#if !_USE_REF_PARMS
		Error=Parms.Error;
		#endif
	}
	void eventDetailChange()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_DetailChange),NULL);
	}
	void eventGameEnding()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_GameEnding),NULL);
	}
	void eventGetSaveDetails(FSavedGameInfo& Info, INT Index)
	{
		#if _USE_REF_PARMS
		struct { FSavedGameInfo* Info; INT Index; } Parms = { &Info, Index };
		#else
		struct { FSavedGameInfo Info; INT Index; } Parms = { Info, Index };
		#endif
		ProcessEvent(FindFunctionChecked(ENGINE_GetSaveDetails),&Parms);
		#if !_USE_REF_PARMS
		Info=Parms.Info;
		#endif
	}
	DECLARE_CLASS(AGameInfo,AInfo,(CLASS_Config | CLASS_Localized),Engine)
	#include "AGameInfo.h"
};

class ENGINE_API AInternetInfo : public AInfo
{
public:
	DECLARE_CLASS(AInternetInfo,AInfo,CLASS_Transient,Engine)
	NO_DEFAULT_CONSTRUCTOR(AInternetInfo)
};

class ENGINE_API AReplicationInfo : public AInfo
{
public:
	class AReplicationInfo* NextRI GCC_PACK(INT_ALIGNMENT);
	DECLARE_CLASS(AReplicationInfo,AInfo,CLASS_Abstract,Engine)
	#include "AReplicationInfo.h"
};

class ENGINE_API AGameReplicationInfo : public AReplicationInfo
{
public:
	INT RemainingTime GCC_PACK(INT_ALIGNMENT);
	INT ElapsedTime;
	INT Region;
	FStringNoInit GameName;
	FStringNoInit ServerName;
	FStringNoInit ShortName;
	FStringNoInit AdminName;
	FStringNoInit AdminEmail;
	FStringNoInit MOTDLine1;
	FStringNoInit MOTDLine2;
	FStringNoInit MOTDLine3;
	FStringNoInit MOTDLine4;
	FStringNoInit GameEndedComments;
	BITFIELD bTeamGame:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD ShowMOTD:1;
	DECLARE_CLASS(AGameReplicationInfo,AReplicationInfo,(CLASS_Config | CLASS_NativeReplication | CLASS_NoUserCreate),Engine)
	#include "AGameReplicationInfo.h"
};

class ENGINE_API APlayerReplicationInfo : public AReplicationInfo
{
public:
	INT PlayerID GCC_PACK(INT_ALIGNMENT);
	INT TeamID;
	INT Ping;
	FLOAT Score;
	FLOAT Spree;
	class ADecoration* HasFlag;
	class UTexture* TalkTexture;
	class AZoneInfo* PlayerZone;
	class UClass* VoiceType;
	FStringNoInit PlayerName;
	FStringNoInit TeamName;
	BYTE Team;
	BITFIELD bIsFemale:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bIsABot:1;
	BITFIELD bFeigningDeath:1;
	BITFIELD bIsSpectator:1;
	DECLARE_CLASS(APlayerReplicationInfo,AReplicationInfo,(CLASS_NativeReplication | CLASS_NoUserCreate),Engine)
	#include "APlayerReplicationInfo.h"
};

class ENGINE_API ASavedMove : public AInfo
{
public:
	FLOAT TimeStamp GCC_PACK(INT_ALIGNMENT);
	FLOAT Delta;
	FLOAT DodgeClickTimer;
	FLOAT ExtraInfoTimeStamp;
	class ASavedMove* NextMove;
	FName NewState;
	class UClass* NewCustomPlayerState;
	FRotator PlayerRotation;
	FRotator ViewRotation;
	BYTE DodgeMove;
	BITFIELD bRun:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bDuck:1;
	BITFIELD bPressedJump:1;
	BITFIELD bSent:1;
	BITFIELD bIsCrouching:1;
	BITFIELD bIsReducedCrouch:1;
	DECLARE_CLASS(ASavedMove,AInfo,CLASS_Transient,Engine)
	NO_DEFAULT_CONSTRUCTOR(ASavedMove)
};

class ENGINE_API AStatLog : public AInfo
{
public:
	FLOAT TimeStamp GCC_PACK(INT_ALIGNMENT);
	FStringNoInit LocalStandard;
	FStringNoInit WorldStandard;
	FStringNoInit LogVersion;
	FStringNoInit LogInfoURL;
	FStringNoInit GameName;
	FStringNoInit GameCreator;
	FStringNoInit GameCreatorURL;
	FStringNoInit DecoderRingURL;
	FStringNoInit LocalLogDir;
	FStringNoInit WorldLogDir;
	FMD5Context* Context;
	BITFIELD bWorld:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_FUNCTION(execGetMapFileName);
	DECLARE_FUNCTION(execGetGMTRef);
	DECLARE_CLASS(AStatLog,AInfo,CLASS_NoUserCreate,Engine)
	#include "AStatLog.h"
};

class ENGINE_API AStatLogFile : public AStatLog
{
public:
	FStringNoInit StatLogFile GCC_PACK(INT_ALIGNMENT);
	FStringNoInit StatLogFinal;
	class FArchiveUnicodeWriterHelper* LogAr;
	BYTE Encoding;
	BITFIELD bWatermark:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_FUNCTION(execFileLog);
	DECLARE_FUNCTION(execFileFlush);
	DECLARE_FUNCTION(execGetPlayerChecksum);
	DECLARE_FUNCTION(execGetChecksum);
	DECLARE_FUNCTION(execWatermark);
	DECLARE_FUNCTION(execCloseLog);
	DECLARE_FUNCTION(execOpenLog);
	DECLARE_CLASS(AStatLogFile,AStatLog,CLASS_NoUserCreate,Engine)
	#include "AStatLogFile.h"
};

class ENGINE_API ATerrainInfo : public AInfo
{
public:
	INT SizeX GCC_PACK(INT_ALIGNMENT);
	INT SizeY;
	TArrayNoInit<FTerrainMaterial> TerrainMaterials;
	TArrayNoInit<FDecorationLayer> DecoLayers;
	FVector TerrainScale;
	FTerrainDataInfo TerrainData;
	class UTerrainMesh* TerrainPrimitive;
	struct FTerrainLight* TerrainLightData;
	BITFIELD bSimpleCollision:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bIsCeiling:1;
	DECLARE_CLASS(ATerrainInfo,AInfo,0,Engine)
	#include "ATerrainInfo.h"
};

class ENGINE_API ATimeDemo : public AInfo
{
public:
	INT FrameNum GCC_PACK(INT_ALIGNMENT);
	INT FrameLastSecond;
	INT FrameLastCycle;
	INT CycleCount;
	INT QuitAfterCycles;
	FLOAT TimePassed;
	FLOAT TimeDilation;
	FLOAT StartTime;
	FLOAT LastSecTime;
	FLOAT LastCycleTime;
	FLOAT LastFrameTime;
	FLOAT SquareSum;
	FLOAT LastSec;
	FLOAT MinFPS;
	FLOAT MaxFPS;
	class AInterpolationPoint* OldPoint;
	class ATimeDemoInterpolationPoint* NewPoint;
	class UConsole* Console;
	FStringNoInit CycleMessage;
	FStringNoInit CycleResult;
	FArchive* FileAr;
	BITFIELD bSaveToFile:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bFirstFrame:1;
	DECLARE_FUNCTION(execCloseFile);
	DECLARE_FUNCTION(execWriteToFile);
	DECLARE_FUNCTION(execOpenFile);
	DECLARE_CLASS(ATimeDemo,AInfo,CLASS_Transient,Engine)
	#include "ATimeDemo.h"
};

class ENGINE_API AVisibilityNotify : public AInfo
{
public:
	class AVisibilityNotify* NextNotify GCC_PACK(INT_ALIGNMENT);
	DECLARE_CLASS(AVisibilityNotify,AInfo,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(AVisibilityNotify)
};

class ENGINE_API AZoneInfo : public AInfo
{
public:
	INT ZonePlayerCount GCC_PACK(INT_ALIGNMENT);
	INT NumCarcasses;
	INT DamagePerSec;
	INT MaxCarcasses;
	INT FogMode;
	INT CutoffHz;
	INT MinLightingPolyCount;
	INT MaxLightingPolyCount;
	FLOAT MinWalkableZ;
	FLOAT ZoneGroundFriction;
	FLOAT ZoneFluidFriction;
	FLOAT ZoneTerminalVelocity;
	FLOAT ZoneTimeDilation;
	FLOAT FogDistanceStart;
	FLOAT FogDistance;
	FLOAT FadeTime;
	FLOAT FogDensity;
	FLOAT EnvironmentUScale;
	FLOAT EnvironmentVScale;
	FLOAT TexUPanSpeed;
	FLOAT TexVPanSpeed;
	FLOAT DirtyShadowLevel;
	FLOAT LightSharpnessFactor;
	FLOAT LightNormalMinAng;
	FLOAT SpeedOfSound;
	FLOAT LensFlareOffset[12];
	FLOAT LensFlareScale[12];
	class ALocationID* LocationID;
	class USound* EntrySound;
	class USound* ExitSound;
	class ASkyZoneInfo* SkyZone;
	class UTexture* EnvironmentMap;
	class UTexture* LensFlare[12];
	class UPortalModifier* CameraModifier;
	class AVisibilityNotify* VisNotify;
	FName ZoneTag;
	FName SkyZoneInfoTag;
	FName SkyZoneInfoLevelID;
	FName ZonePlayerEvent;
	FName DamageType;
	class UClass* EntryActor;
	class UClass* ExitActor;
	FVector ZoneGravity;
	FVector ZoneVelocity;
	FColor FogColor;
	FVector EnvironmentColor;
	FVector ViewFlash;
	FVector ViewFog;
	FStringNoInit DamageString;
	FStringNoInit ZoneName;
	FStringNoInit LocationStrings[4];
	BYTE AmbientBrightness;
	BYTE AmbientHue;
	BYTE AmbientSaturation;
	BYTE LightMapDetailLevels[4];
	BYTE MasterGain;
	BYTE Delay[6];
	BYTE Gain[6];
	BYTE EFXAmbients;
	BYTE MinLightCount;
	BYTE MaxLightCount;
	BITFIELD bWaterZone:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bFogZone:1;
	BITFIELD bKillZone:1;
	BITFIELD bNeutralZone:1;
	BITFIELD bGravityZone:1;
	BITFIELD bPainZone:1;
	BITFIELD bDestructive:1;
	BITFIELD bNoInventory:1;
	BITFIELD bMoveProjectiles:1;
	BITFIELD bReverbZone:1;
	BITFIELD bRaytraceReverb:1;
	BITFIELD bRepZoneProperties:1;
	BITFIELD bDistanceFogClips:1;
	BITFIELD bDistanceFog:1;
	BITFIELD bZoneBasedFog:1;
	DECLARE_FUNCTION(execZoneActors);
	void eventActorLeaving(class AActor* Other)
	{
		ProcessEvent(FindFunctionChecked(NAME_ActorLeaving),&Other);
	}
	void eventActorEntered(class AActor* Other)
	{
		ProcessEvent(FindFunctionChecked(NAME_ActorEntered),&Other);
	}
	void eventLinkToSkybox()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_LinkToSkybox),NULL);
	}
	DECLARE_CLASS(AZoneInfo,AInfo,(CLASS_Localized | CLASS_NativeReplication),Engine)
	#include "AZoneInfo.h"
};

class ENGINE_API ADynamicZoneInfo : public AZoneInfo
{
public:
	FLOAT CylinderSize GCC_PACK(INT_ALIGNMENT);
	FLOAT SphereSize;
	class ADynamicZoneInfo* NextDynamicZone;
	class AZoneInfo* MatchOnlyZone;
	FVector BoxMin;
	FVector BoxMax;
	FPlane BoundingSphere;
	BYTE ZoneAreaType;
	BITFIELD bUseRelativeToRotation:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bScriptEvent:1;
	BITFIELD bUpdateTouchers:1;
	BITFIELD eventFilterZone(FVector Position, class AActor* ZoneActor)
	{
		struct { FVector Position; class AActor* ZoneActor; BITFIELD ReturnValue; } Parms = { Position, ZoneActor, 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_FilterZone),&Parms);
		return Parms.ReturnValue;
	}
	DECLARE_CLASS(ADynamicZoneInfo,AZoneInfo,CLASS_Localized,Engine)
	#include "ADynamicZoneInfo.h"
};

class ENGINE_API ALevelInfo : public AZoneInfo
{
public:
	INT Year GCC_PACK(INT_ALIGNMENT);
	INT Month;
	INT Day;
	INT DayOfWeek;
	INT Hour;
	INT Minute;
	INT Second;
	INT Millisecond;
	INT RecommendedEnemies;
	INT RecommendedTeammates;
	INT HubStackLevel;
	INT AIProfile[8];
	INT EdBuildOpt;
	INT MaxCommonRadius;
	INT MaxCommonHeight;
	INT MinCommonHeight;
	INT MinCommonRadius;
	INT CommonRadius;
	INT HumanRadius;
	INT HumanHeight;
	FLOAT TimeDilation;
	FLOAT TimeSeconds;
	FLOAT RealTimeSeconds;
	FLOAT NetTimeSeconds;
	FLOAT LastDeltaTime;
	FLOAT LastRealDeltaTime;
	FLOAT LastActivityTime;
	FLOAT PlayerDoppler;
	FLOAT Brightness;
	FLOAT NextSwitchCountdown;
	FLOAT AvgAITime;
	FLOAT DemoTimeDilation;
	FLOAT ReplicatedTimeSeconds;
	class ULevelSummary* Summary;
	class UMusic* Song;
	class UMusic* backup_Song;
	class UTexture* Screenshot;
	class UTexture* DefaultTexture;
	class UTexture* WhiteTexture;
	class UTexture* TemplateLightTex;
	class AGameInfo* Game;
	class ANavigationPoint* NavigationPointList;
	class APawn* PawnList;
	class ASpawnNotify* SpawnNotify;
	class ADynamicZoneInfo* DynamicZonesList;
	class APlayerPawn* ReplicationTarget;
	class ALevelInfo* ChildLevel;
	class ALevelInfo* ParentLevel;
	class UClass* DefaultGameType;
	class UClass* FootprintManager;
	class UClass* RealCrouchInfoClass;
	TArrayNoInit<class UObject*> ObjList;
	TArrayNoInit<class UObject*> CleanupDestroyedNotify;
	TArrayNoInit<FName> SubLevels;
	FEdViewportInfo EdViewports[4];
	FStringNoInit Title;
	FStringNoInit Author;
	FStringNoInit IdealPlayerCount;
	FStringNoInit LevelEnterText;
	FStringNoInit LocalizedPkg;
	FStringNoInit Pauser;
	FStringNoInit VisibleGroups;
	FStringNoInit LockedGroups;
	FStringNoInit ComputerName;
	FStringNoInit EngineVersion;
	FStringNoInit EngineSubVersion;
	FStringNoInit MinNetVersion;
	FStringNoInit NextURL;
	BYTE SongSection;
	BYTE SongVolume;
	BYTE CdTrack;
	BYTE backup_SongSection;
	BYTE LevelAction;
	BYTE NetMode;
	BYTE ServerTravelType;
	BYTE MaxPortalDepth;
	BITFIELD bLonePlayer:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bBegunPlay:1;
	BITFIELD bPlayersOnly:1;
	BITFIELD bHighDetailMode:1;
	BITFIELD bDropDetail:1;
	BITFIELD bAggressiveLOD:1;
	BITFIELD bStartup:1;
	BITFIELD bHumansOnly:1;
	BITFIELD bNoCheating:1;
	BITFIELD bAllowFOV:1;
	BITFIELD bSupportsRealCrouching:1;
	BITFIELD bSupportsCrouchJump:1;
	BITFIELD bEnhancedIcePhysics:1;
	BITFIELD bSpecularLight:1;
	BITFIELD bDisableSpeclarLight:1;
	BITFIELD bNetworkTimeSeconds:1;
	BITFIELD bMirrorMode:1;
	BITFIELD bDisableRbPhysics:1;
	BITFIELD bDisableSubLevelRbPhys:1;
	BITFIELD bPauseRigidBodies:1;
	BITFIELD bRequireHighChannels:1;
	BITFIELD bShouldStasisLevel:1;
	BITFIELD bShouldChangeMusicTrack:1;
	BITFIELD bNextItems:1;
	BITFIELD bCheckWalkSurfaces:1;
	BITFIELD bUTZoneVelocity:1;
	BITFIELD bIsDemoPlayback:1;
	BITFIELD bIsDemoRecording:1;
	BITFIELD bPauseDemo:1;
	BITFIELD bPlayerSpawnTrigger:1;
	DECLARE_FUNCTION(execFindLevel);
	DECLARE_FUNCTION(execGetLevelInfo);
	DECLARE_FUNCTION(execGetLocalPlayerPawn);
	DECLARE_FUNCTION(execRigidBodiesEnabled);
	DECLARE_FUNCTION(execWakeUpLevel);
	DECLARE_FUNCTION(execGetSelectedObject);
	DECLARE_FUNCTION(execGetConIdentity);
	DECLARE_FUNCTION(execFreeObject);
	DECLARE_FUNCTION(execAllocateObj);
	DECLARE_FUNCTION(execGetLocZone);
	DECLARE_FUNCTION(execAllDownloaders);
	DECLARE_FUNCTION(execAllConnections);
	DECLARE_FUNCTION(execHasDownloaders);
	DECLARE_FUNCTION(execGetConOpts);
	DECLARE_FUNCTION(execGetConIP);
	DECLARE_FUNCTION(execGetConState);
	DECLARE_FUNCTION(execKickConnection);
	DECLARE_FUNCTION(execGetAddressURL);
	DECLARE_FUNCTION(execGetLocalURL);
	class APlayerPawn* eventSpawnClientCamera()
	{
		struct { class APlayerPawn* ReturnValue; } Parms = { 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_SpawnClientCamera),&Parms);
		return Parms.ReturnValue;
	}
	void eventServerTravel(const FString& URL, BITFIELD bItems)
	{
		struct { FString URL; BITFIELD bItems; } Parms = { URL, (bItems != 0) };
		ProcessEvent(FindFunctionChecked(ENGINE_ServerTravel),&Parms);
	}
	DECLARE_CLASS(ALevelInfo,AZoneInfo,(CLASS_Config | CLASS_Localized | CLASS_NativeReplication | CLASS_NoUserCreate),Engine)
	#include "ALevelInfo.h"
};

class ENGINE_API ASkyZoneInfo : public AZoneInfo
{
public:
	FVector RelativeMovementSpeed GCC_PACK(INT_ALIGNMENT);
	FVector RelativeOffset;
	DECLARE_CLASS(ASkyZoneInfo,AZoneInfo,CLASS_Localized,Engine)
	#include "ASkyZoneInfo.h"
};

class ENGINE_API AWarpZoneInfo : public AZoneInfo
{
public:
	INT iWarpZone GCC_PACK(INT_ALIGNMENT);
	INT iWarpNode;
	INT numDestinations;
	class AWarpZoneInfo* OtherSideActor;
	class UObject* OtherSideLevel;
	FName TargetLevelID;
	FName ThisTag;
	FCoords WarpCoords;
	FStringNoInit OtherSideURL;
	FStringNoInit Destinations[8];
	BITFIELD bNoTeleFrag:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_FUNCTION(execWarpBothCoords);
	DECLARE_FUNCTION(execUnWarp);
	DECLARE_FUNCTION(execWarp);
	void eventForceGenerate()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_ForceGenerate),NULL);
	}
	void eventGenerate()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_Generate),NULL);
	}
	DECLARE_CLASS(AWarpZoneInfo,AZoneInfo,CLASS_Localized,Engine)

	AWarpZoneInfo();
	INT GetWarpZoneNode();
	UBOOL IsWarpZone() const { return TRUE; }
};

class ENGINE_API AZoneUnion : public AZoneInfo
{
public:
	DECLARE_CLASS(AZoneUnion,AZoneInfo,(CLASS_Localized | CLASS_EditorOnly),Engine)
	NO_DEFAULT_CONSTRUCTOR(AZoneUnion)
};

class ENGINE_API AInventory : public AActor
{
public:
	INT Charge GCC_PACK(INT_ALIGNMENT);
	INT ArmorAbsorption;
	INT AbsorptionPriority;
	FLOAT RespawnTime;
	FLOAT PlayerViewScale;
	FLOAT BobDamping;
	FLOAT PickupViewScale;
	FLOAT ThirdPersonScale;
	FLOAT MaxDesireability;
	FLOAT MuzzleFlashScale;
	FLOAT DroppedDistance;
	class UMesh* PlayerViewMesh;
	class UMesh* PickupViewMesh;
	class UMesh* ThirdPersonMesh;
	class UTexture* StatusIcon;
	class AInventory* NextArmor;
	class AInventorySpot* myMarker;
	class UMesh* MuzzleFlashMesh;
	class UTexture* MuzzleFlashTexture;
	class USound* PickupSound;
	class USound* ActivateSound;
	class USound* DeActivateSound;
	class USound* RespawnSound;
	class UTexture* Icon;
	class AActor* Shadow;
	class ANavigationPoint* DroppedMarker;
	class AInventory* DroppedNext;
	FName PlayerLastTouched;
	FName ProtectionType1;
	FName ProtectionType2;
	FVector PlayerViewOffset;
	FStringNoInit PickupMessage;
	FStringNoInit ItemName;
	FStringNoInit ItemArticle;
	FStringNoInit M_Activated;
	FStringNoInit M_Selected;
	FStringNoInit M_Deactivated;
	BYTE AutoSwitchPriority;
	BYTE InventoryGroup;
	BYTE FlashCount;
	BYTE OldFlashCount;
	BYTE MuzzleFlashStyle;
	BITFIELD bActivatable:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bDisplayableInv:1;
	BITFIELD bActive:1;
	BITFIELD bSleepTouch:1;
	BITFIELD bHeldItem:1;
	BITFIELD bNoInventoryMarker:1;
	BITFIELD bRepMuzzleFlash:1;
	BITFIELD bRepPlayerView:1;
	BITFIELD bSteadyFlash3rd:1;
	BITFIELD bFirstFrame:1;
	BITFIELD bMuzzleFlashParticles:1;
	BITFIELD bToggleSteadyFlash:1;
	BITFIELD bSteadyToggle:1;
	BITFIELD bAmbientGlow:1;
	BITFIELD bInstantRespawn:1;
	BITFIELD bRotatingPickup:1;
	BITFIELD bIsAnArmor:1;
	DECLARE_FUNCTION(execRemoveFromNavigation);
	DECLARE_FUNCTION(execAddToNavigation);
	FLOAT eventBotDesireability(class APawn* Bot)
	{
		struct { class APawn* Bot; FLOAT ReturnValue; } Parms = { Bot, 0 };
		ProcessEvent(FindFunctionChecked(NAME_BotDesireability),&Parms);
		return Parms.ReturnValue;
	}
	DECLARE_CLASS(AInventory,AActor,(CLASS_Localized | CLASS_NativeReplication | CLASS_Abstract),Engine)
	#include "AInventory.h"
};

class ENGINE_API AWeapon : public AInventory
{
public:
	INT PickupAmmoCount GCC_PACK(INT_ALIGNMENT);
	INT FlashS;
	FLOAT MaxTargetRange;
	FLOAT FiringSpeed;
	FLOAT ProjectileSpeed;
	FLOAT AltProjectileSpeed;
	FLOAT aimerror;
	FLOAT shakemag;
	FLOAT shaketime;
	FLOAT shakevert;
	FLOAT AIRating;
	FLOAT RefireRate;
	FLOAT AltRefireRate;
	FLOAT FlashTime;
	FLOAT MuzzleScale;
	FLOAT FlashY;
	FLOAT FlashO;
	FLOAT FlashC;
	FLOAT FlashLength;
	FLOAT FlareOffset;
	class AAmmo* AmmoType;
	class AWeaponAttachment* Attachment;
	class USound* FireSound;
	class USound* AltFireSound;
	class USound* CockingSound;
	class USound* SelectSound;
	class USound* Misc1Sound;
	class USound* Misc2Sound;
	class USound* Misc3Sound;
	class UTexture* MFTexture;
	class UTexture* MuzzleFlare;
	FName MyDamageType;
	FName AltDamageType;
	class UClass* AmmoName;
	class UClass* ProjectileClass;
	class UClass* AltProjectileClass;
	class UClass* ThirdPersonAttachment;
	FVector FireOffset;
	FRotator AdjustedAim;
	FStringNoInit MessageNoAmmo;
	FStringNoInit DeathMessage;
	FStringNoInit FemDeathMessage;
	FStringNoInit FemKillMessage;
	BYTE ReloadCount;
	BYTE bMuzzleFlash;
	BITFIELD bPointing:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bInstantHit:1;
	BITFIELD bAltInstantHit:1;
	BITFIELD bWarnTarget:1;
	BITFIELD bAltWarnTarget:1;
	BITFIELD bWeaponUp:1;
	BITFIELD bChangeWeapon:1;
	BITFIELD bLockedOn:1;
	BITFIELD bSplashDamage:1;
	BITFIELD bCanThrow:1;
	BITFIELD bRecommendSplashDamage:1;
	BITFIELD bWeaponStay:1;
	BITFIELD bOwnsCrosshair:1;
	BITFIELD bHideWeapon:1;
	BITFIELD bMeleeWeapon:1;
	BITFIELD bRapidFire:1;
	BITFIELD bTossedOut:1;
	BITFIELD bBreakWeaponChange:1;
	BITFIELD bSetFlashTime:1;
	BITFIELD bDrawMuzzleFlash:1;
	DECLARE_CLASS(AWeapon,AInventory,(CLASS_Localized | CLASS_NativeReplication | CLASS_Abstract),Engine)
	#include "AWeapon.h"
};

class ENGINE_API AInventoryAttachment : public AActor
{
public:
	DECLARE_CLASS(AInventoryAttachment,AActor,CLASS_Transient,Engine)
	NO_DEFAULT_CONSTRUCTOR(AInventoryAttachment)
};

class ENGINE_API AWeaponAttachment : public AInventoryAttachment
{
public:
	UINT LastUpdateTime GCC_PACK(INT_ALIGNMENT);
	class AWeapon* WeaponOwner;
	class AWeaponMuzzleFlash* MyMuzzleFlash;
	BITFIELD bCopyDisplay:1 GCC_PACK(INT_ALIGNMENT);
	void eventLoopMuzzleFlash(BITFIELD bEnable)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_LoopMuzzleFlash),&bEnable);
	}
	void eventPlayMuzzleFlash()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PlayMuzzleFlash),NULL);
	}
	void eventSetWeaponOwner(class AWeapon* Other)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_SetWeaponOwner),&Other);
	}
	DECLARE_CLASS(AWeaponAttachment,AInventoryAttachment,CLASS_Transient,Engine)
	NO_DEFAULT_CONSTRUCTOR(AWeaponAttachment)
};

class ENGINE_API AWeaponMuzzleFlash : public AInventoryAttachment
{
public:
	BITFIELD bConstantMuzzle:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bStrobeMuzzle:1;
	BITFIELD bFlashTimer:1;
	BITFIELD bCurrentlyVisible:1;
	DECLARE_CLASS(AWeaponMuzzleFlash,AInventoryAttachment,CLASS_Transient,Engine)
	NO_DEFAULT_CONSTRUCTOR(AWeaponMuzzleFlash)
};

class ENGINE_API AKeypoint : public AActor
{
public:
	DECLARE_CLASS(AKeypoint,AActor,CLASS_Abstract,Engine)
	NO_DEFAULT_CONSTRUCTOR(AKeypoint)
};

class ENGINE_API AClipMarker : public AKeypoint
{
public:
	DECLARE_CLASS(AClipMarker,AKeypoint,CLASS_Transient,Engine)
	NO_DEFAULT_CONSTRUCTOR(AClipMarker)
};

class ENGINE_API ACollisionPlane : public AKeypoint
{
public:
	FLOAT CollisionBounds[4] GCC_PACK(INT_ALIGNMENT);
	BITFIELD bBlockZeroExtent:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bBlockNonZeroExtent:1;
	DECLARE_CLASS(ACollisionPlane,AKeypoint,0,Engine)
	#include "ACollisionPlane.h"
};

class ENGINE_API AInterpolationPoint : public AKeypoint
{
public:
	INT Position GCC_PACK(INT_ALIGNMENT);
	FLOAT RateModifier;
	FLOAT GameSpeedModifier;
	FLOAT FovModifier;
	FLOAT ScreenFlashScale;
	class AInterpolationPoint* Prev;
	class AInterpolationPoint* Next;
	FVector ScreenFlashFog;
	BITFIELD bEndOfPath:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bSkipNextPath:1;
	void eventLinkInterpolation()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_LinkInterpolation),NULL);
	}
	DECLARE_CLASS(AInterpolationPoint,AKeypoint,0,Engine)

	AInterpolationPoint() {}
	void NoteDuplicate( AActor* Src );
};

class ENGINE_API ALight : public AActor
{
public:
	TArrayNoInit<FName> ShadowMoverTags GCC_PACK(INT_ALIGNMENT);
	TArrayNoInit<FShadowMoverInfo> MoverShadowSurfs;
	DECLARE_CLASS(ALight,AActor,0,Engine)
	#include "ALight.h"
};

class ENGINE_API ADynamicCorona : public ALight
{
public:
	FLOAT MaxSize GCC_PACK(INT_ALIGNMENT);
	FLOAT DisplayDistance;
	FLOAT CoronaSize;
	FLOAT FadeOutDistance;
	FLOAT RollRate;
	FLOAT CoronaFadeTimeScale;
	FLOAT DirCoronaLength;
	FLOAT DirCoronaWide;
	FLOAT DirCoronaPullback;
	FLOAT DirCoronaMinDot;
	FLOAT DirCoronaMaxDot;
	class UTexture* DirTexture;
	TArrayNoInit<FLensFlare> LensFlares;
	FColor CoronaColor;
	FColor CloseDistanceColor;
	BYTE CoronaAttenuate;
	BITFIELD bEnabled:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bDirectionalCorona:1;
	BITFIELD bBrightnessDependent:1;
	BITFIELD bFlipUV:1;
	BITFIELD bRotateUV:1;
	BITFIELD bHideNormalCorona:1;
	DECLARE_CLASS(ADynamicCorona,ALight,0,Engine)
	#include "ADynamicCorona.h"
};

class ENGINE_API ASunlightCorona : public ALight
{
public:
	FLOAT BlindingScale GCC_PACK(INT_ALIGNMENT);
	FLOAT BlindingFOV;
	FLOAT MaxSkyDistance;
	FLOAT SunFadeTimeScale;
	FLOAT FlaresDisplayFov;
	class UTexture* SunlightTexture;
	FColor SunlightColor;
	FLensFlareCastType LensFlares[8];
	BITFIELD bMustMatchZone:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bRenderLensFlares:1;
	BITFIELD bUScriptRenderHandler:1;
	void eventRenderCorona(class UCanvas* Canvas, FLOAT DeltaTime, BITFIELD bContactToSky)
	{
		struct { class UCanvas* Canvas; FLOAT DeltaTime; BITFIELD bContactToSky; } Parms = { Canvas, DeltaTime, (bContactToSky != 0) };
		ProcessEvent(FindFunctionChecked(ENGINE_RenderCorona),&Parms);
	}
	DECLARE_CLASS(ASunlightCorona,ALight,0,Engine)
	#include "ASunlightCorona.h"
};

class ENGINE_API AMenu : public AActor
{
public:
	INT Selection GCC_PACK(INT_ALIGNMENT);
	INT MenuLength;
	class AMenu* ParentMenu;
	class APlayerPawn* PlayerOwner;
	FStringNoInit HelpMessage[26];
	FStringNoInit MenuList[26];
	FStringNoInit LeftString;
	FStringNoInit RightString;
	FStringNoInit CenterString;
	FStringNoInit EnabledString;
	FStringNoInit DisabledString;
	FStringNoInit MenuTitle;
	FStringNoInit YesString;
	FStringNoInit NoString;
	FStringNoInit OnString;
	FStringNoInit OffString;
	BITFIELD bConfigChanged:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bExitAllMenus:1;
	DECLARE_CLASS(AMenu,AActor,CLASS_Localized,Engine)
	NO_DEFAULT_CONSTRUCTOR(AMenu)
};

class ENGINE_API ANavigationPoint : public AActor
{
public:
	INT upstreamPaths[16] GCC_PACK(INT_ALIGNMENT);
	INT Paths[16];
	INT PrunedPaths[16];
	INT visitedWeight;
	INT bestPathWeight;
	INT cost;
	INT ExtraCost;
	INT PathSearchTag;
	INT ForcedPathSize;
	FLOAT MaxPathDistance;
	class ANavigationPoint* VisNoReachPaths[16];
	class AActor* RouteCache;
	class ANavigationPoint* nextNavigationPoint;
	class ANavigationPoint* nextOrdered;
	class ANavigationPoint* prevOrdered;
	class ANavigationPoint* startPath;
	class ANavigationPoint* previousPath;
	class AInventory* DroppedInvList;
	FName ownerTeam;
	FName ProscribedPaths[4];
	FName ForcedPaths[4];
	FComputedReachability* EditorData;
	BYTE PathDescription;
	BITFIELD taken:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bPlayerOnly:1;
	BITFIELD bEndPoint:1;
	BITFIELD bEndPointOnly:1;
	BITFIELD bSpecialCost:1;
	BITFIELD bOneWayPath:1;
	BITFIELD bAutoBuilt:1;
	BITFIELD bNoStrafeTo:1;
	BITFIELD bIsSpecialNode:1;
	DECLARE_FUNCTION(execRemoveReachSpec);
	DECLARE_FUNCTION(execEditReach);
	DECLARE_FUNCTION(execGenReachSpec);
	DECLARE_FUNCTION(execdescribeSpec);
	BYTE eventEdPathBuildExec(class ANavigationPoint* End, INT& ForcedDistance)
	{
		#if _USE_REF_PARMS
		struct { class ANavigationPoint* End; INT* ForcedDistance; BYTE ReturnValue; } Parms = { End, &ForcedDistance, 0 };
		#else
		struct { class ANavigationPoint* End; INT ForcedDistance; BYTE ReturnValue; } Parms = { End, ForcedDistance, 0 };
		#endif
		ProcessEvent(FindFunctionChecked(ENGINE_EdPathBuildExec),&Parms);
		#if !_USE_REF_PARMS
		ForcedDistance=Parms.ForcedDistance;
		#endif
		return Parms.ReturnValue;
	}
	BITFIELD eventAccept(class AActor* Incoming)
	{
		struct { class AActor* Incoming; BITFIELD ReturnValue; } Parms = { Incoming, 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_Accept),&Parms);
		return Parms.ReturnValue;
	}
	INT eventSpecialCost(class APawn* Seeker)
	{
		struct { class APawn* Seeker; INT ReturnValue; } Parms = { Seeker, 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_SpecialCost),&Parms);
		return Parms.ReturnValue;
	}
	DECLARE_CLASS(ANavigationPoint,AActor,0,Engine)
	#include "ANavigationPoint.h"
};

class ENGINE_API AButtonMarker : public ANavigationPoint
{
public:
	DECLARE_CLASS(AButtonMarker,ANavigationPoint,CLASS_NoUserCreate,Engine)
	NO_DEFAULT_CONSTRUCTOR(AButtonMarker)
};

class ENGINE_API AInventorySpot : public ANavigationPoint
{
public:
	class AInventory* markedItem GCC_PACK(INT_ALIGNMENT);
	DECLARE_CLASS(AInventorySpot,ANavigationPoint,CLASS_NoUserCreate,Engine)

	AInventorySpot() {}
	UBOOL IsValidOnImport() { return FALSE; }
	UBOOL IsInventorySpot() const {	return TRUE; }
	class AInventory* GetMarkedItem() const { return markedItem; }
};

class ENGINE_API APathNode : public ANavigationPoint
{
public:
	DECLARE_CLASS(APathNode,ANavigationPoint,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(APathNode)
};

class ENGINE_API APlayerStart : public ANavigationPoint
{
public:
	BYTE TeamNumber GCC_PACK(INT_ALIGNMENT);
	BITFIELD bSinglePlayerStart:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bCoopStart:1;
	BITFIELD bEnabled:1;
	DECLARE_CLASS(APlayerStart,ANavigationPoint,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(APlayerStart)
};

class ENGINE_API ATeleporter : public ANavigationPoint
{
public:
	FLOAT LastUdpTime GCC_PACK(INT_ALIGNMENT);
	class AActor* TriggerActor;
	class AActor* TriggerActor2;
	FName ProductRequired;
	FName TargetLevelID;
	FVector TargetVelocity;
	FStringNoInit URL;
	BYTE TeleportCount;
	BITFIELD bChangesVelocity:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bChangesYaw:1;
	BITFIELD bReversesX:1;
	BITFIELD bReversesY:1;
	BITFIELD bReversesZ:1;
	BITFIELD bEnabled:1;
	BITFIELD bUTRotationMode:1;
	BITFIELD bBackup_Enabled:1;
	DECLARE_CLASS(ATeleporter,ANavigationPoint,0,Engine)

	ATeleporter() {}
	void Serialize( FArchive& Ar );
};

class ENGINE_API ATriggerMarker : public ANavigationPoint
{
public:
	DECLARE_CLASS(ATriggerMarker,ANavigationPoint,CLASS_NoUserCreate,Engine)
	NO_DEFAULT_CONSTRUCTOR(ATriggerMarker)
};

class ENGINE_API AWarpZoneMarker : public ANavigationPoint
{
public:
	class AWarpZoneInfo* markedWarpZone GCC_PACK(INT_ALIGNMENT);
	class AActor* TriggerActor;
	class AActor* TriggerActor2;
	DECLARE_CLASS(AWarpZoneMarker,ANavigationPoint,CLASS_NoUserCreate,Engine)

	AWarpZoneMarker() {}
	UBOOL IsValidOnImport() { return FALSE; }
};

class ENGINE_API APawn : public AActor
{
public:
	INT DieCount GCC_PACK(INT_ALIGNMENT);
	INT ItemCount;
	INT KillCount;
	INT SecretCount;
	INT Spree;
	INT Health;
	FLOAT SightCounter;
	FLOAT PainTime;
	FLOAT SpeechTime;
	FLOAT AvgPhysicsTime;
	FLOAT MoveTimer;
	FLOAT DesiredSpeed;
	FLOAT MaxDesiredSpeed;
	FLOAT MeleeRange;
	FLOAT SerpentineDist;
	FLOAT SerpentineTime;
	FLOAT GroundSpeed;
	FLOAT WaterSpeed;
	FLOAT AirSpeed;
	FLOAT AccelRate;
	FLOAT JumpZ;
	FLOAT MaxStepHeight;
	FLOAT AirControl;
	FLOAT WalkingPct;
	FLOAT ShoveCollisionRadius;
	FLOAT MinHitWall;
	FLOAT Alertness;
	FLOAT Stimulus;
	FLOAT SightRadius;
	FLOAT PeripheralVision;
	FLOAT HearingThreshold;
	FLOAT HuntOffDistance;
	FLOAT LastSeenTime;
	FLOAT LastDamageTime;
	FLOAT BaseEyeHeight;
	FLOAT EyeHeight;
	FLOAT SplashTime;
	FLOAT OrthoZoom;
	FLOAT FovAngle;
	FLOAT ReducedDamagePct;
	FLOAT UnderWaterTime;
	FLOAT Skill;
	FLOAT SpecialPause;
	FLOAT noise1time;
	FLOAT noise1loudness;
	FLOAT noise2time;
	FLOAT noise2loudness;
	FLOAT LastPainSound;
	FLOAT CombatStyle;
	FLOAT SoundDampening;
	FLOAT DamageScaling;
	FLOAT OldMessageTime;
	FLOAT SightDistanceMulti;
	FLOAT TeleportHackTime;
	FLOAT BeaconOffset;
	FLOAT MaxFrobDistance;
	class ANavigationPoint* LastAnchor;
	class AActor* MoveTarget;
	class AActor* FaceTarget;
	class UPhysicsAnimation* PhysicsAnim;
	class APawn* Enemy;
	class UTexture* GroundTexture;
	class AWeapon* Weapon;
	class AWeapon* PendingWeapon;
	class AInventory* SelectedItem;
	class APawn* LastDamageInstigator;
	class AActor* SpecialGoal;
	class APawn* noise1other;
	class APawn* noise2other;
	class APawn* nextPawn;
	class USound* HitSound1;
	class USound* HitSound2;
	class USound* Land;
	class USound* Die;
	class USound* WaterStep;
	class ANavigationPoint* home;
	class ADecoration* carriedDecoration;
	class ANavigationPoint* RouteCache[16];
	class APlayerReplicationInfo* PlayerReplicationInfo;
	class AActor* BleedingActor;
	class AActor* Shadow;
	class AActor* FrobTarget;
	FName LastDamageType;
	FName ReducedDamageType;
	FName NextState;
	FName NextLabel;
	FName AlarmTag;
	FName SharedAlarmTag;
	FName PlayerReStartState;
	class UClass* DropWhenKilled;
	class UClass* VoiceType;
	class UClass* PlayerReplicationInfoClass;
	class UClass* Pawn_BloodsprayClass;
	class UClass* Pawn_BleedingClass;
	FPointRegion FootRegion;
	FPointRegion HeadRegion;
	FVector Destination;
	FVector Focus;
	FVector MovementStart;
	FVector LastReachTest;
	FVector LastSeenPos;
	FVector LastSeeingPos;
	FVector LastDamageHitLocation;
	FVector LastDamageMomentum;
	FRotator ViewRotation;
	FVector WalkBob;
	FVector Floor;
	FVector noise1spot;
	FVector noise2spot;
	FVector TransitFloor;
	FStringNoInit MenuName;
	FStringNoInit MenuNameDative;
	FStringNoInit NameArticle;
	FStringNoInit lastPhoneme;
	FStringNoInit nextPhoneme;
	BYTE Visibility;
	BYTE AttitudeToPlayer;
	BYTE Intelligence;
	BYTE bZoom;
	BYTE bRun;
	BYTE bLook;
	BYTE bDuck;
	BYTE bSnapLevel;
	BYTE bStrafe;
	BYTE bFire;
	BYTE bAltFire;
	BYTE bFreeLook;
	BYTE bExtra0;
	BYTE bExtra1;
	BYTE bExtra2;
	BYTE bExtra3;
	BYTE VoicePitch;
	BYTE SightCheckType;
	BITFIELD bBehindView:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bIsPlayer:1;
	BITFIELD bJustLanded:1;
	BITFIELD bUpAndOut:1;
	BITFIELD bIsWalking:1;
	BITFIELD bHitSlopedWall:1;
	BITFIELD bNeverSwitchOnPickup:1;
	BITFIELD bWarping:1;
	BITFIELD bUpdatingDisplay:1;
	BITFIELD bClientSimFall:1;
	BITFIELD bClientTick:1;
	BITFIELD bUseNoWalkInAir:1;
	BITFIELD bNoStopAtLedge:1;
	BITFIELD bPostRender2D:1;
	BITFIELD bShovePawns:1;
	BITFIELD bCanStrafe:1;
	BITFIELD bFixedStart:1;
	BITFIELD bReducedSpeed:1;
	BITFIELD bCanJump:1;
	BITFIELD bCanWalk:1;
	BITFIELD bCanSwim:1;
	BITFIELD bCanFly:1;
	BITFIELD bCanOpenDoors:1;
	BITFIELD bCanDoSpecial:1;
	BITFIELD bDrowning:1;
	BITFIELD bLOSflag:1;
	BITFIELD bFromWall:1;
	BITFIELD bHunting:1;
	BITFIELD bAvoidLedges:1;
	BITFIELD bStopAtLedges:1;
	BITFIELD bJumpOffPawn:1;
	BITFIELD bShootSpecial:1;
	BITFIELD bAutoActivate:1;
	BITFIELD bIsHuman:1;
	BITFIELD bIsFemale:1;
	BITFIELD bIsMultiSkinned:1;
	BITFIELD bCountJumps:1;
	BITFIELD bEnhancedSightCheck:1;
	BITFIELD bRepHealth:1;
	BITFIELD bDoAutoSerpentine:1;
	BITFIELD bIsCrawler:1;
	BITFIELD bIsBleeding:1;
	BITFIELD bIsAmbientCreature:1;
	BITFIELD bLastDamageSpawnedBlood:1;
	BITFIELD bIsSpeaking:1;
	BITFIELD bWasSpeaking:1;
	BITFIELD bNoPhysicsRotation:1;
	DECLARE_FUNCTION(execClientHearSound);
	DECLARE_FUNCTION(execStopWaiting);
	DECLARE_FUNCTION(execAllInventory);
	DECLARE_FUNCTION(execPickAnyTarget);
	DECLARE_FUNCTION(execPickTarget);
	DECLARE_FUNCTION(execRemovePawn);
	DECLARE_FUNCTION(execAddPawn);
	DECLARE_FUNCTION(execFindBestInventoryPath);
	DECLARE_FUNCTION(execWaitForLanding);
	DECLARE_FUNCTION(execFindStairRotation);
	DECLARE_FUNCTION(execPickWallAdjust);
	DECLARE_FUNCTION(execactorReachable);
	DECLARE_FUNCTION(execpointReachable);
	DECLARE_FUNCTION(execEAdjustJump);
	DECLARE_FUNCTION(execClearPaths);
	DECLARE_FUNCTION(execFindRandomDest);
	DECLARE_FUNCTION(execFindPathToward);
	DECLARE_FUNCTION(execFindPathTo);
	DECLARE_FUNCTION(execCanSee);
	DECLARE_FUNCTION(execLineOfSightTo);
	DECLARE_FUNCTION(execTurnToward);
	DECLARE_FUNCTION(execTurnTo);
	DECLARE_FUNCTION(execStrafeFacing);
	DECLARE_FUNCTION(execStrafeTo);
	DECLARE_FUNCTION(execMoveToward);
	DECLARE_FUNCTION(execMoveTo);
	void eventPostRender2D(class UCanvas* Canvas, FVector Pos)
	{
		struct { class UCanvas* Canvas; FVector Pos; } Parms = { Canvas, Pos };
		ProcessEvent(FindFunctionChecked(ENGINE_PostRender2D),&Parms);
	}
	void eventPainTimer()
	{
		ProcessEvent(FindFunctionChecked(NAME_PainTimer),NULL);
	}
	void eventSpeechTimer()
	{
		ProcessEvent(FindFunctionChecked(NAME_SpeechTimer),NULL);
	}
	void eventHeadZoneChange(class AZoneInfo* newHeadZone)
	{
		ProcessEvent(FindFunctionChecked(NAME_HeadZoneChange),&newHeadZone);
	}
	void eventFootZoneChange(class AZoneInfo* newFootZone)
	{
		ProcessEvent(FindFunctionChecked(NAME_FootZoneChange),&newFootZone);
	}
	void eventWalkTextureChange(class UTexture* Texture)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_WalkTextureChange),&Texture);
	}
	void eventEnemyNotVisible()
	{
		ProcessEvent(FindFunctionChecked(NAME_EnemyNotVisible),NULL);
	}
	void eventUpdateEyeHeight(FLOAT DeltaTime)
	{
		ProcessEvent(FindFunctionChecked(NAME_UpdateEyeHeight),&DeltaTime);
	}
	void eventSeePlayer(class AActor* Seen)
	{
		ProcessEvent(FindFunctionChecked(NAME_SeePlayer),&Seen);
	}
	void eventHearNoise(FLOAT Loudness, class AActor* NoiseMaker)
	{
		struct { FLOAT Loudness; class AActor* NoiseMaker; } Parms = { Loudness, NoiseMaker };
		ProcessEvent(FindFunctionChecked(NAME_HearNoise),&Parms);
	}
	void eventClientHearSound(class AActor* Actor, INT Id, class USound* S, FVector SoundLocation, FVector Parameters)
	{
		struct { class AActor* Actor; INT Id; class USound* S; FVector SoundLocation; FVector Parameters; } Parms = { Actor, Id, S, SoundLocation, Parameters };
		ProcessEvent(FindFunctionChecked(ENGINE_ClientHearSound),&Parms);
	}
	void eventLongFall()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_LongFall),NULL);
	}
	void eventPlayerTimeout()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PlayerTimeout),NULL);
	}
	void eventTeamMessage(class APlayerReplicationInfo* PRI, const FString& S, FName Type)
	{
		struct { class APlayerReplicationInfo* PRI; FString S; FName Type; } Parms = { PRI, S, Type };
		ProcessEvent(FindFunctionChecked(ENGINE_TeamMessage),&Parms);
	}
	void eventClientMessage(const FString& S, FName Type, BITFIELD bBeep)
	{
		struct { FString S; FName Type; BITFIELD bBeep; } Parms = { S, Type, (bBeep != 0) };
		ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage),&Parms);
	}
	void eventMayFall()
	{
		ProcessEvent(FindFunctionChecked(NAME_MayFall),NULL);
	}
	DECLARE_CLASS(APawn,AActor,(CLASS_Localized | CLASS_NativeReplication | CLASS_Abstract),Engine)
	#include "APawn.h"
};

class ENGINE_API APlayerPawn : public APawn
{
public:
	INT ShowFlags GCC_PACK(INT_ALIGNMENT);
	INT RendMap;
	INT Misc1;
	INT Misc2;
	INT shakemag;
	INT NetSpeed;
	INT LanSpeed;
	INT FogMode;
	FLOAT DodgeClickTimer;
	FLOAT DodgeClickTime;
	FLOAT Bob;
	FLOAT bobtime;
	FLOAT DesiredFlashScale;
	FLOAT ConstantGlowScale;
	FLOAT InstantFlash;
	FLOAT DesiredFOV;
	FLOAT DefaultFOV;
	FLOAT shaketimer;
	FLOAT shakevert;
	FLOAT maxshake;
	FLOAT verttimer;
	FLOAT MyAutoAim;
	FLOAT Handedness;
	FLOAT MainFOV;
	FLOAT ZoomLevel;
	FLOAT MouseSensitivity;
	FLOAT SmoothMouseX;
	FLOAT SmoothMouseY;
	FLOAT KbdAccel;
	FLOAT MouseSmoothThreshold;
	FLOAT CrouchHeightPct;
	FLOAT CrouchCheckTime;
	FLOAT SpecialCollisionHeight;
	FLOAT PrePivotZModifier;
	FLOAT AccumulatedHTurn;
	FLOAT AccumulatedVTurn;
	FLOAT DistanceFogDistance[2];
	FLOAT DistanceFogStart[2];
	FLOAT DistanceFogBlendTimer[2];
	FLOAT FogDensity;
	FLOAT aBaseX;
	FLOAT aBaseY;
	FLOAT aBaseZ;
	FLOAT aMouseX;
	FLOAT aMouseY;
	FLOAT aForward;
	FLOAT aTurn;
	FLOAT aStrafe;
	FLOAT aUp;
	FLOAT aLookUp;
	FLOAT aExtra4;
	FLOAT aExtra3;
	FLOAT aExtra2;
	FLOAT aExtra1;
	FLOAT aExtra0;
	FLOAT CurrentTimeStamp;
	FLOAT LastUpdateTime;
	FLOAT ServerTimeStamp;
	FLOAT TimeMargin;
	FLOAT MaxTimeMargin;
	FLOAT ProgressTimeOut;
	FLOAT TargetEyeHeight;
	class UPlayer* Player;
	class AActor* ViewTarget;
	class AHUD* myHUD;
	class AScoreBoard* Scoring;
	class UMusic* Song;
	class USound* JumpSound;
	class AZoneInfo* DistanceFogOld;
	class UPortalModifier* CameraModifier;
	class UPlayerInteraction* LocalInteractions;
	class ASavedMove* SavedMoves;
	class ASavedMove* FreeMoves;
	class AGameReplicationInfo* GameReplicationInfo;
	class AActor* CalcCameraActor;
	class AClientReplicationInfo* ClientReplicationInfo;
	class APlayerAffectorInfo* FirstPlayerAffector;
	class ACustomPlayerStateInfo* CustomPlayerStateInfo;
	class ARealCrouchInfo* RealCrouchInfo;
	class ALadderTrigger* ActiveLadder;
	FName WeaponPriority[30];
	class UClass* HUDType;
	class UClass* ScoringType;
	class UClass* CarcassType;
	class UClass* SpecialMenu;
	FVector FlashScale;
	FVector FlashFog;
	FVector CurrentFlashFog;
	FVector DesiredFlashFog;
	FVector ConstantGlowFog;
	FVector InstantFog;
	FPointRegion CameraRegion;
	FPlane DistanceFogColor;
	FPlane DistanceFogBlend;
	FColor ProgressColor[5];
	FRotator TargetViewRotation;
	FVector TargetWeaponViewOffset;
	FVector CalcCameraLocation;
	FRotator CalcCameraRotation;
	FStringNoInit Password;
	FStringNoInit DelayedCommand;
	FStringNoInit ProgressMessage[5];
	FStringNoInit QuickSaveString;
	FStringNoInit NoPauseMessage;
	FStringNoInit ViewingFrom;
	FStringNoInit OwnCamera;
	FStringNoInit FailedView;
	FStringNoInit CantChangeNameMsg;
	FStringNoInit ngWorldSecret;
	BYTE SongSection;
	BYTE SongVolume;
	BYTE CdTrack;
	BYTE Transition;
	BITFIELD bNetworkIncompability:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bAdmin:1;
	BITFIELD bLookUpStairs:1;
	BITFIELD bSnapToLevel:1;
	BITFIELD bAlwaysMouseLook:1;
	BITFIELD bKeyboardLook:1;
	BITFIELD bWasForward:1;
	BITFIELD bWasBack:1;
	BITFIELD bWasLeft:1;
	BITFIELD bWasRight:1;
	BITFIELD bEdgeForward:1;
	BITFIELD bEdgeBack:1;
	BITFIELD bEdgeLeft:1;
	BITFIELD bEdgeRight:1;
	BITFIELD bIsCrouching:1;
	BITFIELD bShakeDir:1;
	BITFIELD bAnimTransition:1;
	BITFIELD bIsTurning:1;
	BITFIELD bFrozen:1;
	BITFIELD bInvertMouse:1;
	BITFIELD bShowScores:1;
	BITFIELD bShowMenu:1;
	BITFIELD bSpecialMenu:1;
	BITFIELD bWokeUp:1;
	BITFIELD bPressedJump:1;
	BITFIELD bUpdatePosition:1;
	BITFIELD bDelayedCommand:1;
	BITFIELD bRising:1;
	BITFIELD bReducedVis:1;
	BITFIELD bCenterView:1;
	BITFIELD bMaxMouseSmoothing:1;
	BITFIELD bMouseZeroed:1;
	BITFIELD bReadyToPlay:1;
	BITFIELD bNoFlash:1;
	BITFIELD bNoVoices:1;
	BITFIELD bMessageBeep:1;
	BITFIELD bZooming:1;
	BITFIELD bSinglePlayer:1;
	BITFIELD bJustFired:1;
	BITFIELD bJustAltFired:1;
	BITFIELD bIsTyping:1;
	BITFIELD bFixedCamera:1;
	BITFIELD bMouseSmoothing:1;
	BITFIELD bRepTargetViewRotation:1;
	BITFIELD bNeverAutoSwitch:1;
	BITFIELD bIgnoreMusicChange:1;
	BITFIELD bIsReducedCrouch:1;
	BITFIELD bCanChangeBehindView:1;
	BITFIELD bForwardUserCommands:1;
	BITFIELD bSaveClientPlayerState:1;
	BITFIELD bDistanceFogEnabled:1;
	BITFIELD bBlendingDistanceFog:1;
	BITFIELD bConsoleCommandMessage:1;
	BITFIELD bIsSpectatorClass:1;
	DECLARE_FUNCTION(execGetNegotiatedVersion);
	DECLARE_FUNCTION(execCanNetworkObject);
	DECLARE_FUNCTION(execPasteFromClipboard);
	DECLARE_FUNCTION(execCopyToClipboard);
	DECLARE_FUNCTION(execConsoleCommand);
	DECLARE_FUNCTION(execGetCompileTime);
	DECLARE_FUNCTION(execGetClientSubVersion);
	DECLARE_FUNCTION(execGetEntryLevel);
	DECLARE_FUNCTION(execIsPressing);
	DECLARE_FUNCTION(execGetDefaultURL);
	DECLARE_FUNCTION(execUpdateURL);
	DECLARE_FUNCTION(execResetKeyboard);
	DECLARE_FUNCTION(execClientTravel);
	void eventPlayerCalcView(class AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation)
	{
		#if _USE_REF_PARMS
		struct { class AActor** ViewActor; FVector* CameraLocation; FRotator* CameraRotation; } Parms = { &ViewActor, &CameraLocation, &CameraRotation };
		#else
		struct { class AActor* ViewActor; FVector CameraLocation; FRotator CameraRotation; } Parms = { ViewActor, CameraLocation, CameraRotation };
		#endif
		ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcView),&Parms);
		#if !_USE_REF_PARMS
		ViewActor=Parms.ViewActor;
		CameraLocation=Parms.CameraLocation;
		CameraRotation=Parms.CameraRotation;
		#endif
	}
	void eventPlayerTick(FLOAT Time)
	{
		ProcessEvent(FindFunctionChecked(NAME_PlayerTick),&Time);
	}
	void eventUnPossess()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_UnPossess),NULL);
	}
	void eventPossess()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_Possess),NULL);
	}
	void eventPlayerInput(FLOAT DeltaTime)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PlayerInput),&DeltaTime);
	}
	void eventShowUpgradeMenu()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_ShowUpgradeMenu),NULL);
	}
	void eventPostRender(class UCanvas* Canvas)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Canvas);
	}
	void eventPreRender(class UCanvas* Canvas)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PreRender),&Canvas);
	}
	void eventUpdateDistanceFog()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_UpdateDistanceFog),NULL);
	}
	void eventPreClientTravel()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PreClientTravel),NULL);
	}
	void eventUPlayerListResponse(const FString& Resp, const FString& PlayerNm, INT Id, const FString& PlayerIP, const FString& ClientID)
	{
		struct { FString Resp; FString PlayerNm; INT Id; FString PlayerIP; FString ClientID; } Parms = { Resp, PlayerNm, Id, PlayerIP, ClientID };
		ProcessEvent(FindFunctionChecked(ENGINE_UPlayerListResponse),&Parms);
	}
	void eventClientTravel(const FString& URL, BYTE TravelType, BITFIELD bItems)
	{
		struct { FString URL; BYTE TravelType; BITFIELD bItems; } Parms = { URL, TravelType, (bItems != 0) };
		ProcessEvent(FindFunctionChecked(ENGINE_ClientTravel),&Parms);
	}
	DECLARE_CLASS(APlayerPawn,APawn,(CLASS_Config | CLASS_Localized | CLASS_NativeReplication),Engine)
	#include "APlayerPawn.h"
};

class ENGINE_API ACamera : public APlayerPawn
{
public:
	DECLARE_CLASS(ACamera,APlayerPawn,(CLASS_Transient | CLASS_Config | CLASS_Localized),Engine)
	#include "ACamera.h"
};

class ENGINE_API AScout : public APawn
{
public:
	DECLARE_CLASS(AScout,APawn,(CLASS_Transient | CLASS_Localized),Engine)
	NO_DEFAULT_CONSTRUCTOR(AScout)
};

class ENGINE_API AProjectile : public AActor
{
public:
	INT MomentumTransfer GCC_PACK(INT_ALIGNMENT);
	FLOAT Speed;
	FLOAT MaxSpeed;
	FLOAT Damage;
	FLOAT ExploWallOut;
	class USound* SpawnSound;
	class USound* ImpactSound;
	class USound* MiscSound;
	class AActor* LastHitActor;
	class AActor* Shadow;
	FName MyDamageType;
	class UClass* ExplosionDecal;
	BITFIELD bPostRender2D:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_FUNCTION(execHurtRadiusProj);
	void eventPostRender2D(class UCanvas* Canvas, FVector Pos)
	{
		struct { class UCanvas* Canvas; FVector Pos; } Parms = { Canvas, Pos };
		ProcessEvent(FindFunctionChecked(ENGINE_PostRender2D),&Parms);
	}
	DECLARE_CLASS(AProjectile,AActor,CLASS_Abstract,Engine)
	#include "AProjectile.h"
};

class ENGINE_API AProjector : public AActor
{
public:
	FLOAT MaxDistance GCC_PACK(INT_ALIGNMENT);
	FLOAT ProjectorScale;
	class UModel* SurfModel;
	class UTexture* ProjectTexture;
	TArrayNoInit<class AActor*> DecalActors;
	TArrayNoInit<INT> DecalNodes;
	FPlane FrustrumPlanes[6];
	FBoundingBox Box;
	FVector VisBox[8];
	FStaticProjector* StaticMapData;
	BYTE FOV;
	BYTE ProjectStyle;
	BITFIELD bProjectActors:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bProjectBSPBackfaces:1;
	BITFIELD bProjectMeshBackfaces:1;
	BITFIELD bProjectBSP:1;
	BITFIELD bGradualFade:1;
	BITFIELD bUseBetterActorAttach:1;
	BITFIELD bBuildStaticMap:1;
	BITFIELD bHasAttached:1;
	BITFIELD bProjecting:1;
	BITFIELD bStaticMap:1;
	BITFIELD bStaticMapBSP:1;
	DECLARE_FUNCTION(execDeattachAllActors);
	DECLARE_FUNCTION(execDeattachActor);
	DECLARE_FUNCTION(execAttachActor);
	DECLARE_FUNCTION(execDeattachPrjDecal);
	DECLARE_FUNCTION(execAttachPrjDecal);
	DECLARE_CLASS(AProjector,AActor,CLASS_NoUserCreate,Engine)
	#include "AProjector.h"
};

class ENGINE_API ASpawnNotify : public AActor
{
public:
	class ASpawnNotify* Next GCC_PACK(INT_ALIGNMENT);
	class UClass* ActorClass;
	class AActor* eventSpawnNotification(class AActor* A)
	{
		struct { class AActor* A; class AActor* ReturnValue; } Parms = { A, 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_SpawnNotification),&Parms);
		return Parms.ReturnValue;
	}
	DECLARE_CLASS(ASpawnNotify,AActor,CLASS_Abstract,Engine)
	NO_DEFAULT_CONSTRUCTOR(ASpawnNotify)
};

class ENGINE_API AStaticMeshActor : public AActor
{
public:
	class UStaticLightData* StaticLightD GCC_PACK(INT_ALIGNMENT);
	BITFIELD bBuildStaticLights:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bComputeUnlitColor:1;
	DECLARE_CLASS(AStaticMeshActor,AActor,CLASS_NoUserCreate,Engine)
	#include "AStaticMeshActor.h"
};

class ENGINE_API ATriggers : public AActor
{
public:
	DECLARE_CLASS(ATriggers,AActor,0,Engine)
	NO_DEFAULT_CONSTRUCTOR(ATriggers)
};

class ENGINE_API ATrigger : public ATriggers
{
public:
	FLOAT RepeatTriggerTime GCC_PACK(INT_ALIGNMENT);
	FLOAT ReTriggerDelay;
	FLOAT TriggerTime;
	FLOAT DamageThreshold;
	class AActor* TriggerActor;
	class AActor* TriggerActor2;
	FName TriggerLevelID;
	class UClass* ClassProximityType;
	FStringNoInit Message;
	BYTE TriggerType;
	BITFIELD bTriggerOnceOnly:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bInitiallyActive:1;
	BITFIELD BACKUP_InitActive:1;
	DECLARE_CLASS(ATrigger,ATriggers,CLASS_Localized,Engine)
	NO_DEFAULT_CONSTRUCTOR(ATrigger)
};

class ENGINE_API UAnimationNotify : public UObject
{
public:
	INT NumAnimFrames GCC_PACK(INT_ALIGNMENT);
	FLOAT VoiceVolume;
	FLOAT LIPSyncTime;
	FLOAT LIPSyncRate;
	class AActor* Owner;
	class USound* LIPSyncSound;
	FName OldAnimation;
	TArrayNoInit<FsAnimNotify> AnimationNotify;
	BITFIELD bInitialized:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bErrorOccured:1;
	DECLARE_FUNCTION(execStartLIPSyncTrack);
	void eventOnPlayVoiceSound(class USound* Sound, FLOAT Volume, FLOAT Pitch)
	{
		struct { class USound* Sound; FLOAT Volume; FLOAT Pitch; } Parms = { Sound, Volume, Pitch };
		ProcessEvent(FindFunctionChecked(ENGINE_OnPlayVoiceSound),&Parms);
	}
	void eventOnInit()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_OnInit),NULL);
	}
	void eventNotify(FLOAT DeltaTime, INT Num)
	{
		struct { FLOAT DeltaTime; INT Num; } Parms = { DeltaTime, Num };
		ProcessEvent(FindFunctionChecked(ENGINE_Notify),&Parms);
	}
	DECLARE_CLASS(UAnimationNotify,UObject,0,Engine)
	#include "UAnimationNotify.h"
};

class ENGINE_API UBitmap : public UObject
{
public:
	INT USize GCC_PACK(INT_ALIGNMENT);
	INT VSize;
	INT UClamp;
	INT VClamp;
	class UPalette* Palette;
	FColor MipZero;
	FColor MaxColor;
	BYTE Format;
	BYTE UBits;
	BYTE VBits;
	DECLARE_CLASS(UBitmap,UObject,CLASS_Abstract,Engine)
	#include "UBitmap.h"
};

class ENGINE_API UTexture : public UBitmap
{
public:
	UINT LastRenderedTime GCC_PACK(INT_ALIGNMENT);
	UINT RenderTag;
	INT MaxInitResolution;
	FLOAT Diffuse;
	FLOAT Specular;
	FLOAT Alpha;
	FLOAT DrawScale;
	FLOAT Friction;
	FLOAT MipMult;
	FLOAT SuperGlow;
	FLOAT MinFrameRate;
	FLOAT MaxFrameRate;
	FLOAT Accumulator;
	class UTexture* BumpMap;
	class UTexture* HeightMap;
	class UTexture* DetailTexture;
	class UTexture* MacroTexture;
	class UTexture* HDTexture;
	class UPortalModifier* PortalModifier;
	class USound* FootstepSound[6];
	class USound* HitSound;
	class UTexture* AnimNext;
	class UTexture* AnimCurrent;
	TArrayNoInit<FMipmap> Mips;
	TArrayNoInit<FMipmap> DecompMips;
	FColor PaletteTransform;
	FMipmap* SourceMip;
	FTextureInfo* TextureHandle;
	BYTE LODSet;
	BYTE PrimeCount;
	BYTE PrimeCurrent;
	BYTE PreviewMipmap;
	BYTE DecompFormat;
	BYTE SurfaceType;
	BYTE UClampMode;
	BYTE VClampMode;
	DWORD PolyFlags GCC_PACK(INT_ALIGNMENT);
	BITFIELD bHighColorQuality:1;
	BITFIELD bHighTextureQuality:1;
	BITFIELD bRealtime:1;
	BITFIELD bParametric:1;
	BITFIELD bRealtimeChanged:1;
	BITFIELD bHasComp:1;
	BITFIELD bFractical:1;
	BITFIELD bParmsDirty:1;
	DECLARE_CLASS(UTexture,UBitmap,(CLASS_RuntimeStatic | CLASS_SafeReplace | CLASS_NoUserCreate),Engine)
	#include "UTexture.h"
};

class ENGINE_API UScriptedTexture : public UTexture
{
public:
	class AActor* NotifyActor GCC_PACK(INT_ALIGNMENT);
	class UTexture* SourceTexture;
	FPortalRenderInfo PortalInfo;
	BYTE* LocalSourceBitmap;
	TMap< UPalette*, TArray< BYTE > >* PaletteMap;
	struct FScriptTexPortal* PortalPtr;
	BYTE DrawStyle;
	BYTE DrawOpacity;
	BITFIELD bUse32BitFormat:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bConstantRender:1;
	BITFIELD bClearScreen:1;
	BITFIELD bDrawFrame:1;
	DECLARE_FUNCTION(execDrawPortal);
	DECLARE_FUNCTION(execDeleteTexture);
	DECLARE_FUNCTION(execListTextures);
	DECLARE_FUNCTION(execLoadTexture);
	DECLARE_FUNCTION(execSaveTexture);
	DECLARE_FUNCTION(execCaptureScreenshot);
	DECLARE_FUNCTION(execSetDataString);
	DECLARE_FUNCTION(execGetDataString);
	DECLARE_FUNCTION(execInitImage);
	DECLARE_FUNCTION(execClearImage);
	DECLARE_FUNCTION(execTextSize);
	DECLARE_FUNCTION(execReplaceTexture);
	DECLARE_FUNCTION(execDrawColoredText);
	DECLARE_FUNCTION(execDrawText);
	DECLARE_FUNCTION(execDrawTile);
	void eventMain()
	{
		ProcessEvent(FindFunctionChecked(NAME_Main),NULL);
	}
	DECLARE_CLASS(UScriptedTexture,UTexture,CLASS_SafeReplace,Engine)
	#include "UScriptedTexture.h"
};

class ENGINE_API UShadowBitMap : public UTexture
{
public:
	FLOAT ShadowScale GCC_PACK(INT_ALIGNMENT);
	FLOAT PrevFadeDistance;
	class AActor* ProjectingActor;
	class UPalette* SecPalette;
	TArrayNoInit<BYTE> BackBuffer;
	FRotator ProjectDirection;
	AActor* LastActorRef;
	struct FShadowWorker* ThreadProc;
	BYTE Gradience;
	BYTE Softness;
	BYTE StaticLevel;
	BITFIELD bIsValid:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_FUNCTION(execSetActor);
	DECLARE_FUNCTION(execSetShadowRes);
	DECLARE_CLASS(UShadowBitMap,UTexture,CLASS_SafeReplace,Engine)
	#include "UShadowBitMap.h"
};

class ENGINE_API UZoneCurtain : public UTexture
{
public:
	INT InitSetting GCC_PACK(INT_ALIGNMENT);
	INT DrawDistance;
	FLOAT MaxDistance;
	FLOAT FadeDistance;
	FLOAT BackMaxDistance;
	FColor PortalColor;
	FColor BackPortalColor;
	BITFIELD bEnableBackside:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_CLASS(UZoneCurtain,UTexture,(CLASS_RuntimeStatic | CLASS_SafeReplace),Engine)
	#include "UZoneCurtain.h"
};

class ENGINE_API UCanvas : public UObject
{
public:
	INT OffsetDrawFlags GCC_PACK(INT_ALIGNMENT);
	INT Mirror;
	INT SizeX;
	INT SizeY;
	FLOAT SpaceX;
	FLOAT SpaceY;
	FLOAT OrgX;
	FLOAT OrgY;
	FLOAT ClipX;
	FLOAT ClipY;
	FLOAT CurX;
	FLOAT CurY;
	FLOAT Z;
	FLOAT CurYL;
	FLOAT FontScale;
	FLOAT ScaleFactor;
	FLOAT NeqScaleFactor;
	class UFont* Font;
	class UFont* SmallFont;
	class UFont* MedFont;
	class UFont* BigFont;
	class UFont* LargeFont;
	class UViewport* Viewport;
	TArrayNoInit<struct FCanvasScaler*> CanvasScalar;
	FColor DrawColor;
	FCoords RenderCoords;
	struct FSceneNode* Frame;
	class URenderBase* Render;
	BYTE Style;
	BYTE Recursion;
	BITFIELD bCenter:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bNoSmooth:1;
	BITFIELD bEnableFog:1;
	BITFIELD bZRangeHack:1;
	DECLARE_FUNCTION(execReset);
	DECLARE_FUNCTION(execClearCustomLightSources);
	DECLARE_FUNCTION(execAddCustomLightSource);
	DECLARE_FUNCTION(execSetCustomLighting);
	DECLARE_FUNCTION(execPopCanvasScale);
	DECLARE_FUNCTION(execPushCanvasScale);
	DECLARE_FUNCTION(execSetZTest);
	DECLARE_FUNCTION(execPopClipPlane);
	DECLARE_FUNCTION(execPushClipPlane);
	DECLARE_FUNCTION(execDrawRotatedTile);
	DECLARE_FUNCTION(execDrawTris);
	DECLARE_FUNCTION(execSetTile3DOffset);
	DECLARE_FUNCTION(execGetCameraCoords);
	DECLARE_FUNCTION(execDrawBox);
	DECLARE_FUNCTION(execDrawCircle);
	DECLARE_FUNCTION(execDrawPathNetwork);
	DECLARE_FUNCTION(execScreenToWorld);
	DECLARE_FUNCTION(execWorldToScreen);
	DECLARE_FUNCTION(execDraw3DLine);
	DECLARE_FUNCTION(execDraw2DLine);
	DECLARE_FUNCTION(execDrawPortal);
	DECLARE_FUNCTION(execDrawTileStretched);
	DECLARE_FUNCTION(execDrawClippedActor);
	DECLARE_FUNCTION(execTextSize);
	DECLARE_FUNCTION(execDrawTextClipped);
	DECLARE_FUNCTION(execDrawTileClipped);
	DECLARE_FUNCTION(execDrawActor);
	DECLARE_FUNCTION(execDrawTile);
	DECLARE_FUNCTION(execDrawText);
	DECLARE_FUNCTION(execStrLen);
	DECLARE_CLASS(UCanvas,UObject,CLASS_Transient,Engine)
	#include "UCanvas.h"
};

class ENGINE_API UClientPreloginScene : public UObject
{
public:
	TArrayNoInit<FString> PendingDownload GCC_PACK(INT_ALIGNMENT);
	FStringNoInit ServerAddress;
	FStringNoInit ServerMap;
	FStringNoInit ConnectionURL;
	class UNetConnection* NetConnection;
	DECLARE_FUNCTION(execSendMessage);
	class APlayerPawn* eventSpawnClientCamera(class ALevelInfo* NewLevel)
	{
		struct { class ALevelInfo* NewLevel; class APlayerPawn* ReturnValue; } Parms = { NewLevel, 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_SpawnClientCamera),&Parms);
		return Parms.ReturnValue;
	}
	void eventConnectionFailed(const FString& Reason)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_ConnectionFailed),const_cast<FString*>(&Reason));
	}
	void eventDownloadFailed(const FString& Reason)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_DownloadFailed),const_cast<FString*>(&Reason));
	}
	void eventDownloadProgress(INT Progress)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_DownloadProgress),&Progress);
	}
	void eventStartDownload(const FString& File, INT Size)
	{
		struct { FString File; INT Size; } Parms = { File, Size };
		ProcessEvent(FindFunctionChecked(ENGINE_StartDownload),&Parms);
	}
	void eventServerMessage(const FString& S)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_ServerMessage),const_cast<FString*>(&S));
	}
	void eventPostRender(class UCanvas* C)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&C);
	}
	void eventInit()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_Init),NULL);
	}
	DECLARE_CLASS(UClientPreloginScene,UObject,CLASS_Abstract,Engine)
	NO_DEFAULT_CONSTRUCTOR(UClientPreloginScene)
};

class ENGINE_API UConsole : public UObject, public FOutputDevice
{
public:
	INT HistoryTop GCC_PACK(INT_ALIGNMENT);
	INT HistoryBot;
	INT HistoryCur;
	INT Scrollback;
	INT NumLines;
	INT TopLine;
	INT TextLines;
	INT BorderSize;
	INT ConsoleLines;
	INT BorderLines;
	INT BorderPixels;
	INT TypingOffset;
	INT LastInputKey;
	FLOAT MsgTime;
	FLOAT MsgTick[64];
	FLOAT ConsolePos;
	FLOAT ConsoleDest;
	FLOAT FrameX;
	FLOAT FrameY;
	class UViewport* Viewport;
	class APlayerReplicationInfo* MsgPlayer[64];
	class UTexture* ConBackground;
	class UTexture* Border;
	class ATimeDemo* TimeDemo;
	FName MsgType[64];
	FStringNoInit TypedStr;
	FStringNoInit History[16];
	FStringNoInit MsgText[64];
	FStringNoInit MsgPRINames[64];
	FStringNoInit LoadingMessage;
	FStringNoInit SavingMessage;
	FStringNoInit ConnectingMessage;
	FStringNoInit PausedMessage;
	FStringNoInit PrecachingMessage;
	BYTE GlobalConsoleKey;
	BYTE GlobalWindowKey;
	BITFIELD bNoStuff:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bTyping:1;
	BITFIELD bTimeDemo:1;
	BITFIELD bNoDrawWorld:1;
	BITFIELD bValidKeyEvent:1;
	BITFIELD bConsoleCommandLog:1;
	DECLARE_FUNCTION(execConsoleCommand);
	void eventPreloginError(const FString& ServerAddr, FString& Error, const FString& FailCode)
	{
		#if _USE_REF_PARMS
		struct { FString ServerAddr; FString* Error; FString FailCode; } Parms = { ServerAddr, &Error, FailCode };
		#else
		struct { FString ServerAddr; FString Error; FString FailCode; } Parms = { ServerAddr, Error, FailCode };
		#endif
		ProcessEvent(FindFunctionChecked(ENGINE_PreloginError),&Parms);
		#if !_USE_REF_PARMS
		Error=Parms.Error;
		#endif
	}
	void eventPostRender(class UCanvas* C)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&C);
	}
	void eventNotifyLevelChange()
	{
		ProcessEvent(FindFunctionChecked(NAME_NotifyLevelChange),NULL);
	}
	void eventPreRender(class UCanvas* C)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PreRender),&C);
	}
	void eventTick(FLOAT Delta)
	{
		ProcessEvent(FindFunctionChecked(NAME_Tick),&Delta);
	}
	BITFIELD eventKeyEvent(BYTE Key, BYTE Action, FLOAT Delta)
	{
		struct { BYTE Key; BYTE Action; FLOAT Delta; BITFIELD ReturnValue; } Parms = { Key, Action, Delta, 0 };
		ProcessEvent(FindFunctionChecked(NAME_KeyEvent),&Parms);
		return Parms.ReturnValue;
	}
	BITFIELD eventKeyType(BYTE Key)
	{
		struct { BYTE Key; BITFIELD ReturnValue; } Parms = { Key, 0 };
		ProcessEvent(FindFunctionChecked(NAME_KeyType),&Parms);
		return Parms.ReturnValue;
	}
	void eventMessage(class APlayerReplicationInfo* PRI, const FString& Msg, FName N)
	{
		struct { class APlayerReplicationInfo* PRI; FString Msg; FName N; } Parms = { PRI, Msg, N };
		ProcessEvent(FindFunctionChecked(NAME_Message),&Parms);
	}
	void eventInitialized()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_Initialized),NULL);
	}
	DECLARE_CLASS(UConsole,UObject,(CLASS_Transient | CLASS_Config | CLASS_Localized),Engine)

	// Constructor.
	UConsole();

	// UConsole interface.
	virtual void _Init( UViewport* Viewport );
	virtual void PreRender( FSceneNode* Frame );
	virtual void PostRender( FSceneNode* Frame );
	virtual UBOOL GetDrawWorld();
	inline UBOOL GetbTyping() const
	{
		return bTyping;
	}
	inline BYTE GetConsoleKey() const
	{
		return GlobalConsoleKey;
	}
	inline BYTE GetWindowKey() const
	{
		return GlobalWindowKey;
	}
	
	// FOutputDevice interface.
	void Serialize( const TCHAR* Data, EName MsgType );
	UPlayer* GetUserContext() const;
};

class ENGINE_API UIK_SolverBase : public UObject
{
public:
	FLOAT TimerRate GCC_PACK(INT_ALIGNMENT);
	FLOAT TimerCounter;
	FName Tag;
	struct FSkelMeshInstance* MeshInstance;
	BITFIELD bEnabled:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bLimitToPawn:1;
	BITFIELD bPreviewMode:1;
	BITFIELD bPreviewMotion:1;
	BITFIELD bPreviewAxis:1;
	BITFIELD bBlendOut:1;
	DECLARE_FUNCTION(execSetEnabled);
	DECLARE_FUNCTION(execReset);
	DECLARE_CLASS(UIK_SolverBase,UObject,CLASS_Abstract,Engine)
	#include "UIK_SolverBase.h"
};

class ENGINE_API UIK_HeadTurn : public UIK_SolverBase
{
public:
	INT MaxAngYaw[2] GCC_PACK(INT_ALIGNMENT);
	INT MaxAngPitch[2];
	INT MaxSpineYaw[2];
	INT MaxSpinePitch[2];
	INT iHeadBone;
	INT iSpineBone;
	FLOAT RotationRate;
	FLOAT RotationAlpha;
	FLOAT OldAlpha;
	FName HeadBone;
	FName TopSpineBone;
	FVector ViewPosition;
	FRotator HeadBoneDir;
	FRotator CurrentTurn;
	BYTE NumSpineBones;
	BYTE RotationAxis;
	BYTE SpineRotationAxis;
	BITFIELD bOutofRangeForward:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bFlipYaw:1;
	BITFIELD bFlipPitch:1;
	BITFIELD bFlipSpineYaw:1;
	BITFIELD bFlipSpinePitch:1;
	DECLARE_CLASS(UIK_HeadTurn,UIK_SolverBase,0,Engine)
	#include "UIK_HeadTurn.h"
};

class ENGINE_API UIK_Limb : public UIK_SolverBase
{
public:
	INT iLimbBone GCC_PACK(INT_ALIGNMENT);
	INT iLowLimbBone;
	INT iHighLimbBone;
	FLOAT StretchLimit[2];
	FLOAT PrevScale;
	FLOAT AdjustAlpha;
	FLOAT OldAlpha;
	FName LimbBone;
	FVector Target;
	FVector LimbOffset;
	FRotator LowLimbDir;
	FRotator HighLimbDir;
	FVector JointBendDir;
	BITFIELD bAllowStretch:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bHasDoubleBones:1;
	BITFIELD bNoUpdate:1;
	BITFIELD bContact:1;
	DECLARE_CLASS(UIK_Limb,UIK_SolverBase,0,Engine)
	#include "UIK_Limb.h"
};

class ENGINE_API UIK_FootPlacement : public UIK_Limb
{
public:
	FLOAT GroundHeight GCC_PACK(INT_ALIGNMENT);
	FLOAT AdjustRenderZ;
	TArrayNoInit<FName> GroundAnimGroups;
	TArrayNoInit<FName> WalkAnimGroups;
	FRotator FootDir;
	FVector Floor;
	FVector TweenFloor;
	FVector TweenTarget;
	TSingleMap<FName>* StandGroups;
	TSingleMap<FName>* WalkGroups;
	const struct FMeshAnimSeq* PrevAnimName;
	BITFIELD bAnimStarted:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bCorrectAnim:1;
	BITFIELD bCheckGroundHeight:1;
	BITFIELD bPrimaryController:1;
	BITFIELD bHasGround:1;
	DECLARE_CLASS(UIK_FootPlacement,UIK_Limb,0,Engine)
	#include "UIK_FootPlacement.h"
};

class ENGINE_API UIK_LipSync : public UIK_SolverBase
{
public:
	INT JawBoneRot GCC_PACK(INT_ALIGNMENT);
	INT iJawBone;
	FLOAT VoiceVolume;
	FLOAT LIPSyncTime;
	FLOAT LIPSyncRate;
	FLOAT OldAlpha;
	class USound* LIPSyncSound;
	FName JawBone;
	BYTE JawRotationAxis;
	DECLARE_FUNCTION(execStartLIPSyncTrack);
	DECLARE_CLASS(UIK_LipSync,UIK_SolverBase,0,Engine)
	#include "UIK_LipSync.h"
};

class ENGINE_API ULevelSummary : public UObject
{
public:
	INT RecommendedEnemies GCC_PACK(INT_ALIGNMENT);
	INT RecommendedTeammates;
	FStringNoInit Title;
	FStringNoInit Author;
	FStringNoInit IdealPlayerCount;
	FStringNoInit LevelEnterText;
	DECLARE_CLASS(ULevelSummary,UObject,(CLASS_Localized | CLASS_RuntimeStatic),Engine)
	#include "ULevelSummary.h"
};

class ENGINE_API UPalette : public UObject
{
public:
	TArrayNoInit<FColor> Colors GCC_PACK(INT_ALIGNMENT);
	DECLARE_CLASS(UPalette,UObject,(CLASS_RuntimeStatic | CLASS_SafeReplace),Engine)
	#include "UPalette.h"
};

class ENGINE_API UPhysicsAnimation : public UObject
{
public:
	INT MaxYawDif GCC_PACK(INT_ALIGNMENT);
	INT OldYaw;
	FLOAT StillSpeedScale;
	FLOAT DodgeMoveSpeed;
	class APawn* PawnOwner;
	class UBoolProperty* CrouchProperty;
	FName OnAnimationChange;
	FName OnDoTurn;
	FName OnDodgeMove;
	FName CrouchFlagProperty;
	BYTE MovementDirCount;
	BYTE AnimationSeq;
	BYTE MovementDir;
	BYTE PrevAnimSeq;
	BYTE PrevMoveDir;
	BYTE TurnDirection;
	BYTE DodgeMove;
	BITFIELD bCanSwim:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bCanWalk:1;
	BITFIELD bCheckWalkSpeed:1;
	BITFIELD bCanCrouch:1;
	BITFIELD bCanFly:1;
	BITFIELD bCanJump:1;
	BITFIELD bIgnoreDead:1;
	BITFIELD bCheckYawStillOnly:1;
	BITFIELD bClientSideAnims:1;
	BITFIELD bServerSideAnims:1;
	BITFIELD bOnlyWhenRendered:1;
	BITFIELD bEnabled:1;
	BITFIELD bIsDodgeMove:1;
	BITFIELD bShouldInit:1;
	DECLARE_FUNCTION(execGetMoveDir);
	DECLARE_CLASS(UPhysicsAnimation,UObject,0,Engine)

	UPhysicsAnimation() {}
	void Init( class APawn* Pawn );
	void TickAnimations( FLOAT DeltaSeconds );
private:
	BYTE GetMovementDir() const;
};

class ENGINE_API UPhysicsObject : public UObject
{
public:
	DECLARE_CLASS(UPhysicsObject,UObject,(CLASS_SafeReplace | CLASS_Abstract),Engine)
	NO_DEFAULT_CONSTRUCTOR(UPhysicsObject)
};

class ENGINE_API UPX_PhysicsDataBase : public UPhysicsObject
{
public:
	class AActor* Actor GCC_PACK(INT_ALIGNMENT);
	TArrayNoInit<class UPXJ_BaseJoint*> Joints;
	FVector CustomGravity;
	BYTE ServerPhysics;
	BITFIELD bCustomGravity:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bDisableForces:1;
	BITFIELD bClientSimulate:1;
	BITFIELD bServerSimulate:1;
	BITFIELD bPhysicsEnabled:1;
	DECLARE_FUNCTION(execDeleteJoint);
	DECLARE_FUNCTION(execCreateJoint);
	DECLARE_FUNCTION(execSetMass);
	DECLARE_FUNCTION(execSetGravity);
	DECLARE_FUNCTION(execImpulse);
	DECLARE_FUNCTION(execSetAngularVelocity);
	DECLARE_FUNCTION(execGetAngularVelocity);
	DECLARE_FUNCTION(execIsSleeping);
	DECLARE_FUNCTION(execWakeUp);
	DECLARE_CLASS(UPX_PhysicsDataBase,UPhysicsObject,(CLASS_SafeReplace | CLASS_Abstract),Engine)

	UPX_PhysicsDataBase() {}
	
	virtual void DrawPreview(FSceneNode* Frame);
	virtual void InitPhysics(PX_SceneBase* Scene) {}
	virtual void ExitPhysics() {}
	virtual void ShutDown();
	virtual void InitJoints();
};

class ENGINE_API UPX_RigidBodyData : public UPX_PhysicsDataBase
{
public:
	FLOAT MaxAngularVelocity GCC_PACK(INT_ALIGNMENT);
	FLOAT MaxLinearVelocity;
	FLOAT AngularDamping;
	FLOAT LinearDamping;
	FLOAT WaterMaxAngularVelocitySc;
	FLOAT WaterMaxLinearVelocitySc;
	FLOAT WaterAngularDamping;
	FLOAT WaterLinearDamping;
	FLOAT MinImpactThreshold;
	FLOAT StayUprightRollResistAngle;
	FLOAT StayUprightPitchResistAngle;
	FLOAT StayUprightStiffness;
	FLOAT StayUprightDamping;
	class UPXC_CollisionShape* CollisionShape;
	TArrayNoInit<class UPX_Repulsor*> Repulsors;
	FVector COMOffset;
	FVector AngularVelocity;
	FVector InertiaTensor;
	FVector HitLocation;
	FVector HitNormal;
	BITFIELD bStartSleeping:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bCheckWallPenetration:1;
	BITFIELD bStayUpright:1;
	BITFIELD bWallContact:1;
	DECLARE_CLASS(UPX_RigidBodyData,UPX_PhysicsDataBase,CLASS_SafeReplace,Engine)

	UPX_RigidBodyData() {}
	void DrawPreview(FSceneNode* Frame);
	void InitPhysics(PX_SceneBase* Scene);
	void ExitPhysics();
	void Serialize( FArchive& Ar );
	void TraceRepulsors(FLOAT Delta);
	void ShutDown();
};

class ENGINE_API UPX_RagdollData : public UPX_RigidBodyData
{
public:
	class UPX_SkeletalBody* SkeletalPhysBody GCC_PACK(INT_ALIGNMENT);
	class USkeletalMesh* Mesh;
	DECLARE_CLASS(UPX_RagdollData,UPX_RigidBodyData,CLASS_SafeReplace,Engine)

	UPX_RagdollData() {}
	void DrawPreview(FSceneNode* Frame);
	void InitPhysics(PX_SceneBase* Scene);
	void ExitPhysics();
};

class ENGINE_API UPX_VehicleBase : public UPX_RigidBodyData
{
public:
	FLOAT EngineSpeed GCC_PACK(INT_ALIGNMENT);
	BITFIELD bDriving:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_FUNCTION(execSetDriving);
	DECLARE_CLASS(UPX_VehicleBase,UPX_RigidBodyData,(CLASS_SafeReplace | CLASS_Abstract),Engine)

	UPX_VehicleBase() {}
	virtual void SetDriveMode(UBOOL bDrive);
};

class ENGINE_API UPX_VehicleChopper : public UPX_VehicleBase
{
public:
	FLOAT MaxThrustForce GCC_PACK(INT_ALIGNMENT);
	FLOAT LongDamping;
	FLOAT MaxStrafeForce;
	FLOAT LatDamping;
	FLOAT MaxRiseForce;
	FLOAT UpDamping;
	FLOAT TurnTorqueFactor;
	FLOAT TurnTorqueMax;
	FLOAT TurnDamping;
	FLOAT MaxYawRate;
	FLOAT PitchTorqueFactor;
	FLOAT PitchTorqueMax;
	FLOAT PitchDamping;
	FLOAT RollTorqueTurnFactor;
	FLOAT RollTorqueStrafeFactor;
	FLOAT RollTorqueMax;
	FLOAT RollDamping;
	FLOAT MaxRandForce;
	FLOAT RandForceInterval;
	FLOAT StallZ;
	FLOAT CurrentThrust;
	FLOAT CurrentStrafe;
	FLOAT CurrentRise;
	FVector CurrentDirection;
	DECLARE_CLASS(UPX_VehicleChopper,UPX_VehicleBase,CLASS_SafeReplace,Engine)

	UPX_VehicleChopper() {}
	void InitPhysics(PX_SceneBase* Scene);
};

class ENGINE_API UPX_VehicleHover : public UPX_VehicleBase
{
public:
	FLOAT HoverSoftness GCC_PACK(INT_ALIGNMENT);
	FLOAT HoverCheckDist;
	FLOAT MaxThrustForce;
	FLOAT LongDamping;
	FLOAT MaxStrafeForce;
	FLOAT LatDamping;
	FLOAT TurnTorqueFactor;
	FLOAT TurnTorqueMax;
	FLOAT TurnDamping;
	FLOAT MaxYawRate;
	FLOAT PitchTorqueFactor;
	FLOAT PitchTorqueMax;
	FLOAT PitchDamping;
	FLOAT RollTorqueTurnFactor;
	FLOAT RollTorqueStrafeFactor;
	FLOAT RollTorqueMax;
	FLOAT RollDamping;
	FLOAT CurrentThrust;
	FLOAT CurrentStrafe;
	TArrayNoInit<FVector> ThrusterOffsets;
	FVector CurrentDirection;
	DECLARE_CLASS(UPX_VehicleHover,UPX_VehicleBase,CLASS_SafeReplace,Engine)

	UPX_VehicleHover() {}
	void DrawPreview(FSceneNode* Frame);
	void InitPhysics(PX_SceneBase* Scene);
};

class ENGINE_API UPX_VehiclePlane : public UPX_VehicleBase
{
public:
	FLOAT AirFactor GCC_PACK(INT_ALIGNMENT);
	FLOAT MaxStrafe;
	FLOAT MaxThrust;
	FLOAT ThrustAcceleration;
	FLOAT HoverSoftness;
	FLOAT HoverCheckDist;
	FLOAT PitchTorque;
	FLOAT PitchDamping;
	FLOAT BankTorque;
	FLOAT BankDamping;
	FLOAT TakeoffSpeed;
	FLOAT CurrentThrust;
	FLOAT CurrentStrafe;
	TArrayNoInit<FVector> ThrusterOffsets;
	FInterpCurve LiftCoefficientCurve;
	FInterpCurve DragCoefficientCurve;
	FVector2D CurrentTurn;
	BITFIELD bIsOnGround:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bIsFlying:1;
	DECLARE_CLASS(UPX_VehiclePlane,UPX_VehicleBase,CLASS_SafeReplace,Engine)

	UPX_VehiclePlane() {}
	void DrawPreview(FSceneNode* Frame);
	void InitPhysics(PX_SceneBase* Scene);
};

class ENGINE_API UPX_VehicleTreaded : public UPX_VehicleBase
{
public:
	FLOAT TreadRadius GCC_PACK(INT_ALIGNMENT);
	FLOAT TreadRestitution;
	FLOAT ThrustSpeed;
	FLOAT MaxThrust;
	FLOAT SteerTorque;
	FLOAT MaxSteerTorque;
	FLOAT ForwardDampFactor;
	FLOAT TurnDampFactor;
	FLOAT LateralDampFactor;
	FLOAT SteerDampFactor;
	FLOAT PitchTorqueFactor;
	FLOAT PitchDampFactor;
	FLOAT BankTorqueFactor;
	FLOAT BankDampFactor;
	FLOAT ParkFriction;
	FLOAT CurrentThrust;
	FLOAT CurrentTurn;
	TArrayNoInit<FVector> TreadOffsets;
	DECLARE_CLASS(UPX_VehicleTreaded,UPX_VehicleBase,CLASS_SafeReplace,Engine)

	UPX_VehicleTreaded() {}
	void DrawPreview(FSceneNode* Frame);
	void InitPhysics(PX_SceneBase* Scene);
};

class ENGINE_API UPX_VehicleWheeled : public UPX_VehicleBase
{
public:
	FLOAT WheelRadius GCC_PACK(INT_ALIGNMENT);
	FLOAT WheelRestitution;
	FLOAT WheelFriction;
	FLOAT SteeringValue;
	FLOAT Acceleration;
	FLOAT DeaccelRate;
	FLOAT SlipCorrection;
	FLOAT AngularCorrection;
	FLOAT AngularSpeed;
	TArrayNoInit<FVehicleWheel> Wheels;
	FVector Torque;
	BYTE BreakMode;
	DECLARE_FUNCTION(execSetWheelFriction);
	DECLARE_FUNCTION(execSetBreakMode);
	DECLARE_CLASS(UPX_VehicleWheeled,UPX_VehicleBase,CLASS_SafeReplace,Engine)

	UPX_VehicleWheeled() {}
	void DrawPreview(FSceneNode* Frame);
	void InitPhysics(PX_SceneBase* Scene);
	virtual void InitInnerPx(PX_SceneBase* Scene, PX_PhysicsObject* P);
	void SetBreakMode(BYTE Mode);
};

class ENGINE_API UPX_VehicleWheeledAuto : public UPX_VehicleWheeled
{
public:
	FLOAT TipRollingRate GCC_PACK(INT_ALIGNMENT);
	FLOAT TipRollingSpeed;
	FLOAT ChassisTorqueScale;
	FLOAT ChassisTorqueSpeed;
	FLOAT CurrentGas;
	FLOAT CurrentSteering;
	FInterpCurve AccelFunc;
	FInterpCurve ReverseFunc;
	FInterpCurve WheelSteerFunc;
	FInterpCurve WheelSlipFunc;
	BITFIELD CurrentHandbrake:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_CLASS(UPX_VehicleWheeledAuto,UPX_VehicleWheeled,CLASS_SafeReplace,Engine)

	UPX_VehicleWheeledAuto() {}
	void InitInnerPx(PX_SceneBase* Scene, PX_PhysicsObject* P);
};

class ENGINE_API UPX_Repulsor : public UPhysicsObject
{
public:
	FLOAT Distance GCC_PACK(INT_ALIGNMENT);
	FLOAT RepulsorSize;
	FLOAT Softness;
	FLOAT MaxUpForce;
	FLOAT SuspenseOffset;
	FVector Offset;
	FVector Direction;
	FVector HitLocation;
	FVector HitNormal;
	PX_ContactConstraint* ConstraintData;
	BITFIELD bOnlyBlockingActors:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bCollidingActors:1;
	BITFIELD bRepulseDown:1;
	BITFIELD bRepulseWater:1;
	BITFIELD bEnabled:1;
	BITFIELD bContact:1;
	DECLARE_CLASS(UPX_Repulsor,UPhysicsObject,CLASS_SafeReplace,Engine)

	UPX_Repulsor() {}
	void Destroy();
	void Draw( AActor* Owner, struct FSceneNode* Frame );
	void ShutDown();
};

class ENGINE_API UPX_SkeletalBody : public UPhysicsObject
{
public:
	TArrayNoInit<FSkeletalBodyPart> BodyParts GCC_PACK(INT_ALIGNMENT);
	TArrayNoInit<FSkeletalBonePair> DisableCollision;
	DECLARE_CLASS(UPX_SkeletalBody,UPhysicsObject,(CLASS_RuntimeStatic | CLASS_SafeReplace),Engine)

	static INT iDrawBody;
	static USkeletalMesh* RefSkel;
	UPX_SkeletalBody() {}
	void DrawPreview( FSceneNode* Frame, USkeletalMesh* Mesh, AActor* Actor );
	void onPropertyChange(UProperty* Property, UProperty* OuterProperty);
	void onPropertyFocus(UProperty* Property, UProperty* OuterProperty, INT ArrayIndex);
	void onEditSubObject(UObject* Obj);
};

class ENGINE_API UPXC_CollisionShape : public UPhysicsObject
{
public:
	FLOAT Friction GCC_PACK(INT_ALIGNMENT);
	FLOAT Restitution;
	FVector Offset;
	FRotator RotOffset;
	BITFIELD bContactReport:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_CLASS(UPXC_CollisionShape,UPhysicsObject,(CLASS_SafeReplace | CLASS_Abstract),Engine)

	UPXC_CollisionShape() {}
	virtual void DrawPreview(FSceneNode* Frame, class AActor* Owner) {}
	virtual void ApplyShape( struct PX_PhysicsObject* Object, const FVector& Scale );
	virtual UBOOL IsValidShape() const
	{
		return FALSE;
	}
};

class ENGINE_API UPXC_BoxCollision : public UPXC_CollisionShape
{
public:
	FVector Extent GCC_PACK(INT_ALIGNMENT);
	DECLARE_CLASS(UPXC_BoxCollision,UPXC_CollisionShape,CLASS_SafeReplace,Engine)

	UPXC_BoxCollision() {}
	void DrawPreview(FSceneNode* Frame, class AActor* Owner);
	void ApplyShape( struct PX_PhysicsObject* Object, const FVector& Scale );
	UBOOL IsValidShape() const
	{
		return TRUE;
	}
};

class ENGINE_API UPXC_BrushCollision : public UPXC_CollisionShape
{
public:
	DECLARE_CLASS(UPXC_BrushCollision,UPXC_CollisionShape,CLASS_SafeReplace,Engine)

	UPXC_BrushCollision() {}
	void ApplyShape( struct PX_PhysicsObject* Object, const FVector& Scale );
	UBOOL IsValidShape() const;
};

class ENGINE_API UPXC_CapsuleCollision : public UPXC_CollisionShape
{
public:
	FLOAT Height GCC_PACK(INT_ALIGNMENT);
	FLOAT Radius;
	DECLARE_CLASS(UPXC_CapsuleCollision,UPXC_CollisionShape,CLASS_SafeReplace,Engine)

	UPXC_CapsuleCollision() {}
	void DrawPreview(FSceneNode* Frame, class AActor* Owner);
	void ApplyShape( struct PX_PhysicsObject* Object, const FVector& Scale );
	UBOOL IsValidShape() const
	{
		return TRUE;
	}
};

class ENGINE_API UPXC_MeshCollision : public UPXC_CollisionShape
{
public:
	class UMesh* Mesh GCC_PACK(INT_ALIGNMENT);
	FVector Size;
	BITFIELD bUseConvex:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_CLASS(UPXC_MeshCollision,UPXC_CollisionShape,CLASS_SafeReplace,Engine)

	UPXC_MeshCollision() {}
	void DrawPreview(FSceneNode* Frame, class AActor* Owner);
	void ApplyShape( struct PX_PhysicsObject* Object, const FVector& Scale );
	UBOOL IsValidShape() const;
};

class ENGINE_API UPXC_MultiCollision : public UPXC_CollisionShape
{
public:
	TArrayNoInit<class UPXC_CollisionShape*> Shapes GCC_PACK(INT_ALIGNMENT);
	DECLARE_CLASS(UPXC_MultiCollision,UPXC_CollisionShape,CLASS_SafeReplace,Engine)

	UPXC_MultiCollision() {}
	void DrawPreview(FSceneNode* Frame, class AActor* Owner);
	void ApplyShape( struct PX_PhysicsObject* Object, const FVector& Scale );
	UBOOL IsValidShape() const;
};

class ENGINE_API UPXC_SphereCollision : public UPXC_CollisionShape
{
public:
	FLOAT Radius GCC_PACK(INT_ALIGNMENT);
	DECLARE_CLASS(UPXC_SphereCollision,UPXC_CollisionShape,CLASS_SafeReplace,Engine)

	UPXC_SphereCollision() {}
	void DrawPreview(FSceneNode* Frame, class AActor* Owner);
	void ApplyShape( struct PX_PhysicsObject* Object, const FVector& Scale );
	UBOOL IsValidShape() const
	{
		return TRUE;
	}
};

class ENGINE_API UPXJ_BaseJoint : public UPhysicsObject
{
public:
	FLOAT MaxAllowedForce GCC_PACK(INT_ALIGNMENT);
	FLOAT MaxAllowedTorque;
	class UPX_PhysicsDataBase* Owner;
	class AActor* JoinedActor;
	FName JoinedBoneA;
	FName JoinedBoneB;
	FVector JointOffset;
	FRotator JointAngle;
	FVector BaseOffset;
	FRotator BaseRotOffset;
	FCoords LocalCoordsA;
	FCoords LocalCoordsB;
	FCoords WorldCoords;
	PX_JointObject* PhysicsData;
	BITFIELD bAbsoluteOffset:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bDisabled:1;
	BITFIELD bCalcCoords:1;
	BITFIELD bPhysicsEnabled:1;
	DECLARE_FUNCTION(execUpdateCoords);
	DECLARE_FUNCTION(execSetJointOffset);
	DECLARE_FUNCTION(execCalcCoords);
	DECLARE_FUNCTION(execSetJoinedActor);
	DECLARE_FUNCTION(execSetDisabled);
	DECLARE_CLASS(UPXJ_BaseJoint,UPhysicsObject,(CLASS_SafeReplace | CLASS_Abstract),Engine)

	UPXJ_BaseJoint() {}
	
	void PostLoad();
	void onPropertyChange(UProperty* Property, UProperty* OuterProperty);
	void Destroy();
	
	void Initialize();
	void ShutDown();
	void SetDisabled( UBOOL bDisable );
	
	virtual void UpdateCoords( UBOOL bOnlyWorld );
	void OtherSidePhysics( UBOOL bExit );
	void OtherSideDestroyed();
	void SetJoinedActor( AActor* Other );
	void DrawPreview( FSceneNode* Frame );
	
	virtual UBOOL InitJoint( PX_JointObject& Joint, const FCoords& CA, const FCoords& CB ) { return FALSE; }
	virtual void DrawLimitations( FSceneNode* Frame, const FCoords& C );
};

class ENGINE_API UPXJ_ConstraintJoint : public UPXJ_BaseJoint
{
public:
	FLOAT LinearDamping GCC_PACK(INT_ALIGNMENT);
	FLOAT LinearStiffness;
	FLOAT AngularDamping;
	FLOAT AngularStiffness;
	FCC_LimitType XAxis;
	FCC_LimitType YAxis;
	FCC_LimitType ZAxis;
	FCC_LimitType ConeLimit;
	FCC_LimitType TwistLimit;
	FCC_DistanceType DistanceLimit;
	FVector LinearStiffnessScale3D;
	FVector LinearDampingScale3D;
	DECLARE_CLASS(UPXJ_ConstraintJoint,UPXJ_BaseJoint,CLASS_SafeReplace,Engine)

	UPXJ_ConstraintJoint() {}
	UBOOL InitJoint( PX_JointObject& Joint, const FCoords& CA, const FCoords& CB );
	void DrawLimitations( FSceneNode* Frame, const FCoords& C );
};

class ENGINE_API UPXJ_FixedJoint : public UPXJ_BaseJoint
{
public:
	DECLARE_CLASS(UPXJ_FixedJoint,UPXJ_BaseJoint,CLASS_SafeReplace,Engine)

	UPXJ_FixedJoint() {}
	UBOOL InitJoint( PX_JointObject& Joint, const FCoords& CA, const FCoords& CB );
};

class ENGINE_API UPXJ_HingeJoint : public UPXJ_BaseJoint
{
public:
	FLOAT LimitStiffness GCC_PACK(INT_ALIGNMENT);
	FLOAT LimitDamping;
	FLOAT LimitRangeLow;
	FLOAT LimitRangeHigh;
	FLOAT MotorSpeed;
	FLOAT MotorMaxSpeed;
	BITFIELD bLimitMovement:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bHardLimit:1;
	BITFIELD bMotor:1;
	BITFIELD bMotorFreeDrive:1;
	DECLARE_CLASS(UPXJ_HingeJoint,UPXJ_BaseJoint,CLASS_SafeReplace,Engine)

	UPXJ_HingeJoint() {}
	UBOOL InitJoint( PX_JointObject& Joint, const FCoords& CA, const FCoords& CB );
	void DrawLimitations( FSceneNode* Frame, const FCoords& C );
};

class ENGINE_API UPXJ_ShadowParm : public UPXJ_BaseJoint
{
public:
	FVector TargetLocation GCC_PACK(INT_ALIGNMENT);
	FQuat TargetRotation;
	BITFIELD bOrientToLocation:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bOrientToRotation:1;
	DECLARE_CLASS(UPXJ_ShadowParm,UPXJ_BaseJoint,CLASS_SafeReplace,Engine)

	UPXJ_ShadowParm() {}
	UBOOL InitJoint( PX_JointObject& Joint, const FCoords& CA, const FCoords& CB );
	void UpdateCoords( UBOOL bOnlyWorld ) {}
};

class ENGINE_API UPXJ_SocketJoint : public UPXJ_BaseJoint
{
public:
	FVector2D MovementLimit GCC_PACK(INT_ALIGNMENT);
	BITFIELD bLimitMovement:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_CLASS(UPXJ_SocketJoint,UPXJ_BaseJoint,CLASS_SafeReplace,Engine)

	UPXJ_SocketJoint() {}
	UBOOL InitJoint( PX_JointObject& Joint, const FCoords& CA, const FCoords& CB );
	void DrawLimitations( FSceneNode* Frame, const FCoords& C );
};

class ENGINE_API UPlayerInteraction : public UObject
{
public:
	class UPlayerInteraction* NextInteraction GCC_PACK(INT_ALIGNMENT);
	class APlayerPawn* PlayerOwner;
	BYTE Priority;
	BITFIELD bPlayerTick:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bPreRender:1;
	BITFIELD bPostRender:1;
	BITFIELD bRenderOverlays:1;
	BITFIELD bPlayerCalcView:1;
	BITFIELD bKeyEvent:1;
	BITFIELD bPrePhysicsStep:1;
	BITFIELD bPostPhysicsStep:1;
	void eventNotifyLevelChange()
	{
		ProcessEvent(FindFunctionChecked(NAME_NotifyLevelChange),NULL);
	}
	void eventPostPhysicsStep(FLOAT DeltaTime)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PostPhysicsStep),&DeltaTime);
	}
	BITFIELD eventPrePhysicsStep(FLOAT DeltaTime)
	{
		struct { FLOAT DeltaTime; BITFIELD ReturnValue; } Parms = { DeltaTime, 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_PrePhysicsStep),&Parms);
		return Parms.ReturnValue;
	}
	BITFIELD eventKeyEvent(BYTE Key, BYTE Action, FLOAT Delta)
	{
		struct { BYTE Key; BYTE Action; FLOAT Delta; BITFIELD ReturnValue; } Parms = { Key, Action, Delta, 0 };
		ProcessEvent(FindFunctionChecked(NAME_KeyEvent),&Parms);
		return Parms.ReturnValue;
	}
	BITFIELD eventKeyType(INT Key)
	{
		struct { INT Key; BITFIELD ReturnValue; } Parms = { Key, 0 };
		ProcessEvent(FindFunctionChecked(NAME_KeyType),&Parms);
		return Parms.ReturnValue;
	}
	BITFIELD eventPlayerCalcView(class AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation)
	{
		#if _USE_REF_PARMS
		struct { class AActor** ViewActor; FVector* CameraLocation; FRotator* CameraRotation; BITFIELD ReturnValue; } Parms = { &ViewActor, &CameraLocation, &CameraRotation, 0 };
		#else
		struct { class AActor* ViewActor; FVector CameraLocation; FRotator CameraRotation; BITFIELD ReturnValue; } Parms = { ViewActor, CameraLocation, CameraRotation, 0 };
		#endif
		ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcView),&Parms);
		#if !_USE_REF_PARMS
		ViewActor=Parms.ViewActor;
		CameraLocation=Parms.CameraLocation;
		CameraRotation=Parms.CameraRotation;
		#endif
		return Parms.ReturnValue;
	}
	BITFIELD eventRenderOverlays(class UCanvas* Canvas)
	{
		struct { class UCanvas* Canvas; BITFIELD ReturnValue; } Parms = { Canvas, 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_RenderOverlays),&Parms);
		return Parms.ReturnValue;
	}
	BITFIELD eventPostRender(class UCanvas* Canvas)
	{
		struct { class UCanvas* Canvas; BITFIELD ReturnValue; } Parms = { Canvas, 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
		return Parms.ReturnValue;
	}
	BITFIELD eventPreRender(class UCanvas* Canvas)
	{
		struct { class UCanvas* Canvas; BITFIELD ReturnValue; } Parms = { Canvas, 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_PreRender),&Parms);
		return Parms.ReturnValue;
	}
	BITFIELD eventPlayerTick(FLOAT DeltaTime)
	{
		struct { FLOAT DeltaTime; BITFIELD ReturnValue; } Parms = { DeltaTime, 0 };
		ProcessEvent(FindFunctionChecked(NAME_PlayerTick),&Parms);
		return Parms.ReturnValue;
	}
	DECLARE_CLASS(UPlayerInteraction,UObject,CLASS_Abstract,Engine)
	NO_DEFAULT_CONSTRUCTOR(UPlayerInteraction)
};

class ENGINE_API UPortalModifier : public UObject
{
public:
	FLOAT DistanceFogStart GCC_PACK(INT_ALIGNMENT);
	FLOAT DistanceFogEnd;
	class UTexture* ForcedBSPTexture;
	class UTexture* ForcedMeshTexture;
	FColor FogColor;
	BITFIELD bBSPUnlit:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bBSPNoFog:1;
	BITFIELD bActorUnlit:1;
	BITFIELD bActorNoFog:1;
	BITFIELD bHideMeshes:1;
	BITFIELD bHideSprites:1;
	BITFIELD bHideDecals:1;
	BITFIELD bAllowSubportals:1;
	BITFIELD bAllowSkybox:1;
	BITFIELD bDrawInvisPolies:1;
	BITFIELD bDrawSecretGoal:1;
	BITFIELD bHideSecretGoal:1;
	BITFIELD bOverrideDistanceFog:1;
	BITFIELD bScriptFilterActors:1;
	BITFIELD bScriptBSPTextures:1;
	BITFIELD bScriptMeshTextures:1;
	BITFIELD bScriptCheckPortals:1;
	BITFIELD bScriptCheckBSPSurf:1;
	BITFIELD bScriptDrawActor:1;
	BITFIELD bDistanceFogBSP:1;
	BITFIELD bDistanceFogActors:1;
	BITFIELD bDistanceFogClips:1;
	void eventPostDrawActor(class AActor* Other)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PostDrawActor),&Other);
	}
	void eventPreDrawActor(class AActor* Other)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_PreDrawActor),&Other);
	}
	void eventModifyDrawBSPSurf(class UTexture* t, INT& PolyFlags)
	{
		#if _USE_REF_PARMS
		struct { class UTexture* t; INT* PolyFlags; } Parms = { t, &PolyFlags };
		#else
		struct { class UTexture* t; INT PolyFlags; } Parms = { t, PolyFlags };
		#endif
		ProcessEvent(FindFunctionChecked(ENGINE_ModifyDrawBSPSurf),&Parms);
		#if !_USE_REF_PARMS
		PolyFlags=Parms.PolyFlags;
		#endif
	}
	BITFIELD eventAllowPortal(class UTexture* t)
	{
		struct { class UTexture* t; BITFIELD ReturnValue; } Parms = { t, 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_AllowPortal),&Parms);
		return Parms.ReturnValue;
	}
	void eventGetMeshTexture(class AActor* Other, class UTexture*& t)
	{
		#if _USE_REF_PARMS
		struct { class AActor* Other; class UTexture** t; } Parms = { Other, &t };
		#else
		struct { class AActor* Other; class UTexture* t; } Parms = { Other, t };
		#endif
		ProcessEvent(FindFunctionChecked(ENGINE_GetMeshTexture),&Parms);
		#if !_USE_REF_PARMS
		t=Parms.t;
		#endif
	}
	void eventGetBSPTexture(class UTexture*& t)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_GetBSPTexture),&t);
	}
	BITFIELD eventAllowDraw(class AActor* Other)
	{
		struct { class AActor* Other; BITFIELD ReturnValue; } Parms = { Other, 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_AllowDraw),&Parms);
		return Parms.ReturnValue;
	}
	DECLARE_CLASS(UPortalModifier,UObject,0,Engine)
	#include "UPortalModifier.h"
};

class ENGINE_API URenderIterator : public UObject
{
public:
	INT MaxItems GCC_PACK(INT_ALIGNMENT);
	INT Index;
	class APlayerPawn* Observer;
	struct FSceneNode* Frame;
	BITFIELD bHurtEntry:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD bIsParticleEmitter:1;
	BITFIELD bIsTerrain:1;
	DECLARE_FUNCTION(execGetNativeActors);
	class AActor* eventGetActors(class UCanvas* Canvas)
	{
		struct { class UCanvas* Canvas; class AActor* ReturnValue; } Parms = { Canvas, 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_GetActors),&Parms);
		return Parms.ReturnValue;
	}
	DECLARE_CLASS(URenderIterator,UObject,CLASS_Transient,Engine)

	// Constructor
	URenderIterator();

	// URenderIterator interface
	// Handeled in render code like:
	/*
		for( Actor A = GetActors(Viewport); A!=None; A=A.Target )
			DrawActor(A);
	*/
	AActor* OnGetActors(FSceneNode* Camera);
	virtual AActor* GetActors();
	virtual AActor* GetStaticActors() { return reinterpret_cast<AActor*>(GetOuter()); }
	virtual UBOOL PrepareVolume(FSceneNode* Camera) { return TRUE; } // About to draw this with bFilterByVolume enabled.
	UBOOL ShouldDrawIterator(DWORD ShowFlags) const;
};

class ENGINE_API UTerrainInfoRender : public URenderIterator
{
public:
	DECLARE_CLASS(UTerrainInfoRender,URenderIterator,CLASS_Transient,Engine)

	UTerrainInfoRender();
	AActor* GetActors();
	AActor* GetStaticActors();
};

class ENGINE_API USecurityData : public UObject
{
public:
	INT MaxIPLogLen GCC_PACK(INT_ALIGNMENT);
	INT MaxAliases;
	TArrayNoInit<FBanEntry> BanList;
	TArrayNoInit<FTempBanEntry> TempBanList;
	TArrayNoInit<FClientLogEntry> LogList;
	DECLARE_CLASS(USecurityData,UObject,CLASS_Config,Engine)
	#include "USecurityData.h"
};

class ENGINE_API UServerPreloginScene : public UObject
{
public:
	class ALevelInfo* Level GCC_PACK(INT_ALIGNMENT);
	class AGameInfo* Game;
	class UClass* ClientScene;
	DECLARE_FUNCTION(execSendClientMessage);
	DECLARE_FUNCTION(execAddPreloginPackage);
	class UClass* eventGetClientScene(class UNetConnection* C)
	{
		struct { class UNetConnection* C; class UClass* ReturnValue; } Parms = { C, 0 };
		ProcessEvent(FindFunctionChecked(ENGINE_GetClientScene),&Parms);
		return Parms.ReturnValue;
	}
	void eventInit()
	{
		ProcessEvent(FindFunctionChecked(ENGINE_Init),NULL);
	}
	void eventClientConnect(class UNetConnection* C)
	{
		ProcessEvent(FindFunctionChecked(ENGINE_ClientConnect),&C);
	}
	void eventClientDisconnect(class UNetConnection* C, const FString& Reason)
	{
		struct { class UNetConnection* C; FString Reason; } Parms = { C, Reason };
		ProcessEvent(FindFunctionChecked(ENGINE_ClientDisconnect),&Parms);
	}
	void eventClientMessage(class UNetConnection* C, const FString& S)
	{
		struct { class UNetConnection* C; FString S; } Parms = { C, S };
		ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage),&Parms);
	}
	DECLARE_CLASS(UServerPreloginScene,UObject,CLASS_Abstract,Engine)
	NO_DEFAULT_CONSTRUCTOR(UServerPreloginScene)
};

class ENGINE_API UUnrealCursor : public UObject
{
public:
	TArrayNoInit<class UTexture*> Frames GCC_PACK(INT_ALIGNMENT);
	struct FCursorData* CursorData;
	BYTE HotSpotX;
	BYTE HotSpotY;
	BYTE AnimRate;
	BYTE FallbackCursor;
	DECLARE_CLASS(UUnrealCursor,UObject,0,Engine)

	UUnrealCursor(){}
	void Destroy();
};

#endif

AUTOGENERATE_FUNCTION(AActor,-1,execUnTriggerEvent);
AUTOGENERATE_FUNCTION(AActor,-1,execTriggerEvent);
AUTOGENERATE_FUNCTION(AActor,-1,execHurtRadius);
AUTOGENERATE_FUNCTION(AActor,553,execMultiply_ColorFloat);
AUTOGENERATE_FUNCTION(AActor,552,execAdd_ColorColor);
AUTOGENERATE_FUNCTION(AActor,551,execMultiply_FloatColor);
AUTOGENERATE_FUNCTION(AActor,550,execSubtract_ColorColor);
AUTOGENERATE_FUNCTION(AActor,1725,execMeshTrace);
AUTOGENERATE_FUNCTION(AActor,1724,execGetBestTraceLineVertex);
AUTOGENERATE_FUNCTION(AActor,1723,execGetClosestVertex);
AUTOGENERATE_FUNCTION(AActor,1722,execAllFrameVerts);
AUTOGENERATE_FUNCTION(AActor,1721,execGetVertexCount);
AUTOGENERATE_FUNCTION(AActor,1720,execGetVertexPos);
AUTOGENERATE_FUNCTION(AActor,-1,execSendToLevel);
AUTOGENERATE_FUNCTION(AActor,-1,execSetPendingTouch);
AUTOGENERATE_FUNCTION(AActor,1719,execIsInPackageMap);
AUTOGENERATE_FUNCTION(AActor,1718,execAddToPackagesMap);
AUTOGENERATE_FUNCTION(AActor,1716,execCanReachPoint);
AUTOGENERATE_FUNCTION(AActor,312,execVisibleCollidingActors);
AUTOGENERATE_FUNCTION(AActor,311,execVisibleActors);
AUTOGENERATE_FUNCTION(AActor,310,execRadiusActors);
AUTOGENERATE_FUNCTION(AActor,309,execTraceActors);
AUTOGENERATE_FUNCTION(AActor,307,execTouchingActors);
AUTOGENERATE_FUNCTION(AActor,306,execBasedActors);
AUTOGENERATE_FUNCTION(AActor,305,execChildActors);
AUTOGENERATE_FUNCTION(AActor,304,execAllActors);
AUTOGENERATE_FUNCTION(AActor,400,execAllLibaries);
AUTOGENERATE_FUNCTION(AActor,313,execIntDescIterator);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextIntDesc);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextInt);
AUTOGENERATE_FUNCTION(AActor,547,execGetURLMap);
AUTOGENERATE_FUNCTION(AActor,545,execGetNextSkin);
AUTOGENERATE_FUNCTION(AActor,539,execGetMapName);
AUTOGENERATE_FUNCTION(AActor,532,execPlayerCanSeeMe);
AUTOGENERATE_FUNCTION(AActor,512,execMakeNoise);
AUTOGENERATE_FUNCTION(AActor,-1,execGetSoundDuration);
AUTOGENERATE_FUNCTION(AActor,-1,execDemoPlaySound);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayOwnedSound);
AUTOGENERATE_FUNCTION(AActor,270,execSetInstantMusicVolume);
AUTOGENERATE_FUNCTION(AActor,269,execSetInstantSpeechVolume);
AUTOGENERATE_FUNCTION(AActor,268,execSetInstantSoundVolume);
AUTOGENERATE_FUNCTION(AActor,265,execStopSound);
AUTOGENERATE_FUNCTION(AActor,264,execPlaySound);
AUTOGENERATE_FUNCTION(AActor,280,execSetTimer);
AUTOGENERATE_FUNCTION(AActor,279,execDestroy);
AUTOGENERATE_FUNCTION(AActor,278,execSpawn);
AUTOGENERATE_FUNCTION(AActor,1761,execGetBoundingBox);
AUTOGENERATE_FUNCTION(AActor,1760,execTraceTextures);
AUTOGENERATE_FUNCTION(AActor,1739,execTraceThisActor);
AUTOGENERATE_FUNCTION(AActor,1736,execTraceSurfHitInfo);
AUTOGENERATE_FUNCTION(AActor,548,execFastTrace);
AUTOGENERATE_FUNCTION(AActor,277,execTrace);
AUTOGENERATE_FUNCTION(AActor,-1,execSuggestFallVelocity);
AUTOGENERATE_FUNCTION(AActor,3970,execSetPhysics);
AUTOGENERATE_FUNCTION(AActor,301,execFinishInterpolation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRenderPosition);
AUTOGENERATE_FUNCTION(AActor,1773,execClearDebugLines);
AUTOGENERATE_FUNCTION(AActor,1742,execDrawDebugSphere);
AUTOGENERATE_FUNCTION(AActor,1741,execDrawDebugBox);
AUTOGENERATE_FUNCTION(AActor,1740,execDrawDebugLine);
AUTOGENERATE_FUNCTION(AActor,-1,execHasMeshHitBoxes);
AUTOGENERATE_FUNCTION(AActor,1772,execAddIKSolver);
AUTOGENERATE_FUNCTION(AActor,1765,execRemoveIKSolver);
AUTOGENERATE_FUNCTION(AActor,1764,execGetIKSolver);
AUTOGENERATE_FUNCTION(AActor,1778,execSetSocketInfo);
AUTOGENERATE_FUNCTION(AActor,1777,execGetSocketInfo);
AUTOGENERATE_FUNCTION(AActor,1738,execDeatachFromBone);
AUTOGENERATE_FUNCTION(AActor,1737,execAttachActorToBone);
AUTOGENERATE_FUNCTION(AActor,1735,execResetSkeletalMesh);
AUTOGENERATE_FUNCTION(AActor,1734,execStopSkelAnim);
AUTOGENERATE_FUNCTION(AActor,1733,execSkelPlayAnim);
AUTOGENERATE_FUNCTION(AActor,1732,execSetBonePosition);
AUTOGENERATE_FUNCTION(AActor,1731,execSetBoneRoot);
AUTOGENERATE_FUNCTION(AActor,1730,execSetBoneScale);
AUTOGENERATE_FUNCTION(AActor,1729,execSetBoneRotation);
AUTOGENERATE_FUNCTION(AActor,1745,execGetBoneLocation);
AUTOGENERATE_FUNCTION(AActor,1744,execGetBoneRotation);
AUTOGENERATE_FUNCTION(AActor,1728,execGetBoneCoords);
AUTOGENERATE_FUNCTION(AActor,1727,execGetBoneName);
AUTOGENERATE_FUNCTION(AActor,1726,execGetBoneIndex);
AUTOGENERATE_FUNCTION(AActor,-1,execLinkSkelAnim);
AUTOGENERATE_FUNCTION(AActor,263,execHasAnim);
AUTOGENERATE_FUNCTION(AActor,261,execFinishAnim);
AUTOGENERATE_FUNCTION(AActor,293,execGetAnimGroup);
AUTOGENERATE_FUNCTION(AActor,282,execIsAnimating);
AUTOGENERATE_FUNCTION(AActor,294,execTweenAnim);
AUTOGENERATE_FUNCTION(AActor,260,execLoopAnim);
AUTOGENERATE_FUNCTION(AActor,259,execPlayAnim);
AUTOGENERATE_FUNCTION(AActor,732,execIsBlockedBy);
AUTOGENERATE_FUNCTION(AActor,731,execFindSpot);
AUTOGENERATE_FUNCTION(AActor,730,execPointCheck);
AUTOGENERATE_FUNCTION(AActor,272,execSetOwner);
AUTOGENERATE_FUNCTION(AActor,298,execSetBase);
AUTOGENERATE_FUNCTION(AActor,3971,execAutonomousPhysics);
AUTOGENERATE_FUNCTION(AActor,3969,execMoveSmooth);
AUTOGENERATE_FUNCTION(AActor,299,execSetRotation);
AUTOGENERATE_FUNCTION(AActor,267,execSetLocation);
AUTOGENERATE_FUNCTION(AActor,266,execMove);
AUTOGENERATE_FUNCTION(AActor,285,execCheckEncroachments);
AUTOGENERATE_FUNCTION(AActor,283,execSetCollisionSize);
AUTOGENERATE_FUNCTION(AActor,262,execSetCollision);
AUTOGENERATE_FUNCTION(AActor,256,execSleep);
AUTOGENERATE_FUNCTION(AActor,233,execError);
AUTOGENERATE_FUNCTION(AActor,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(UAnimationNotify,-1,execStartLIPSyncTrack);
AUTOGENERATE_FUNCTION(AAntiPortalActor,-1,execSetAntiPortalHidden);
AUTOGENERATE_FUNCTION(UCanvas,-1,execReset);
AUTOGENERATE_FUNCTION(UCanvas,1776,execClearCustomLightSources);
AUTOGENERATE_FUNCTION(UCanvas,1775,execAddCustomLightSource);
AUTOGENERATE_FUNCTION(UCanvas,1774,execSetCustomLighting);
AUTOGENERATE_FUNCTION(UCanvas,1763,execPopCanvasScale);
AUTOGENERATE_FUNCTION(UCanvas,1762,execPushCanvasScale);
AUTOGENERATE_FUNCTION(UCanvas,1759,execSetZTest);
AUTOGENERATE_FUNCTION(UCanvas,1749,execPopClipPlane);
AUTOGENERATE_FUNCTION(UCanvas,1748,execPushClipPlane);
AUTOGENERATE_FUNCTION(UCanvas,1747,execDrawRotatedTile);
AUTOGENERATE_FUNCTION(UCanvas,1746,execDrawTris);
AUTOGENERATE_FUNCTION(UCanvas,1758,execSetTile3DOffset);
AUTOGENERATE_FUNCTION(UCanvas,1757,execGetCameraCoords);
AUTOGENERATE_FUNCTION(UCanvas,1756,execDrawBox);
AUTOGENERATE_FUNCTION(UCanvas,1755,execDrawCircle);
AUTOGENERATE_FUNCTION(UCanvas,1754,execDrawPathNetwork);
AUTOGENERATE_FUNCTION(UCanvas,1753,execScreenToWorld);
AUTOGENERATE_FUNCTION(UCanvas,1752,execWorldToScreen);
AUTOGENERATE_FUNCTION(UCanvas,1751,execDraw3DLine);
AUTOGENERATE_FUNCTION(UCanvas,1750,execDraw2DLine);
AUTOGENERATE_FUNCTION(UCanvas,480,execDrawPortal);
AUTOGENERATE_FUNCTION(UCanvas,477,execDrawTileStretched);
AUTOGENERATE_FUNCTION(UCanvas,471,execDrawClippedActor);
AUTOGENERATE_FUNCTION(UCanvas,470,execTextSize);
AUTOGENERATE_FUNCTION(UCanvas,469,execDrawTextClipped);
AUTOGENERATE_FUNCTION(UCanvas,468,execDrawTileClipped);
AUTOGENERATE_FUNCTION(UCanvas,467,execDrawActor);
AUTOGENERATE_FUNCTION(UCanvas,466,execDrawTile);
AUTOGENERATE_FUNCTION(UCanvas,465,execDrawText);
AUTOGENERATE_FUNCTION(UCanvas,464,execStrLen);
AUTOGENERATE_FUNCTION(UClientPreloginScene,-1,execSendMessage);
AUTOGENERATE_FUNCTION(UConsole,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(ADecal,-1,execDetachDecal);
AUTOGENERATE_FUNCTION(ADecal,-1,execAttachDecal);
AUTOGENERATE_FUNCTION(UEngine,-1,execStorePassword);
AUTOGENERATE_FUNCTION(UEngine,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(UEngine,-1,execGetEngine);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execParseKillMessage);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execGetNetworkNumber);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execSaveTravelInventory);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execDeleteTravelInventory);
AUTOGENERATE_FUNCTION(AGameInfo,920,execLoadTravelInventory);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execSetHooksEnabled);
AUTOGENERATE_FUNCTION(AGameInfo,1700,execAllSavedGames);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execSanitizeString);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execMakeColorCode);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execStripColorCodes);
AUTOGENERATE_FUNCTION(UIK_LipSync,-1,execStartLIPSyncTrack);
AUTOGENERATE_FUNCTION(UIK_SolverBase,-1,execSetEnabled);
AUTOGENERATE_FUNCTION(UIK_SolverBase,-1,execReset);
AUTOGENERATE_FUNCTION(AInventory,-1,execRemoveFromNavigation);
AUTOGENERATE_FUNCTION(AInventory,-1,execAddToNavigation);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execFindLevel);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetLevelInfo);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetLocalPlayerPawn);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execRigidBodiesEnabled);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execWakeUpLevel);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetSelectedObject);
AUTOGENERATE_FUNCTION(ALevelInfo,1743,execGetConIdentity);
AUTOGENERATE_FUNCTION(ALevelInfo,1711,execFreeObject);
AUTOGENERATE_FUNCTION(ALevelInfo,1710,execAllocateObj);
AUTOGENERATE_FUNCTION(ALevelInfo,1709,execGetLocZone);
AUTOGENERATE_FUNCTION(ALevelInfo,1708,execAllDownloaders);
AUTOGENERATE_FUNCTION(ALevelInfo,1707,execAllConnections);
AUTOGENERATE_FUNCTION(ALevelInfo,1706,execHasDownloaders);
AUTOGENERATE_FUNCTION(ALevelInfo,1705,execGetConOpts);
AUTOGENERATE_FUNCTION(ALevelInfo,1704,execGetConIP);
AUTOGENERATE_FUNCTION(ALevelInfo,1703,execGetConState);
AUTOGENERATE_FUNCTION(ALevelInfo,666,execKickConnection);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetAddressURL);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetLocalURL);
AUTOGENERATE_FUNCTION(ANavigationPoint,1714,execRemoveReachSpec);
AUTOGENERATE_FUNCTION(ANavigationPoint,1713,execEditReach);
AUTOGENERATE_FUNCTION(ANavigationPoint,1712,execGenReachSpec);
AUTOGENERATE_FUNCTION(ANavigationPoint,519,execdescribeSpec);
AUTOGENERATE_FUNCTION(APawn,-1,execClientHearSound);
AUTOGENERATE_FUNCTION(APawn,-1,execStopWaiting);
AUTOGENERATE_FUNCTION(APawn,321,execAllInventory);
AUTOGENERATE_FUNCTION(APawn,534,execPickAnyTarget);
AUTOGENERATE_FUNCTION(APawn,531,execPickTarget);
AUTOGENERATE_FUNCTION(APawn,530,execRemovePawn);
AUTOGENERATE_FUNCTION(APawn,529,execAddPawn);
AUTOGENERATE_FUNCTION(APawn,540,execFindBestInventoryPath);
AUTOGENERATE_FUNCTION(APawn,527,execWaitForLanding);
AUTOGENERATE_FUNCTION(APawn,524,execFindStairRotation);
AUTOGENERATE_FUNCTION(APawn,526,execPickWallAdjust);
AUTOGENERATE_FUNCTION(APawn,520,execactorReachable);
AUTOGENERATE_FUNCTION(APawn,521,execpointReachable);
AUTOGENERATE_FUNCTION(APawn,523,execEAdjustJump);
AUTOGENERATE_FUNCTION(APawn,522,execClearPaths);
AUTOGENERATE_FUNCTION(APawn,525,execFindRandomDest);
AUTOGENERATE_FUNCTION(APawn,517,execFindPathToward);
AUTOGENERATE_FUNCTION(APawn,518,execFindPathTo);
AUTOGENERATE_FUNCTION(APawn,533,execCanSee);
AUTOGENERATE_FUNCTION(APawn,514,execLineOfSightTo);
AUTOGENERATE_FUNCTION(APawn,510,execTurnToward);
AUTOGENERATE_FUNCTION(APawn,508,execTurnTo);
AUTOGENERATE_FUNCTION(APawn,506,execStrafeFacing);
AUTOGENERATE_FUNCTION(APawn,504,execStrafeTo);
AUTOGENERATE_FUNCTION(APawn,502,execMoveToward);
AUTOGENERATE_FUNCTION(APawn,500,execMoveTo);
AUTOGENERATE_FUNCTION(UPhysicsAnimation,-1,execGetMoveDir);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetNegotiatedVersion);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execCanNetworkObject);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPasteFromClipboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execCopyToClipboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetCompileTime);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetClientSubVersion);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetEntryLevel);
AUTOGENERATE_FUNCTION(APlayerPawn,549,execIsPressing);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetDefaultURL);
AUTOGENERATE_FUNCTION(APlayerPawn,546,execUpdateURL);
AUTOGENERATE_FUNCTION(APlayerPawn,544,execResetKeyboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execClientTravel);
AUTOGENERATE_FUNCTION(AProjectile,-1,execHurtRadiusProj);
AUTOGENERATE_FUNCTION(AProjector,354,execDeattachAllActors);
AUTOGENERATE_FUNCTION(AProjector,353,execDeattachActor);
AUTOGENERATE_FUNCTION(AProjector,352,execAttachActor);
AUTOGENERATE_FUNCTION(AProjector,351,execDeattachPrjDecal);
AUTOGENERATE_FUNCTION(AProjector,350,execAttachPrjDecal);
AUTOGENERATE_FUNCTION(UPX_PhysicsDataBase,-1,execDeleteJoint);
AUTOGENERATE_FUNCTION(UPX_PhysicsDataBase,-1,execCreateJoint);
AUTOGENERATE_FUNCTION(UPX_PhysicsDataBase,-1,execSetMass);
AUTOGENERATE_FUNCTION(UPX_PhysicsDataBase,-1,execSetGravity);
AUTOGENERATE_FUNCTION(UPX_PhysicsDataBase,-1,execImpulse);
AUTOGENERATE_FUNCTION(UPX_PhysicsDataBase,-1,execSetAngularVelocity);
AUTOGENERATE_FUNCTION(UPX_PhysicsDataBase,-1,execGetAngularVelocity);
AUTOGENERATE_FUNCTION(UPX_PhysicsDataBase,-1,execIsSleeping);
AUTOGENERATE_FUNCTION(UPX_PhysicsDataBase,-1,execWakeUp);
AUTOGENERATE_FUNCTION(UPX_VehicleBase,-1,execSetDriving);
AUTOGENERATE_FUNCTION(UPX_VehicleWheeled,-1,execSetWheelFriction);
AUTOGENERATE_FUNCTION(UPX_VehicleWheeled,-1,execSetBreakMode);
AUTOGENERATE_FUNCTION(UPXJ_BaseJoint,-1,execUpdateCoords);
AUTOGENERATE_FUNCTION(UPXJ_BaseJoint,-1,execSetJointOffset);
AUTOGENERATE_FUNCTION(UPXJ_BaseJoint,-1,execCalcCoords);
AUTOGENERATE_FUNCTION(UPXJ_BaseJoint,-1,execSetJoinedActor);
AUTOGENERATE_FUNCTION(UPXJ_BaseJoint,-1,execSetDisabled);
AUTOGENERATE_FUNCTION(URenderIterator,921,execGetNativeActors);
AUTOGENERATE_FUNCTION(UScriptedTexture,597,execDrawPortal);
AUTOGENERATE_FUNCTION(UScriptedTexture,596,execDeleteTexture);
AUTOGENERATE_FUNCTION(UScriptedTexture,595,execListTextures);
AUTOGENERATE_FUNCTION(UScriptedTexture,594,execLoadTexture);
AUTOGENERATE_FUNCTION(UScriptedTexture,593,execSaveTexture);
AUTOGENERATE_FUNCTION(UScriptedTexture,592,execCaptureScreenshot);
AUTOGENERATE_FUNCTION(UScriptedTexture,591,execSetDataString);
AUTOGENERATE_FUNCTION(UScriptedTexture,590,execGetDataString);
AUTOGENERATE_FUNCTION(UScriptedTexture,589,execInitImage);
AUTOGENERATE_FUNCTION(UScriptedTexture,588,execClearImage);
AUTOGENERATE_FUNCTION(UScriptedTexture,476,execTextSize);
AUTOGENERATE_FUNCTION(UScriptedTexture,475,execReplaceTexture);
AUTOGENERATE_FUNCTION(UScriptedTexture,474,execDrawColoredText);
AUTOGENERATE_FUNCTION(UScriptedTexture,472,execDrawText);
AUTOGENERATE_FUNCTION(UScriptedTexture,473,execDrawTile);
AUTOGENERATE_FUNCTION(UServerPreloginScene,-1,execSendClientMessage);
AUTOGENERATE_FUNCTION(UServerPreloginScene,-1,execAddPreloginPackage);
AUTOGENERATE_FUNCTION(UShadowBitMap,1791,execSetActor);
AUTOGENERATE_FUNCTION(UShadowBitMap,1790,execSetShadowRes);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetMapFileName);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetGMTRef);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execFileLog);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execFileFlush);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execGetPlayerChecksum);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execGetChecksum);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execWatermark);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execCloseLog);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execOpenLog);
AUTOGENERATE_FUNCTION(ATimeDemo,-1,execCloseFile);
AUTOGENERATE_FUNCTION(ATimeDemo,-1,execWriteToFile);
AUTOGENERATE_FUNCTION(ATimeDemo,-1,execOpenFile);
AUTOGENERATE_FUNCTION(AVolume,-1,execEncompasses);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,-1,execWarpBothCoords);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,315,execUnWarp);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,314,execWarp);
AUTOGENERATE_FUNCTION(AZoneInfo,308,execZoneActors);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif // NAMES_ONLY

#if ((_MSC_VER) || (HAVE_PRAGMA_PACK))
#pragma pack (pop)
#endif

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,CollisionGroups)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,CollisionFlag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LatentInt)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,CollisionTag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LightingTag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,NetTag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,OtherTag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,ExtraTag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,SpecialTag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,RandomDelayTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,RandomValue)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LastRandomTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LastRenderedTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,TimerRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,TimerCounter)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LifeSpan)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,AnimFrame)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,AnimRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,TweenRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LODBias)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LatentFloat)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,OddsOfAppearing)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,DrawScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,ScaleGlow)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,VisibilityRadius)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,VisibilityHeight)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,SpriteProjForward)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,AmbientGlowPulseSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,TransientSoundVolume)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,TransientSoundRadius)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,CollisionRadius)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,CollisionHeight)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,CoronaAlpha)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,NormalLightRadius)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Mass)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Buoyancy)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,PhysAlpha)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,PhysRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,AnimLast)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,AnimMinRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,OldAnimRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,NetPriority)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,NetUpdateFrequency)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,NetUpdateTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,CollisionOverride)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,PhysicsData)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Owner)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,SkelAnim)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,AnimationNotify)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Level)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,XLevel)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Target)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Instigator)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Inventory)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Base)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LatentActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Touching)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Deleted)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,HitActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Sprite)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Texture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Skin)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Mesh)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,ShadowMesh)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Brush)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,MultiSkins)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,AmbientSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,PendingTouch)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,RenderInterface)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,BlendAnimationSequence)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,InitialState)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Group)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,AnimSequence)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Tag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Event)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,AttachedBone)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,AttachTag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,RenderIteratorClass)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,ProjectorList)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,RealTouching)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,MultiTimers)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,AnimSets)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,ActorRenderColor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,ActorGUnlitColor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,AmbientGlowColor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,RelativeLocation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,RelativeRotation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,DrawScale3D)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Region)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Location)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Rotation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,OldLocation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,ColLocation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Velocity)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Acceleration)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,PrePivot)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,RotationRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,DesiredRotation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,SimAnim)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,UserData)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,MeshInstance)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LightDataPtr)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,RenderState)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,RenderInterpolate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,RbPhysicsData)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,NetInitialProperties)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,OctreeNode)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,RealBasedActors)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,RealChildActors)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,JoinedActorsPtr)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,NetworkChannels)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,NetworkPtr)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,RenderPass)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LastHitBox)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Physics)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Role)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,RemoteRole)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,StandingCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,MiscNumber)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LatentByte)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,DrawType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Style)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,AmbientGlow)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,Fatness)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,SoundRadius)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,SoundVolume)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,SoundPitch)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LightType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LightEffect)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LightBrightness)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LightHue)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LightSaturation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LightRadius)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LightPeriod)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LightPhase)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,LightCone)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,VolumeBrightness)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,VolumeRadius)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,VolumeFog)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Actor,DodgeDir)
VERIFY_CLASS_SIZE_NODIE(AActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,AnimationNotify,NumAnimFrames)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,AnimationNotify,VoiceVolume)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,AnimationNotify,LIPSyncTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,AnimationNotify,LIPSyncRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,AnimationNotify,Owner)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,AnimationNotify,LIPSyncSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,AnimationNotify,OldAnimation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,AnimationNotify,AnimationNotify)
VERIFY_CLASS_SIZE_NODIE(UAnimationNotify)
VERIFY_CLASS_SIZE_NODIE(AAntiPortalActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Bitmap,USize)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Bitmap,VSize)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Bitmap,UClamp)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Bitmap,VClamp)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Bitmap,Palette)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Bitmap,MipZero)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Bitmap,MaxColor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Bitmap,Format)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Bitmap,UBits)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Bitmap,VBits)
VERIFY_CLASS_SIZE_NODIE(UBitmap)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,BlockingActor,BlockingClasses)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,BlockingActor,IgnoreSubClasses)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,BlockingActor,ScriptBlocking)
VERIFY_CLASS_SIZE_NODIE(ABlockingActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,BlockingVolume,BlockingFlags)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,BlockingVolume,ScriptFilterFlags)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,BlockingVolume,BlockedClasses)
VERIFY_CLASS_SIZE_NODIE(ABlockingVolume)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Brush,PolyFlags)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Brush,RenderLeaf)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Brush,UnusedLightMesh)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Brush,DynBspNext)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Brush,FlushNext)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Brush,PostPivot)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Brush,MainScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Brush,PostScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Brush,TempScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Brush,BrushColor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Brush,CsgOper)
VERIFY_CLASS_SIZE_NODIE(ABrush)
VERIFY_CLASS_SIZE_NODIE(AButtonMarker)
VERIFY_CLASS_SIZE_NODIE(ACamera)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,OffsetDrawFlags)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,Mirror)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,SizeX)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,SizeY)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,SpaceX)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,SpaceY)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,OrgX)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,OrgY)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,ClipX)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,ClipY)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,CurX)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,CurY)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,Z)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,CurYL)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,FontScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,ScaleFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,NeqScaleFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,Font)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,SmallFont)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,MedFont)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,BigFont)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,LargeFont)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,Viewport)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,CanvasScalar)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,DrawColor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,RenderCoords)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,Frame)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,Render)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,Style)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Canvas,Recursion)
VERIFY_CLASS_SIZE_NODIE(UCanvas)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Carcass,CumulativeDamage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Carcass,FullCollisionHeight)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Carcass,PlayerOwner)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Carcass,Bugs)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Carcass,flies)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Carcass,rats)
VERIFY_CLASS_SIZE_NODIE(ACarcass)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ClientPreloginScene,PendingDownload)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ClientPreloginScene,ServerAddress)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ClientPreloginScene,ServerMap)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ClientPreloginScene,ConnectionURL)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ClientPreloginScene,NetConnection)
VERIFY_CLASS_SIZE_NODIE(UClientPreloginScene)
VERIFY_CLASS_SIZE_NODIE(AClipMarker)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,CollisionPlane,CollisionBounds)
VERIFY_CLASS_SIZE_NODIE(ACollisionPlane)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,HistoryTop)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,HistoryBot)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,HistoryCur)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,Scrollback)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,NumLines)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,TopLine)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,TextLines)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,BorderSize)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,ConsoleLines)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,BorderLines)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,BorderPixels)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,TypingOffset)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,LastInputKey)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,MsgTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,MsgTick)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,ConsolePos)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,ConsoleDest)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,FrameX)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,FrameY)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,Viewport)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,MsgPlayer)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,ConBackground)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,Border)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,TimeDemo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,MsgType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,TypedStr)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,History)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,MsgText)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,MsgPRINames)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,LoadingMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,SavingMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,ConnectingMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,PausedMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,PrecachingMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,GlobalConsoleKey)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Console,GlobalWindowKey)
VERIFY_CLASS_SIZE_NODIE(UConsole)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Decal,MultiDecalLevel)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Decal,SurfModel)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Decal,SurfList)
VERIFY_CLASS_SIZE_NODIE(ADecal)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Decoration,numLandings)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Decoration,PushSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Decoration,EndPushSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Decoration,Shadow)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Decoration,EffectWhenDestroyed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Decoration,contents)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Decoration,content2)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Decoration,content3)
VERIFY_CLASS_SIZE_NODIE(ADecoration)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicCorona,MaxSize)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicCorona,DisplayDistance)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicCorona,CoronaSize)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicCorona,FadeOutDistance)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicCorona,RollRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicCorona,CoronaFadeTimeScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicCorona,DirCoronaLength)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicCorona,DirCoronaWide)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicCorona,DirCoronaPullback)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicCorona,DirCoronaMinDot)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicCorona,DirCoronaMaxDot)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicCorona,DirTexture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicCorona,LensFlares)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicCorona,CoronaColor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicCorona,CloseDistanceColor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicCorona,CoronaAttenuate)
VERIFY_CLASS_SIZE_NODIE(ADynamicCorona)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicZoneInfo,CylinderSize)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicZoneInfo,SphereSize)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicZoneInfo,NextDynamicZone)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicZoneInfo,MatchOnlyZone)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicZoneInfo,BoxMin)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicZoneInfo,BoxMax)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicZoneInfo,BoundingSphere)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,DynamicZoneInfo,ZoneAreaType)
VERIFY_CLASS_SIZE_NODIE(ADynamicZoneInfo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Engine,TickCycles)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Engine,GameCycles)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Engine,ClientCycles)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Engine,CacheSizeMegs)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Engine,CurrentTickRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Engine,Cylinder)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Engine,Client)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Engine,Render)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Engine,Audio)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Engine,Physics)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Engine,GameRenderDevice)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Engine,AudioDevice)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Engine,Console)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Engine,NetworkDevice)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Engine,Language)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Engine,PhysicsEngine)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Engine,DriverCredits)
VERIFY_CLASS_SIZE_NODIE(UEngine)
VERIFY_CLASS_SIZE_NODIE(AFluidInfo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,GameEngine,GLevel)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,GameEngine,GEntry)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,GameEngine,GPendingLevel)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,GameEngine,ServerActors)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,GameEngine,ServerPackages)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,GameEngine,LastURL)
VERIFY_CLASS_SIZE_NODIE(UGameEngine)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,ItemGoals)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,KillGoals)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,SecretGoals)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,MaxSpectators)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,NumSpectators)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,MaxPlayers)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,NumPlayers)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,CurrentID)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,SentText)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,GameMaxChannels)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,BleedingDamageMin)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,BleedingDamageMax)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,DesiredMaxChannels)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,AutoAim)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,GameSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,StartTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,BaseMutator)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,GameReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,LocalLog)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,WorldLog)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,GameRules)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,AccessManager)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,ServerScene)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,SpawnLevel)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,DefaultPlayerState)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,DefaultPlayerClass)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,DefaultWeapon)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,ScoreBoardType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,GameMenuType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,HUDType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,MapListType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,MutatorClass)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,WaterZoneType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,GameReplicationInfoClass)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,AdminPassword)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,GamePassword)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,BotMenuType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,RulesMenuType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,SettingsMenuType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,GameUMenuType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,MultiplayerUMenuType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,GameOptionsMenuType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,MapPrefix)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,BeaconName)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,SpecialDamageString)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,FemSpecialDamageString)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,ServerLogName)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,LocalLogFileName)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,WorldLogFileName)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,LocalBatcherURL)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,LocalBatcherParams)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,LocalStatsURL)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,WorldBatcherURL)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,WorldBatcherParams)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,WorldStatsURL)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,SwitchLevelMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,DefaultPlayerName)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,LeftMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,FemLeftMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,FailedSpawnMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,FailedPlaceMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,FailedTeamMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,NameChangedMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,EnteredMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,FemEnteredMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,GameName)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,MaxedOutMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,MaxedOutSpectatorsMsg)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,WrongPassword)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,NeedPassword)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,LastPreloginIP)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,LastLoginPlayerNames)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,LastPreloginIdentity)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,LastPreloginIdent)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,LastDisconnectReason)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,PreloginErrorCode)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,MaleGender)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,FemaleGender)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,AccessManagerClass)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,InventoryDataIni)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,ServerSceneClass)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameInfo,Difficulty)
VERIFY_CLASS_SIZE_NODIE(AGameInfo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameReplicationInfo,RemainingTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameReplicationInfo,ElapsedTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameReplicationInfo,Region)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameReplicationInfo,GameName)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameReplicationInfo,ServerName)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameReplicationInfo,ShortName)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameReplicationInfo,AdminName)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameReplicationInfo,AdminEmail)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameReplicationInfo,MOTDLine1)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameReplicationInfo,MOTDLine2)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameReplicationInfo,MOTDLine3)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameReplicationInfo,MOTDLine4)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,GameReplicationInfo,GameEndedComments)
VERIFY_CLASS_SIZE_NODIE(AGameReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,HUD,HudMode)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,HUD,Crosshair)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,HUD,HudScaler)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,HUD,CrosshairScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,HUD,MainMenu)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,HUD,MainMenuType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,HUD,Overlays)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,HUD,HUDConfigWindowType)
VERIFY_CLASS_SIZE_NODIE(AHUD)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,HUDOverlay,myHUD)
VERIFY_CLASS_SIZE_NODIE(AHUDOverlay)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_FootPlacement,GroundHeight)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_FootPlacement,AdjustRenderZ)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_FootPlacement,GroundAnimGroups)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_FootPlacement,WalkAnimGroups)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_FootPlacement,FootDir)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_FootPlacement,Floor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_FootPlacement,TweenFloor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_FootPlacement,TweenTarget)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_FootPlacement,StandGroups)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_FootPlacement,WalkGroups)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_FootPlacement,PrevAnimName)
VERIFY_CLASS_SIZE_NODIE(UIK_FootPlacement)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_HeadTurn,MaxAngYaw)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_HeadTurn,MaxAngPitch)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_HeadTurn,MaxSpineYaw)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_HeadTurn,MaxSpinePitch)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_HeadTurn,iHeadBone)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_HeadTurn,iSpineBone)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_HeadTurn,RotationRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_HeadTurn,RotationAlpha)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_HeadTurn,OldAlpha)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_HeadTurn,HeadBone)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_HeadTurn,TopSpineBone)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_HeadTurn,ViewPosition)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_HeadTurn,HeadBoneDir)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_HeadTurn,CurrentTurn)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_HeadTurn,NumSpineBones)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_HeadTurn,RotationAxis)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_HeadTurn,SpineRotationAxis)
VERIFY_CLASS_SIZE_NODIE(UIK_HeadTurn)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_Limb,iLimbBone)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_Limb,iLowLimbBone)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_Limb,iHighLimbBone)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_Limb,StretchLimit)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_Limb,PrevScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_Limb,AdjustAlpha)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_Limb,OldAlpha)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_Limb,LimbBone)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_Limb,Target)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_Limb,LimbOffset)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_Limb,LowLimbDir)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_Limb,HighLimbDir)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_Limb,JointBendDir)
VERIFY_CLASS_SIZE_NODIE(UIK_Limb)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_LipSync,JawBoneRot)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_LipSync,iJawBone)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_LipSync,VoiceVolume)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_LipSync,LIPSyncTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_LipSync,LIPSyncRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_LipSync,OldAlpha)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_LipSync,LIPSyncSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_LipSync,JawBone)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_LipSync,JawRotationAxis)
VERIFY_CLASS_SIZE_NODIE(UIK_LipSync)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_SolverBase,TimerRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_SolverBase,TimerCounter)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_SolverBase,Tag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,IK_SolverBase,MeshInstance)
VERIFY_CLASS_SIZE_NODIE(UIK_SolverBase)
VERIFY_CLASS_SIZE_NODIE(AInfo)
VERIFY_CLASS_SIZE_NODIE(AInternetInfo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,InterpolationPoint,Position)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,InterpolationPoint,RateModifier)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,InterpolationPoint,GameSpeedModifier)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,InterpolationPoint,FovModifier)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,InterpolationPoint,ScreenFlashScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,InterpolationPoint,Prev)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,InterpolationPoint,Next)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,InterpolationPoint,ScreenFlashFog)
VERIFY_CLASS_SIZE_NODIE(AInterpolationPoint)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,Charge)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,ArmorAbsorption)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,AbsorptionPriority)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,RespawnTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,PlayerViewScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,BobDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,PickupViewScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,ThirdPersonScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,MaxDesireability)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,MuzzleFlashScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,DroppedDistance)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,PlayerViewMesh)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,PickupViewMesh)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,ThirdPersonMesh)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,StatusIcon)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,NextArmor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,myMarker)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,MuzzleFlashMesh)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,MuzzleFlashTexture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,PickupSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,ActivateSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,DeActivateSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,RespawnSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,Icon)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,Shadow)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,DroppedMarker)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,DroppedNext)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,PlayerLastTouched)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,ProtectionType1)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,ProtectionType2)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,PlayerViewOffset)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,PickupMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,ItemName)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,ItemArticle)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,M_Activated)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,M_Selected)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,M_Deactivated)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,AutoSwitchPriority)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,InventoryGroup)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,FlashCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,OldFlashCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Inventory,MuzzleFlashStyle)
VERIFY_CLASS_SIZE_NODIE(AInventory)
VERIFY_CLASS_SIZE_NODIE(AInventoryAttachment)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,InventorySpot,markedItem)
VERIFY_CLASS_SIZE_NODIE(AInventorySpot)
VERIFY_CLASS_SIZE_NODIE(AKeypoint)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,Year)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,Month)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,Day)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,DayOfWeek)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,Hour)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,Minute)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,Second)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,Millisecond)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,RecommendedEnemies)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,RecommendedTeammates)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,HubStackLevel)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,AIProfile)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,EdBuildOpt)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,MaxCommonRadius)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,MaxCommonHeight)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,MinCommonHeight)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,MinCommonRadius)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,CommonRadius)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,HumanRadius)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,HumanHeight)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,TimeDilation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,TimeSeconds)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,RealTimeSeconds)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,NetTimeSeconds)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,LastDeltaTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,LastRealDeltaTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,LastActivityTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,PlayerDoppler)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,Brightness)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,NextSwitchCountdown)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,AvgAITime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,DemoTimeDilation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,ReplicatedTimeSeconds)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,Summary)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,Song)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,backup_Song)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,Screenshot)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,DefaultTexture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,WhiteTexture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,TemplateLightTex)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,Game)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,NavigationPointList)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,PawnList)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,SpawnNotify)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,DynamicZonesList)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,ReplicationTarget)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,ChildLevel)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,ParentLevel)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,DefaultGameType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,FootprintManager)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,RealCrouchInfoClass)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,ObjList)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,CleanupDestroyedNotify)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,SubLevels)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,EdViewports)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,Title)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,Author)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,IdealPlayerCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,LevelEnterText)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,LocalizedPkg)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,Pauser)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,VisibleGroups)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,LockedGroups)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,ComputerName)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,EngineVersion)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,EngineSubVersion)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,MinNetVersion)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,NextURL)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,SongSection)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,SongVolume)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,CdTrack)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,backup_SongSection)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,LevelAction)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,NetMode)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,ServerTravelType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,LevelInfo,MaxPortalDepth)
VERIFY_CLASS_SIZE_NODIE(ALevelInfo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,LevelSummary,RecommendedEnemies)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,LevelSummary,RecommendedTeammates)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,LevelSummary,Title)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,LevelSummary,Author)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,LevelSummary,IdealPlayerCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,LevelSummary,LevelEnterText)
VERIFY_CLASS_SIZE_NODIE(ULevelSummary)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Light,ShadowMoverTags)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Light,MoverShadowSurfs)
VERIFY_CLASS_SIZE_NODIE(ALight)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Menu,Selection)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Menu,MenuLength)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Menu,ParentMenu)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Menu,PlayerOwner)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Menu,HelpMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Menu,MenuList)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Menu,LeftString)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Menu,RightString)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Menu,CenterString)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Menu,EnabledString)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Menu,DisabledString)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Menu,MenuTitle)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Menu,YesString)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Menu,NoString)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Menu,OnString)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Menu,OffString)
VERIFY_CLASS_SIZE_NODIE(AMenu)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,EncroachDamage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,numTriggerEvents)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,SimOldRotPitch)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,SimOldRotYaw)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,SimOldRotRoll)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,ServerUpdate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,ClientUpdate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,LNextKeyNum)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,MoveTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,StayOpenTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,OtherTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,DamageThreshold)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,DelayTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,SavedTrigger)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,Leader)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,Follower)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,OpeningSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,OpenedSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,ClosingSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,ClosedSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,MoveAmbientSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,StaticLightD)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,StuckActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,myMarker)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,TriggerActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,TriggerActor2)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,WaitingPawn)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,RecommendedTrigger)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,PlayerBumpEvent)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,BumpEvent)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,ReturnGroup)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,NotifyLightMaps)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,KeyPos)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,KeyRot)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,BasePos)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,OldPos)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,OldPrePivot)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,SavedPos)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,BaseRot)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,OldRot)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,SavedRot)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,SimOldPos)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,SimInterpolate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,RealPosition)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,RealRotation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,MoverEncroachType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,MoverGlideType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,BumpType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,KeyNum)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,PrevKeyNum)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,NumKeys)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,WorldRaytraceKey)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Mover,BrushRaytraceKey)
VERIFY_CLASS_SIZE_NODIE(AMover)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,upstreamPaths)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,Paths)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,PrunedPaths)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,visitedWeight)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,bestPathWeight)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,cost)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,ExtraCost)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,PathSearchTag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,ForcedPathSize)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,MaxPathDistance)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,VisNoReachPaths)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,RouteCache)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,nextNavigationPoint)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,nextOrdered)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,prevOrdered)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,startPath)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,previousPath)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,DroppedInvList)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,ownerTeam)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,ProscribedPaths)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,ForcedPaths)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,EditorData)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,NavigationPoint,PathDescription)
VERIFY_CLASS_SIZE_NODIE(ANavigationPoint)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Palette,Colors)
VERIFY_CLASS_SIZE_NODIE(UPalette)
VERIFY_CLASS_SIZE_NODIE(APathNode)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,DieCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,ItemCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,KillCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,SecretCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,Spree)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,Health)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,SightCounter)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,PainTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,SpeechTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,AvgPhysicsTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,MoveTimer)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,DesiredSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,MaxDesiredSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,MeleeRange)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,SerpentineDist)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,SerpentineTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,GroundSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,WaterSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,AirSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,AccelRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,JumpZ)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,MaxStepHeight)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,AirControl)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,WalkingPct)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,ShoveCollisionRadius)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,MinHitWall)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,Alertness)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,Stimulus)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,SightRadius)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,PeripheralVision)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,HearingThreshold)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,HuntOffDistance)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,LastSeenTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,LastDamageTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,BaseEyeHeight)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,EyeHeight)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,SplashTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,OrthoZoom)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,FovAngle)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,ReducedDamagePct)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,UnderWaterTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,Skill)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,SpecialPause)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,noise1time)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,noise1loudness)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,noise2time)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,noise2loudness)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,LastPainSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,CombatStyle)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,SoundDampening)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,DamageScaling)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,OldMessageTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,SightDistanceMulti)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,TeleportHackTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,BeaconOffset)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,MaxFrobDistance)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,LastAnchor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,MoveTarget)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,FaceTarget)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,PhysicsAnim)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,Enemy)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,GroundTexture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,Weapon)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,PendingWeapon)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,SelectedItem)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,LastDamageInstigator)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,SpecialGoal)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,noise1other)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,noise2other)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,nextPawn)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,HitSound1)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,HitSound2)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,Land)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,Die)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,WaterStep)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,home)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,carriedDecoration)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,RouteCache)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,PlayerReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,BleedingActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,Shadow)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,FrobTarget)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,LastDamageType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,ReducedDamageType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,NextState)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,NextLabel)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,AlarmTag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,SharedAlarmTag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,PlayerReStartState)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,DropWhenKilled)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,VoiceType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,PlayerReplicationInfoClass)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,Pawn_BloodsprayClass)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,Pawn_BleedingClass)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,FootRegion)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,HeadRegion)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,Destination)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,Focus)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,MovementStart)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,LastReachTest)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,LastSeenPos)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,LastSeeingPos)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,LastDamageHitLocation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,LastDamageMomentum)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,ViewRotation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,WalkBob)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,Floor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,noise1spot)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,noise2spot)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,TransitFloor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,MenuName)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,MenuNameDative)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,NameArticle)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,lastPhoneme)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,nextPhoneme)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,Visibility)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,AttitudeToPlayer)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,Intelligence)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,bZoom)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,bRun)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,bLook)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,bDuck)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,bSnapLevel)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,bStrafe)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,bFire)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,bAltFire)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,bFreeLook)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,bExtra0)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,bExtra1)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,bExtra2)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,bExtra3)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,VoicePitch)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Pawn,SightCheckType)
VERIFY_CLASS_SIZE_NODIE(APawn)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsAnimation,MaxYawDif)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsAnimation,OldYaw)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsAnimation,StillSpeedScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsAnimation,DodgeMoveSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsAnimation,PawnOwner)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsAnimation,CrouchProperty)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsAnimation,OnAnimationChange)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsAnimation,OnDoTurn)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsAnimation,OnDodgeMove)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsAnimation,CrouchFlagProperty)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsAnimation,MovementDirCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsAnimation,AnimationSeq)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsAnimation,MovementDir)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsAnimation,PrevAnimSeq)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsAnimation,PrevMoveDir)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsAnimation,TurnDirection)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsAnimation,DodgeMove)
VERIFY_CLASS_SIZE_NODIE(UPhysicsAnimation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsEngine,TickScenes)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PhysicsEngine,DefCylinder)
VERIFY_CLASS_SIZE_NODIE(UPhysicsEngine)
VERIFY_CLASS_SIZE_NODIE(UPhysicsObject)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PlayerInteraction,NextInteraction)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PlayerInteraction,PlayerOwner)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PlayerInteraction,Priority)
VERIFY_CLASS_SIZE_NODIE(UPlayerInteraction)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,ShowFlags)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,RendMap)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,Misc1)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,Misc2)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,shakemag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,NetSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,LanSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,FogMode)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,DodgeClickTimer)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,DodgeClickTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,Bob)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,bobtime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,DesiredFlashScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,ConstantGlowScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,InstantFlash)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,DesiredFOV)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,DefaultFOV)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,shaketimer)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,shakevert)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,maxshake)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,verttimer)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,MyAutoAim)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,Handedness)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,MainFOV)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,ZoomLevel)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,MouseSensitivity)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,SmoothMouseX)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,SmoothMouseY)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,KbdAccel)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,MouseSmoothThreshold)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,CrouchHeightPct)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,CrouchCheckTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,SpecialCollisionHeight)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,PrePivotZModifier)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,AccumulatedHTurn)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,AccumulatedVTurn)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,DistanceFogDistance)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,DistanceFogStart)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,DistanceFogBlendTimer)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,FogDensity)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,aBaseX)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,aBaseY)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,aBaseZ)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,aMouseX)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,aMouseY)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,aForward)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,aTurn)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,aStrafe)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,aUp)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,aLookUp)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,aExtra4)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,aExtra3)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,aExtra2)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,aExtra1)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,aExtra0)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,CurrentTimeStamp)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,LastUpdateTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,ServerTimeStamp)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,TimeMargin)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,MaxTimeMargin)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,ProgressTimeOut)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,TargetEyeHeight)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,Player)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,ViewTarget)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,myHUD)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,Scoring)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,Song)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,JumpSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,DistanceFogOld)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,CameraModifier)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,LocalInteractions)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,SavedMoves)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,FreeMoves)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,GameReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,CalcCameraActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,ClientReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,FirstPlayerAffector)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,CustomPlayerStateInfo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,RealCrouchInfo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,ActiveLadder)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,WeaponPriority)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,HUDType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,ScoringType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,CarcassType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,SpecialMenu)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,FlashScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,FlashFog)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,CurrentFlashFog)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,DesiredFlashFog)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,ConstantGlowFog)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,InstantFog)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,CameraRegion)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,DistanceFogColor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,DistanceFogBlend)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,ProgressColor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,TargetViewRotation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,TargetWeaponViewOffset)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,CalcCameraLocation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,CalcCameraRotation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,Password)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,DelayedCommand)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,ProgressMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,QuickSaveString)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,NoPauseMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,ViewingFrom)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,OwnCamera)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,FailedView)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,CantChangeNameMsg)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,ngWorldSecret)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,SongSection)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,SongVolume)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,CdTrack)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerPawn,Transition)
VERIFY_CLASS_SIZE_NODIE(APlayerPawn)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerReplicationInfo,PlayerID)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerReplicationInfo,TeamID)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerReplicationInfo,Ping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerReplicationInfo,Score)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerReplicationInfo,Spree)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerReplicationInfo,HasFlag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerReplicationInfo,TalkTexture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerReplicationInfo,PlayerZone)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerReplicationInfo,VoiceType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerReplicationInfo,PlayerName)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerReplicationInfo,TeamName)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerReplicationInfo,Team)
VERIFY_CLASS_SIZE_NODIE(APlayerReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,PlayerStart,TeamNumber)
VERIFY_CLASS_SIZE_NODIE(APlayerStart)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PortalModifier,DistanceFogStart)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PortalModifier,DistanceFogEnd)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PortalModifier,ForcedBSPTexture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PortalModifier,ForcedMeshTexture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PortalModifier,FogColor)
VERIFY_CLASS_SIZE_NODIE(UPortalModifier)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projectile,MomentumTransfer)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projectile,Speed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projectile,MaxSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projectile,Damage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projectile,ExploWallOut)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projectile,SpawnSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projectile,ImpactSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projectile,MiscSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projectile,LastHitActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projectile,Shadow)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projectile,MyDamageType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projectile,ExplosionDecal)
VERIFY_CLASS_SIZE_NODIE(AProjectile)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projector,MaxDistance)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projector,ProjectorScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projector,SurfModel)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projector,ProjectTexture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projector,DecalActors)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projector,DecalNodes)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projector,FrustrumPlanes)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projector,Box)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projector,VisBox)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projector,StaticMapData)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projector,FOV)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Projector,ProjectStyle)
VERIFY_CLASS_SIZE_NODIE(AProjector)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_PhysicsDataBase,Actor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_PhysicsDataBase,Joints)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_PhysicsDataBase,CustomGravity)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_PhysicsDataBase,ServerPhysics)
VERIFY_CLASS_SIZE_NODIE(UPX_PhysicsDataBase)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RagdollData,SkeletalPhysBody)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RagdollData,Mesh)
VERIFY_CLASS_SIZE_NODIE(UPX_RagdollData)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_Repulsor,Distance)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_Repulsor,RepulsorSize)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_Repulsor,Softness)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_Repulsor,MaxUpForce)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_Repulsor,SuspenseOffset)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_Repulsor,Offset)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_Repulsor,Direction)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_Repulsor,HitLocation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_Repulsor,HitNormal)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_Repulsor,ConstraintData)
VERIFY_CLASS_SIZE_NODIE(UPX_Repulsor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,MaxAngularVelocity)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,MaxLinearVelocity)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,AngularDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,LinearDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,WaterMaxAngularVelocitySc)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,WaterMaxLinearVelocitySc)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,WaterAngularDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,WaterLinearDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,MinImpactThreshold)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,StayUprightRollResistAngle)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,StayUprightPitchResistAngle)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,StayUprightStiffness)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,StayUprightDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,CollisionShape)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,Repulsors)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,COMOffset)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,AngularVelocity)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,InertiaTensor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,HitLocation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_RigidBodyData,HitNormal)
VERIFY_CLASS_SIZE_NODIE(UPX_RigidBodyData)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_SkeletalBody,BodyParts)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_SkeletalBody,DisableCollision)
VERIFY_CLASS_SIZE_NODIE(UPX_SkeletalBody)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleBase,EngineSpeed)
VERIFY_CLASS_SIZE_NODIE(UPX_VehicleBase)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,MaxThrustForce)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,LongDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,MaxStrafeForce)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,LatDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,MaxRiseForce)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,UpDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,TurnTorqueFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,TurnTorqueMax)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,TurnDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,MaxYawRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,PitchTorqueFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,PitchTorqueMax)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,PitchDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,RollTorqueTurnFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,RollTorqueStrafeFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,RollTorqueMax)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,RollDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,MaxRandForce)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,RandForceInterval)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,StallZ)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,CurrentThrust)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,CurrentStrafe)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,CurrentRise)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleChopper,CurrentDirection)
VERIFY_CLASS_SIZE_NODIE(UPX_VehicleChopper)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,HoverSoftness)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,HoverCheckDist)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,MaxThrustForce)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,LongDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,MaxStrafeForce)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,LatDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,TurnTorqueFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,TurnTorqueMax)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,TurnDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,MaxYawRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,PitchTorqueFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,PitchTorqueMax)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,PitchDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,RollTorqueTurnFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,RollTorqueStrafeFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,RollTorqueMax)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,RollDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,CurrentThrust)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,CurrentStrafe)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,ThrusterOffsets)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleHover,CurrentDirection)
VERIFY_CLASS_SIZE_NODIE(UPX_VehicleHover)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehiclePlane,AirFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehiclePlane,MaxStrafe)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehiclePlane,MaxThrust)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehiclePlane,ThrustAcceleration)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehiclePlane,HoverSoftness)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehiclePlane,HoverCheckDist)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehiclePlane,PitchTorque)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehiclePlane,PitchDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehiclePlane,BankTorque)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehiclePlane,BankDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehiclePlane,TakeoffSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehiclePlane,CurrentThrust)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehiclePlane,CurrentStrafe)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehiclePlane,ThrusterOffsets)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehiclePlane,LiftCoefficientCurve)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehiclePlane,DragCoefficientCurve)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehiclePlane,CurrentTurn)
VERIFY_CLASS_SIZE_NODIE(UPX_VehiclePlane)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleTreaded,TreadRadius)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleTreaded,TreadRestitution)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleTreaded,ThrustSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleTreaded,MaxThrust)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleTreaded,SteerTorque)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleTreaded,MaxSteerTorque)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleTreaded,ForwardDampFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleTreaded,TurnDampFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleTreaded,LateralDampFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleTreaded,SteerDampFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleTreaded,PitchTorqueFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleTreaded,PitchDampFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleTreaded,BankTorqueFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleTreaded,BankDampFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleTreaded,ParkFriction)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleTreaded,CurrentThrust)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleTreaded,CurrentTurn)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleTreaded,TreadOffsets)
VERIFY_CLASS_SIZE_NODIE(UPX_VehicleTreaded)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeled,WheelRadius)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeled,WheelRestitution)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeled,WheelFriction)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeled,SteeringValue)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeled,Acceleration)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeled,DeaccelRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeled,SlipCorrection)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeled,AngularCorrection)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeled,AngularSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeled,Wheels)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeled,Torque)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeled,BreakMode)
VERIFY_CLASS_SIZE_NODIE(UPX_VehicleWheeled)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeledAuto,TipRollingRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeledAuto,TipRollingSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeledAuto,ChassisTorqueScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeledAuto,ChassisTorqueSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeledAuto,CurrentGas)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeledAuto,CurrentSteering)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeledAuto,AccelFunc)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeledAuto,ReverseFunc)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeledAuto,WheelSteerFunc)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PX_VehicleWheeledAuto,WheelSlipFunc)
VERIFY_CLASS_SIZE_NODIE(UPX_VehicleWheeledAuto)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXC_BoxCollision,Extent)
VERIFY_CLASS_SIZE_NODIE(UPXC_BoxCollision)
VERIFY_CLASS_SIZE_NODIE(UPXC_BrushCollision)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXC_CapsuleCollision,Height)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXC_CapsuleCollision,Radius)
VERIFY_CLASS_SIZE_NODIE(UPXC_CapsuleCollision)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXC_CollisionShape,Friction)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXC_CollisionShape,Restitution)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXC_CollisionShape,Offset)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXC_CollisionShape,RotOffset)
VERIFY_CLASS_SIZE_NODIE(UPXC_CollisionShape)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXC_MeshCollision,Mesh)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXC_MeshCollision,Size)
VERIFY_CLASS_SIZE_NODIE(UPXC_MeshCollision)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXC_MultiCollision,Shapes)
VERIFY_CLASS_SIZE_NODIE(UPXC_MultiCollision)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXC_SphereCollision,Radius)
VERIFY_CLASS_SIZE_NODIE(UPXC_SphereCollision)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_BaseJoint,MaxAllowedForce)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_BaseJoint,MaxAllowedTorque)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_BaseJoint,Owner)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_BaseJoint,JoinedActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_BaseJoint,JoinedBoneA)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_BaseJoint,JoinedBoneB)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_BaseJoint,JointOffset)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_BaseJoint,JointAngle)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_BaseJoint,BaseOffset)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_BaseJoint,BaseRotOffset)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_BaseJoint,LocalCoordsA)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_BaseJoint,LocalCoordsB)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_BaseJoint,WorldCoords)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_BaseJoint,PhysicsData)
VERIFY_CLASS_SIZE_NODIE(UPXJ_BaseJoint)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_ConstraintJoint,LinearDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_ConstraintJoint,LinearStiffness)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_ConstraintJoint,AngularDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_ConstraintJoint,AngularStiffness)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_ConstraintJoint,XAxis)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_ConstraintJoint,YAxis)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_ConstraintJoint,ZAxis)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_ConstraintJoint,ConeLimit)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_ConstraintJoint,TwistLimit)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_ConstraintJoint,DistanceLimit)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_ConstraintJoint,LinearStiffnessScale3D)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_ConstraintJoint,LinearDampingScale3D)
VERIFY_CLASS_SIZE_NODIE(UPXJ_ConstraintJoint)
VERIFY_CLASS_SIZE_NODIE(UPXJ_FixedJoint)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_HingeJoint,LimitStiffness)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_HingeJoint,LimitDamping)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_HingeJoint,LimitRangeLow)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_HingeJoint,LimitRangeHigh)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_HingeJoint,MotorSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_HingeJoint,MotorMaxSpeed)
VERIFY_CLASS_SIZE_NODIE(UPXJ_HingeJoint)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_ShadowParm,TargetLocation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_ShadowParm,TargetRotation)
VERIFY_CLASS_SIZE_NODIE(UPXJ_ShadowParm)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,PXJ_SocketJoint,MovementLimit)
VERIFY_CLASS_SIZE_NODIE(UPXJ_SocketJoint)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,RenderIterator,MaxItems)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,RenderIterator,Index)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,RenderIterator,Observer)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,RenderIterator,Frame)
VERIFY_CLASS_SIZE_NODIE(URenderIterator)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ReplicationInfo,NextRI)
VERIFY_CLASS_SIZE_NODIE(AReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SavedMove,TimeStamp)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SavedMove,Delta)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SavedMove,DodgeClickTimer)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SavedMove,ExtraInfoTimeStamp)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SavedMove,NextMove)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SavedMove,NewState)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SavedMove,NewCustomPlayerState)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SavedMove,PlayerRotation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SavedMove,ViewRotation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SavedMove,DodgeMove)
VERIFY_CLASS_SIZE_NODIE(ASavedMove)
VERIFY_CLASS_SIZE_NODIE(AScout)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ScriptedTexture,NotifyActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ScriptedTexture,SourceTexture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ScriptedTexture,PortalInfo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ScriptedTexture,LocalSourceBitmap)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ScriptedTexture,PaletteMap)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ScriptedTexture,PortalPtr)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ScriptedTexture,DrawStyle)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ScriptedTexture,DrawOpacity)
VERIFY_CLASS_SIZE_NODIE(UScriptedTexture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,SecurityData,MaxIPLogLen)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,SecurityData,MaxAliases)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,SecurityData,BanList)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,SecurityData,TempBanList)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,SecurityData,LogList)
VERIFY_CLASS_SIZE_NODIE(USecurityData)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ServerPreloginScene,Level)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ServerPreloginScene,Game)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ServerPreloginScene,ClientScene)
VERIFY_CLASS_SIZE_NODIE(UServerPreloginScene)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ShadowBitMap,ShadowScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ShadowBitMap,PrevFadeDistance)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ShadowBitMap,ProjectingActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ShadowBitMap,SecPalette)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ShadowBitMap,BackBuffer)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ShadowBitMap,ProjectDirection)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ShadowBitMap,LastActorRef)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ShadowBitMap,ThreadProc)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ShadowBitMap,Gradience)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ShadowBitMap,Softness)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ShadowBitMap,StaticLevel)
VERIFY_CLASS_SIZE_NODIE(UShadowBitMap)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SkyZoneInfo,RelativeMovementSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SkyZoneInfo,RelativeOffset)
VERIFY_CLASS_SIZE_NODIE(ASkyZoneInfo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SpawnNotify,Next)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SpawnNotify,ActorClass)
VERIFY_CLASS_SIZE_NODIE(ASpawnNotify)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,StaticMeshActor,StaticLightD)
VERIFY_CLASS_SIZE_NODIE(AStaticMeshActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,StatLog,TimeStamp)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,StatLog,LocalStandard)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,StatLog,WorldStandard)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,StatLog,LogVersion)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,StatLog,LogInfoURL)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,StatLog,GameName)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,StatLog,GameCreator)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,StatLog,GameCreatorURL)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,StatLog,DecoderRingURL)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,StatLog,LocalLogDir)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,StatLog,WorldLogDir)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,StatLog,Context)
VERIFY_CLASS_SIZE_NODIE(AStatLog)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,StatLogFile,StatLogFile)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,StatLogFile,StatLogFinal)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,StatLogFile,LogAr)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,StatLogFile,Encoding)
VERIFY_CLASS_SIZE_NODIE(AStatLogFile)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SunlightCorona,BlindingScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SunlightCorona,BlindingFOV)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SunlightCorona,MaxSkyDistance)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SunlightCorona,SunFadeTimeScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SunlightCorona,FlaresDisplayFov)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SunlightCorona,SunlightTexture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SunlightCorona,SunlightColor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,SunlightCorona,LensFlares)
VERIFY_CLASS_SIZE_NODIE(ASunlightCorona)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Teleporter,LastUdpTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Teleporter,TriggerActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Teleporter,TriggerActor2)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Teleporter,ProductRequired)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Teleporter,TargetLevelID)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Teleporter,TargetVelocity)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Teleporter,URL)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Teleporter,TeleportCount)
VERIFY_CLASS_SIZE_NODIE(ATeleporter)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TerrainInfo,SizeX)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TerrainInfo,SizeY)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TerrainInfo,TerrainMaterials)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TerrainInfo,DecoLayers)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TerrainInfo,TerrainScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TerrainInfo,TerrainData)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TerrainInfo,TerrainPrimitive)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TerrainInfo,TerrainLightData)
VERIFY_CLASS_SIZE_NODIE(ATerrainInfo)
VERIFY_CLASS_SIZE_NODIE(UTerrainInfoRender)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,LastRenderedTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,RenderTag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,MaxInitResolution)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,Diffuse)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,Specular)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,Alpha)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,DrawScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,Friction)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,MipMult)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,SuperGlow)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,MinFrameRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,MaxFrameRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,Accumulator)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,BumpMap)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,HeightMap)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,DetailTexture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,MacroTexture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,HDTexture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,PortalModifier)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,FootstepSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,HitSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,AnimNext)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,AnimCurrent)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,Mips)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,DecompMips)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,PaletteTransform)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,SourceMip)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,TextureHandle)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,LODSet)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,PrimeCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,PrimeCurrent)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,PreviewMipmap)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,DecompFormat)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,SurfaceType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,UClampMode)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Texture,VClampMode)
VERIFY_CLASS_SIZE_NODIE(UTexture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,FrameNum)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,FrameLastSecond)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,FrameLastCycle)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,CycleCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,QuitAfterCycles)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,TimePassed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,TimeDilation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,StartTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,LastSecTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,LastCycleTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,LastFrameTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,SquareSum)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,LastSec)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,MinFPS)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,MaxFPS)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,OldPoint)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,NewPoint)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,Console)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,CycleMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,CycleResult)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,TimeDemo,FileAr)
VERIFY_CLASS_SIZE_NODIE(ATimeDemo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Trigger,RepeatTriggerTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Trigger,ReTriggerDelay)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Trigger,TriggerTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Trigger,DamageThreshold)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Trigger,TriggerActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Trigger,TriggerActor2)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Trigger,TriggerLevelID)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Trigger,ClassProximityType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Trigger,Message)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Trigger,TriggerType)
VERIFY_CLASS_SIZE_NODIE(ATrigger)
VERIFY_CLASS_SIZE_NODIE(ATriggerMarker)
VERIFY_CLASS_SIZE_NODIE(ATriggers)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,UnrealCursor,Frames)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,UnrealCursor,CursorData)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,UnrealCursor,HotSpotX)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,UnrealCursor,HotSpotY)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,UnrealCursor,AnimRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,UnrealCursor,FallbackCursor)
VERIFY_CLASS_SIZE_NODIE(UUnrealCursor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,VisibilityNotify,NextNotify)
VERIFY_CLASS_SIZE_NODIE(AVisibilityNotify)
VERIFY_CLASS_SIZE_NODIE(AVolume)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,WarpZoneInfo,iWarpZone)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,WarpZoneInfo,iWarpNode)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,WarpZoneInfo,numDestinations)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,WarpZoneInfo,OtherSideActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,WarpZoneInfo,OtherSideLevel)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,WarpZoneInfo,TargetLevelID)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,WarpZoneInfo,ThisTag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,WarpZoneInfo,WarpCoords)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,WarpZoneInfo,OtherSideURL)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,WarpZoneInfo,Destinations)
VERIFY_CLASS_SIZE_NODIE(AWarpZoneInfo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,WarpZoneMarker,markedWarpZone)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,WarpZoneMarker,TriggerActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,WarpZoneMarker,TriggerActor2)
VERIFY_CLASS_SIZE_NODIE(AWarpZoneMarker)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,PickupAmmoCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,FlashS)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,MaxTargetRange)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,FiringSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,ProjectileSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,AltProjectileSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,aimerror)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,shakemag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,shaketime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,shakevert)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,AIRating)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,RefireRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,AltRefireRate)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,FlashTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,MuzzleScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,FlashY)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,FlashO)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,FlashC)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,FlashLength)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,FlareOffset)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,AmmoType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,Attachment)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,FireSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,AltFireSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,CockingSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,SelectSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,Misc1Sound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,Misc2Sound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,Misc3Sound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,MFTexture)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,MuzzleFlare)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,MyDamageType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,AltDamageType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,AmmoName)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,ProjectileClass)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,AltProjectileClass)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,ThirdPersonAttachment)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,FireOffset)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,AdjustedAim)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,MessageNoAmmo)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,DeathMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,FemDeathMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,FemKillMessage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,ReloadCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,Weapon,bMuzzleFlash)
VERIFY_CLASS_SIZE_NODIE(AWeapon)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,WeaponAttachment,LastUpdateTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,WeaponAttachment,WeaponOwner)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,WeaponAttachment,MyMuzzleFlash)
VERIFY_CLASS_SIZE_NODIE(AWeaponAttachment)
VERIFY_CLASS_SIZE_NODIE(AWeaponMuzzleFlash)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ZoneCurtain,InitSetting)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ZoneCurtain,DrawDistance)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ZoneCurtain,MaxDistance)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ZoneCurtain,FadeDistance)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ZoneCurtain,BackMaxDistance)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ZoneCurtain,PortalColor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ZoneCurtain,BackPortalColor)
VERIFY_CLASS_SIZE_NODIE(UZoneCurtain)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,ZonePlayerCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,NumCarcasses)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,DamagePerSec)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,MaxCarcasses)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,FogMode)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,CutoffHz)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,MinLightingPolyCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,MaxLightingPolyCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,MinWalkableZ)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,ZoneGroundFriction)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,ZoneFluidFriction)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,ZoneTerminalVelocity)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,ZoneTimeDilation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,FogDistanceStart)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,FogDistance)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,FadeTime)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,FogDensity)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,EnvironmentUScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,EnvironmentVScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,TexUPanSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,TexVPanSpeed)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,DirtyShadowLevel)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,LightSharpnessFactor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,LightNormalMinAng)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,SpeedOfSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,LensFlareOffset)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,LensFlareScale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,LocationID)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,EntrySound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,ExitSound)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,SkyZone)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,EnvironmentMap)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,LensFlare)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,CameraModifier)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,VisNotify)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,ZoneTag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,SkyZoneInfoTag)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,SkyZoneInfoLevelID)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,ZonePlayerEvent)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,DamageType)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,EntryActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,ExitActor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,ZoneGravity)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,ZoneVelocity)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,FogColor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,EnvironmentColor)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,ViewFlash)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,ViewFog)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,DamageString)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,ZoneName)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,LocationStrings)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,AmbientBrightness)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,AmbientHue)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,AmbientSaturation)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,LightMapDetailLevels)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,MasterGain)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,Delay)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,Gain)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,EFXAmbients)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,MinLightCount)
VERIFY_CLASS_OFFSET_NODIE_SLOW(A,ZoneInfo,MaxLightCount)
VERIFY_CLASS_SIZE_NODIE(AZoneInfo)
VERIFY_CLASS_SIZE_NODIE(AZoneUnion)
#endif // VERIFY_CLASS_SIZES
