/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if ((_MSC_VER) || (HAVE_PRAGMA_PACK))
#pragma pack (push,OBJECT_ALIGNMENT)
#endif

#ifndef CORE_API
#define CORE_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern CORE_API FName CORE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(OnLogLine)

#ifndef NAMES_ONLY

enum EBoolParm : BYTE
{
	RETURN_False,
	RETURN_True,
	RETURN_MAX,
};

class CORE_API UCommandlet : public UObject
{
public:
	FStringNoInit HelpCmd GCC_PACK(INT_ALIGNMENT);
	FStringNoInit HelpOneLiner;
	FStringNoInit HelpUsage;
	FStringNoInit HelpWebLink;
	FStringNoInit HelpParm[16];
	FStringNoInit HelpDesc[16];
	BITFIELD LogToStdout:1 GCC_PACK(INT_ALIGNMENT);
	BITFIELD IsServer:1;
	BITFIELD IsClient:1;
	BITFIELD IsEditor:1;
	BITFIELD LazyLoad:1;
	BITFIELD ShowErrorCount:1;
	BITFIELD ShowBanner:1;
	BITFIELD ForceInt:1;
	BITFIELD bMainEntry:1;
	DECLARE_FUNCTION(execMain);
	INT eventMain(const FString& InParms)
	{
		struct { FString InParms; INT ReturnValue; } Parms = { InParms, 0 };
		ProcessEvent(FindFunctionChecked(NAME_Main),&Parms);
		return Parms.ReturnValue;
	}
	DECLARE_CLASS(UCommandlet,UObject,(CLASS_Transient | CLASS_Localized | CLASS_Abstract),Core)

	UCommandlet();
	virtual INT Main( const TCHAR* Parms );
};

class CORE_API ULocale : public UObject
{
public:
	DECLARE_FUNCTION(execSetLanguage);
	DECLARE_FUNCTION(execGetDisplayLanguage);
	DECLARE_FUNCTION(execGetLanguage);
	DECLARE_CLASS(ULocale,UObject,CLASS_Transient,Core)
	NO_DEFAULT_CONSTRUCTOR(ULocale)
};

class CORE_API ULogHandler : public UObject
{
public:
	INT Priority GCC_PACK(INT_ALIGNMENT);
	TArrayNoInit<FName> LogTypes;
	BITFIELD bEnabled:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_FUNCTION(execAddLogType);
	DECLARE_FUNCTION(execSetEnabled);
	BITFIELD eventOnLogLine(FName N, const FString& S)
	{
		struct { FName N; FString S; BITFIELD ReturnValue; } Parms = { N, S, 0 };
		ProcessEvent(FindFunctionChecked(CORE_OnLogLine),&Parms);
		return Parms.ReturnValue;
	}
	DECLARE_CLASS(ULogHandler,UObject,CLASS_Abstract,Core)
	#include "ULogHandler.h"
};

class CORE_API UScriptHook : public UObject
{
public:
	TArrayNoInit<class UFunction*> Hooks GCC_PACK(INT_ALIGNMENT);
	BITFIELD bHasHooks:1 GCC_PACK(INT_ALIGNMENT);
	DECLARE_FUNCTION(execRemoveHook);
	DECLARE_FUNCTION(execSetHook);
	DECLARE_FUNCTION(execAllHooks);
	DECLARE_FUNCTION(execUsedHooks);
	DECLARE_FUNCTION(execHooksEnabled);
	DECLARE_CLASS(UScriptHook,UObject,CLASS_Abstract,Core)

	UScriptHook(){}
	void Destroy();
	static UBOOL VerifyParameters(UFunction* Func, UFunction* Callback, FOutputDevice& Out );
};

class CORE_API USubsystem : public UObject, public FExec
{
public:
	DECLARE_ABSTRACT_CLASS(USubsystem,UObject,0,Core)

	virtual void Tick( FLOAT DeltaTime )
	{}
	UBOOL AllowScriptDestroy()
	{
		return FALSE;
	}
};

#endif

AUTOGENERATE_FUNCTION(UCommandlet,-1,execMain);
AUTOGENERATE_FUNCTION(ULocale,-1,execSetLanguage);
AUTOGENERATE_FUNCTION(ULocale,-1,execGetDisplayLanguage);
AUTOGENERATE_FUNCTION(ULocale,-1,execGetLanguage);
AUTOGENERATE_FUNCTION(ULogHandler,-1,execAddLogType);
AUTOGENERATE_FUNCTION(ULogHandler,-1,execSetEnabled);
AUTOGENERATE_FUNCTION(UScriptHook,343,execRemoveHook);
AUTOGENERATE_FUNCTION(UScriptHook,342,execSetHook);
AUTOGENERATE_FUNCTION(UScriptHook,341,execAllHooks);
AUTOGENERATE_FUNCTION(UScriptHook,340,execUsedHooks);
AUTOGENERATE_FUNCTION(UScriptHook,-1,execHooksEnabled);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif // NAMES_ONLY

#if ((_MSC_VER) || (HAVE_PRAGMA_PACK))
#pragma pack (pop)
#endif

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Commandlet,HelpCmd)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Commandlet,HelpOneLiner)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Commandlet,HelpUsage)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Commandlet,HelpWebLink)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Commandlet,HelpParm)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,Commandlet,HelpDesc)
VERIFY_CLASS_SIZE_NODIE(UCommandlet)
VERIFY_CLASS_SIZE_NODIE(ULocale)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,LogHandler,Priority)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,LogHandler,LogTypes)
VERIFY_CLASS_SIZE_NODIE(ULogHandler)
VERIFY_CLASS_OFFSET_NODIE_SLOW(U,ScriptHook,Hooks)
VERIFY_CLASS_SIZE_NODIE(UScriptHook)
VERIFY_CLASS_SIZE_NODIE(USubsystem)
#endif // VERIFY_CLASS_SIZES
